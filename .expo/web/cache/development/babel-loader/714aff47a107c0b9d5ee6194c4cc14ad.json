{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DrawerSidebar = function (_React$PureComponent) {\n  (0, _inherits2.default)(DrawerSidebar, _React$PureComponent);\n\n  var _super = _createSuper(DrawerSidebar);\n\n  function DrawerSidebar() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DrawerSidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getScreenOptions\", function (routeKey) {\n      var descriptor = _this.props.descriptors[routeKey];\n\n      if (!descriptor.options) {\n        throw new Error('Cannot access screen descriptor options from drawer sidebar');\n      }\n\n      return descriptor.options;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getLabel\", function (_ref) {\n      var focused = _ref.focused,\n          tintColor = _ref.tintColor,\n          route = _ref.route;\n\n      var _this$getScreenOption = _this.getScreenOptions(route.key),\n          drawerLabel = _this$getScreenOption.drawerLabel,\n          title = _this$getScreenOption.title;\n\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerLabel;\n      }\n\n      if (typeof title === 'string') {\n        return title;\n      }\n\n      return route.routeName;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderIcon\", function (_ref2) {\n      var focused = _ref2.focused,\n          tintColor = _ref2.tintColor,\n          route = _ref2.route;\n\n      var _this$getScreenOption2 = _this.getScreenOptions(route.key),\n          drawerIcon = _this$getScreenOption2.drawerIcon;\n\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : drawerIcon;\n      }\n\n      return null;\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleItemPress\", function (_ref3) {\n      var route = _ref3.route,\n          focused = _ref3.focused;\n\n      if (focused) {\n        _this.props.navigation.closeDrawer();\n      } else {\n        _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({\n          routeName: route.routeName\n        }));\n      }\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DrawerSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var ContentComponent = this.props.contentComponent;\n\n      if (!ContentComponent) {\n        return null;\n      }\n\n      var state = this.props.navigation.state;\n\n      if (typeof state.index !== 'number') {\n        throw new Error('The index of the route should be state in the navigation state');\n      }\n\n      return React.createElement(_reactNative.View, {\n        style: [styles.container, this.props.style]\n      }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        drawerOpenProgress: this.props.drawerOpenProgress,\n        items: state.routes,\n        activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n        screenProps: this.props.screenProps,\n        getLabel: this.getLabel,\n        renderIcon: this.renderIcon,\n        onItemPress: this.handleItemPress,\n        drawerPosition: this.props.drawerPosition\n      })));\n    }\n  }]);\n  return DrawerSidebar;\n}(React.PureComponent);\n\nvar _default = DrawerSidebar;\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerSidebar.tsx"],"names":["React","routeKey","descriptor","route","title","drawerLabel","tintColor","focused","drawerIcon","routeName","ContentComponent","state","styles","drawerPosition","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      // @ts-ignore\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}