{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _ThemeReducer = require(\"../../reducers/ThemeReducer\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _devtools = require(\"@react-navigation/devtools\");\n\nvar _AsyncStorage = _interopRequireDefault(require(\"../AsyncStorage\"));\n\nvar _LinkingPrefixes = _interopRequireDefault(require(\"../LinkingPrefixes\"));\n\nvar _MaterialBottomTabs = _interopRequireDefault(require(\"../screens/MaterialBottomTabs\"));\n\nvar _NotFound = _interopRequireDefault(require(\"./NotFound\"));\n\nvar _AuthFlow = _interopRequireDefault(require(\"./AuthFlow\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar Analytics = _interopRequireWildcard(require(\"expo-firebase-analytics\"));\n\nvar _Profile = _interopRequireDefault(require(\"./Profile\"));\n\nvar _Types = require(\"../../Types\");\n\nvar _AuthReducer = require(\"../../reducers/AuthReducer\");\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/Navigation.tsx\";\n\n(0, _reactNativeScreens.enableScreens)();\nvar Drawer = (0, _drawer.createDrawerNavigator)();\nvar Stack = (0, _stack.createStackNavigator)();\n\nvar Navigation = function Navigation(props) {\n  var theme = props.theme,\n      setUser = props.setUser;\n\n  var _React$useState = React.useState(_reactNative.Platform.OS === 'web'),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isReady = _React$useState2[0],\n      setIsReady = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      initialState = _React$useState4[0],\n      setInitialState = _React$useState4[1];\n\n  function getHeaderTitle(route) {\n    var _getFocusedRouteNameF;\n\n    var routeName = typeof route === 'string' ? route : route !== undefined && typeof route !== 'string' ? (_getFocusedRouteNameF = (0, _native.getFocusedRouteNameFromRoute)(route)) != null ? _getFocusedRouteNameF : 'Feed' : 'Feed';\n\n    switch (routeName) {\n      case 'Agenda' || 'Feed':\n        return 'Agenda';\n\n      case 'CalendarEntry' || 'Calendar':\n        return 'Calendar';\n\n      case 'PainLogEntry' || 'PainLog':\n        return 'Pain Log';\n\n      case 'Profile':\n        return 'My Profile';\n\n      case 'Contacts':\n        return 'Contacts';\n\n      case 'Account':\n        return 'My Account';\n    }\n  }\n\n  React.useEffect(function () {\n    return firebase.auth().onAuthStateChanged(function (userState) {\n      if (userState === null) {\n        var _navigationRef$curren;\n\n        (_navigationRef$curren = navigationRef.current) == null ? void 0 : _navigationRef$curren.navigate('AuthFlow');\n      } else {\n        setUser(userState);\n      }\n    });\n  }, []);\n  var previousRouteName = 'Feed';\n  React.useEffect(function () {\n    var restoreState = function restoreState() {\n      var initialUrl, savedState, state;\n      return _regenerator.default.async(function restoreState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());\n\n            case 3:\n              initialUrl = _context.sent;\n\n              if (!(_reactNative.Platform.OS !== 'web' || initialUrl === null)) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regenerator.default.awrap(_AsyncStorage.default.getItem(_Types.NAVIGATION_PERSISTENCE_KEY));\n\n            case 7:\n              savedState = _context.sent;\n              state = savedState ? JSON.parse(savedState) : undefined;\n\n              if (state !== undefined) {\n                previousRouteName = getHeaderTitle(state);\n                setInitialState(state);\n              }\n\n            case 10:\n              _context.prev = 10;\n              setIsReady(true);\n              return _context.finish(10);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0,, 10, 13]], Promise);\n    };\n\n    restoreState();\n  }, []);\n\n  var _React$useState5 = React.useState(_reactNative.Dimensions.get('window')),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      dimensions = _React$useState6[0],\n      setDimensions = _React$useState6[1];\n\n  React.useEffect(function () {\n    var onDimensionsChange = function onDimensionsChange(_ref) {\n      var window = _ref.window;\n      setDimensions(window);\n    };\n\n    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);\n    };\n  }, []);\n  var navigationRef = React.useRef(null);\n  (0, _devtools.useReduxDevToolsExtension)(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  var isLargeScreen = dimensions.width >= 1024;\n  return React.createElement(_reactNativePaper.Provider, {\n    theme: (0, _ThemeReducer.paperTheme)(theme),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, _reactNative.Platform.OS === 'ios' && React.createElement(_reactNative.StatusBar, {\n    barStyle: theme.dark ? 'light-content' : 'dark-content',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }), React.createElement(_native.NavigationContainer, {\n    ref: navigationRef,\n    initialState: initialState,\n    onStateChange: function onStateChange(state) {\n      var _navigationRef$curren2;\n\n      var currentRoute = (_navigationRef$curren2 = navigationRef.current) == null ? void 0 : _navigationRef$curren2.getCurrentRoute();\n      var currentRouteName = previousRouteName;\n\n      if (currentRoute !== undefined) {\n        currentRouteName = getHeaderTitle(currentRoute.name);\n      }\n\n      _AsyncStorage.default.setItem(_Types.NAVIGATION_PERSISTENCE_KEY, JSON.stringify(state));\n\n      if (previousRouteName !== currentRouteName) {\n        Analytics.setCurrentScreen(currentRouteName);\n      }\n\n      if (currentRouteName) {\n        previousRouteName = currentRouteName;\n      }\n    },\n    theme: theme,\n    linking: {\n      prefixes: _LinkingPrefixes.default,\n      config: {\n        screens: {\n          Root: {\n            path: '',\n            initialRouteName: 'Agenda',\n            screens: {\n              Calendar: 'calendar/:id?',\n              CalendarEntry: 'calendar/:id?',\n              PainLog: 'pain-log/',\n              PainLogEntry: 'pain-log/:id',\n              Contacts: 'people',\n              Dialog: 'dialog',\n              Agenda: '',\n              NotFound: '.+'\n            }\n          }\n        }\n      }\n    },\n    fallback: React.createElement(_reactNativePaper.ActivityIndicator, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }\n    }),\n    documentTitle: {\n      formatter: function formatter(options, route) {\n        var _options$title;\n\n        return ((_options$title = options == null ? void 0 : options.title) != null ? _options$title : getHeaderTitle(route == null ? void 0 : route.name)) + \" - ineffectua\";\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, React.createElement(Drawer.Navigator, {\n    drawerType: isLargeScreen ? 'permanent' : undefined,\n    drawerContent: function drawerContent(props) {\n      return React.createElement(_Profile.default, (0, _extends2.default)({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 104\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Root\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var navigation = _ref2.navigation;\n    return React.createElement(Stack.Navigator, {\n      screenOptions: {\n        headerStyleInterpolator: _stack.HeaderStyleInterpolators.forUIKit\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Tabs\",\n      options: function options(_ref3) {\n        var route = _ref3.route;\n        return {\n          headerTitle: getHeaderTitle(route),\n          headerLeft: isLargeScreen ? undefined : function () {\n            return React.createElement(_reactNativePaper.Appbar.Action, {\n              color: theme.colors.text,\n              icon: \"menu\",\n              onPress: function onPress() {\n                return navigation.toggleDrawer();\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 27\n              }\n            });\n          }\n        };\n      },\n      component: _MaterialBottomTabs.default,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"AuthFlow\",\n      component: _AuthFlow.default,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"NotFound\",\n      component: _NotFound.default,\n      options: {\n        title: 'Oops!'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }));\n  }))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    theme: state.theme\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setUser: function setUser(user) {\n      return dispatch((0, _AuthReducer.SignInAction)(user));\n    }\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Navigation);\n\nexports.default = _default;","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/Navigation.tsx"],"names":["Drawer","Stack","Navigation","props","theme","setUser","React","useState","Platform","OS","isReady","setIsReady","initialState","setInitialState","getHeaderTitle","route","routeName","undefined","useEffect","firebase","auth","onAuthStateChanged","userState","navigationRef","current","navigate","previousRouteName","restoreState","Linking","getInitialURL","initialUrl","AsyncStorage","getItem","NAVIGATION_PERSISTENCE_KEY","savedState","state","JSON","parse","Dimensions","get","dimensions","setDimensions","onDimensionsChange","window","addEventListener","removeEventListener","useRef","isLargeScreen","width","dark","currentRoute","getCurrentRoute","currentRouteName","name","setItem","stringify","Analytics","setCurrentScreen","prefixes","LinkingPrefixes","config","screens","Root","path","initialRouteName","Calendar","CalendarEntry","PainLog","PainLogEntry","Contacts","Dialog","Agenda","NotFound","formatter","options","title","navigation","headerStyleInterpolator","HeaderStyleInterpolators","forUIKit","headerTitle","headerLeft","colors","text","toggleDrawer","MaterialBottomTabs","AuthFlow","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  YellowBox,\n  Platform,\n  StatusBar,\n  Dimensions,\n  ScaledSize,\n  Linking,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { enableScreens } from 'react-native-screens';\nimport {\n  Provider as PaperProvider,\n  Appbar,\n  ActivityIndicator,\n} from 'react-native-paper';\nimport {\n  InitialState,\n  NavigationContainer,\n  NavigationContainerRef,\n  getFocusedRouteNameFromRoute,\n  RouteProp,\n  Theme\n} from '@react-navigation/native';\nimport { paperTheme } from '../../reducers/ThemeReducer'\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n} from '@react-navigation/drawer';\nimport {\n  createStackNavigator,\n  HeaderStyleInterpolators,\n} from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\n// use this to restart the app for things like changing RTL to LTR\n//import { restartApp } from './Restart';\nimport AsyncStorage from '../AsyncStorage';\nimport LinkingPrefixes from '../LinkingPrefixes';\nimport MaterialBottomTabs from '../screens/MaterialBottomTabs';\nimport NotFound from './NotFound';\nimport AuthFlow from './AuthFlow';\nimport { Action as AuthAction } from '../../reducers/AuthReducer'\n\nimport * as firebase from 'firebase';\nimport * as Analytics from 'expo-firebase-analytics';\nimport Profile from './Profile';\n\nimport { NAVIGATION_PERSISTENCE_KEY, State } from '../../Types';\nimport { SignInAction } from '../../reducers/AuthReducer';\n\nenableScreens();\n\ntype RootDrawerParamList = {\n  Root: undefined;\n  Another: undefined;\n};\n\ntype RootStackParamList = {\n  Tabs: undefined\n  AuthFlow: undefined;\n  NotFound: undefined;\n};\n\nconst Drawer = createDrawerNavigator<RootDrawerParamList>();\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst Navigation = (props: { theme: Theme, setUser: (user: firebase.User) => void}) => {\n  const { theme, setUser } = props;\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState<\n    InitialState | undefined\n  >();\n\n  function getHeaderTitle(route: RouteProp<RootStackParamList, \"Tabs\"> | string | undefined) {\n    // If the focused route is not found, we need to assume it's the initial screen\n    // This can happen during if there hasn't been any navigation inside the screen\n    // In our case, it's \"Feed\" as that's the first screen inside the navigator\n    let routeName = typeof route === 'string' ? route : route !== undefined && typeof route !== 'string' ? getFocusedRouteNameFromRoute(route) ?? 'Feed' : 'Feed';\n\n    switch (routeName) {\n      case 'Agenda' || 'Feed':\n        return 'Agenda';\n      case 'CalendarEntry' || 'Calendar':\n        return 'Calendar';\n      case 'PainLogEntry' || 'PainLog':\n        return 'Pain Log';\n      case 'Profile':\n        return 'My Profile';\n      case 'Contacts':\n        return 'Contacts';\n      case 'Account':\n        return 'My Account';\n    }\n  }\n\n  React.useEffect(() => {\n    return firebase.auth().onAuthStateChanged(userState => {\n        if (userState === null) {\n          // user is not authenticated, so navigate\n          navigationRef.current?.navigate('AuthFlow');\n        } else {\n          setUser(userState);\n        }\n      });\n  }, []);\n\n  let previousRouteName = 'Feed';\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' || initialUrl === null) {\n          const savedState = await AsyncStorage.getItem(\n            NAVIGATION_PERSISTENCE_KEY\n          );\n\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            previousRouteName = getHeaderTitle(state) as string;\n            setInitialState(state);\n          }\n        }\n      } finally {\n        setIsReady(true);\n      }\n    };\n\n    restoreState();\n  }, []);\n\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const navigationRef = React.useRef<NavigationContainerRef>(null);\n\n  useReduxDevToolsExtension(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  const isLargeScreen = dimensions.width >= 1024;\n\n  return (\n    <PaperProvider theme={paperTheme(theme)}>\n      {Platform.OS === 'ios' && (\n        <StatusBar barStyle={theme.dark ? 'light-content' : 'dark-content'} />\n      )}\n      <NavigationContainer\n        ref={navigationRef}\n        initialState={initialState}\n        onStateChange={(state) => {\n          const currentRoute = navigationRef.current?.getCurrentRoute();\n          let currentRouteName = previousRouteName;\n          if (currentRoute !== undefined) {\n            currentRouteName = getHeaderTitle(currentRoute.name) as string;\n          }\n\n          AsyncStorage.setItem(\n            NAVIGATION_PERSISTENCE_KEY,\n            JSON.stringify(state)\n          )\n\n          if (previousRouteName !== currentRouteName) {\n            // The line below uses the expo-firebase-analytics tracker\n            // https://docs.expo.io/versions/latest/sdk/firebase-analytics/\n            // Change this line to use another Mobile analytics SDK\n            Analytics.setCurrentScreen(currentRouteName);\n          }\n\n          // Save the current route name for later comparision\n          if (currentRouteName) {\n            previousRouteName = currentRouteName;\n          }\n\n        }}\n        theme={theme}\n        linking={{\n          // To test deep linking on, run the following in the Terminal:\n          // Android: adb shell am start -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/simple-stack\"\n          // iOS: xcrun simctl openurl booted exp://127.0.0.1:19000/--/simple-stack\n          // Android (bare): adb shell am start -a android.intent.action.VIEW -d \"rne://127.0.0.1:19000/--/simple-stack\"\n          // iOS (bare): xcrun simctl openurl booted rne://127.0.0.1:19000/--/simple-stack\n          // The first segment of the link is the the scheme + host (returned by `Linking.makeUrl`)\n          prefixes: LinkingPrefixes,\n          config: {\n            screens: {\n              Root: {\n                path: '',\n                initialRouteName: 'Agenda',\n                screens: {\n                  Calendar: 'calendar/:id?',\n                  CalendarEntry: 'calendar/:id?',\n                  PainLog: 'pain-log/',\n                  PainLogEntry: 'pain-log/:id',\n                  Contacts: 'people',\n                  Dialog: 'dialog',\n                  Agenda: '',\n                  NotFound: '.+',\n                },\n              },\n            },\n          },\n        }}\n        fallback={<ActivityIndicator />}\n        documentTitle={{\n          formatter: (options, route) =>\n            `${options?.title ?? getHeaderTitle(route?.name)} - ineffectua`,\n        }}\n      >\n        <Drawer.Navigator drawerType={isLargeScreen ? 'permanent' : undefined} drawerContent={props => <Profile {...props}/>}>\n          <Drawer.Screen name=\"Root\">\n            {({ navigation }: DrawerScreenProps<RootDrawerParamList>) => (\n              <Stack.Navigator\n                screenOptions={{\n                  headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n                }}\n              >\n                <Stack.Screen\n                  name=\"Tabs\"\n                  options={({ route }) => ({\n                    headerTitle: getHeaderTitle(route),\n                    headerLeft: isLargeScreen\n                      ? undefined\n                      : () => (\n                          <Appbar.Action\n                            color={theme.colors.text}\n                            icon=\"menu\"\n                            onPress={() => navigation.toggleDrawer()}\n                          />\n                        ),\n                  })}\n                  component={MaterialBottomTabs}\n                />\n                <Stack.Screen\n                  name=\"AuthFlow\"\n                  component={AuthFlow}\n                />\n                <Stack.Screen\n                  name=\"NotFound\"\n                  component={NotFound}\n                  options={{ title: 'Oops!' }}\n                />\n              </Stack.Navigator>\n            )}\n          </Drawer.Screen>\n        </Drawer.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  )\n}\n\n// Map State To Props (Redux Store Passes State To Component)\nconst mapStateToProps = (state: State) => {\n  // Redux Store --> Component\n  return {\n    theme: state.theme\n  };\n};// Map Dispatch To Props (Dispatch Actions To Reducers. Reducers Then Modify The Data And Assign It To Your Props)\nconst mapDispatchToProps = (dispatch: (value: AuthAction) => void) => {\n  // Action\n  return {\n    // Login\n    setUser: (user: firebase.User) => dispatch(SignInAction(user)),\n  };\n};// Exports\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation)"]},"metadata":{},"sourceType":"script"}