{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SectionList = exports.FlatList = exports.ScrollView = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _createNavigationAwareScrollable = _interopRequireDefault(require(\"./createNavigationAwareScrollable\"));\n\nvar _invariant = _interopRequireDefault(require(\"./utils/invariant\"));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar WrappedScrollView;\nexports.ScrollView = WrappedScrollView;\n\nif (_reactNative.Platform.OS === 'android') {\n  exports.ScrollView = WrappedScrollView = (0, _createNavigationAwareScrollable.default)(_reactNative.ScrollView);\n} else {\n  exports.ScrollView = WrappedScrollView = (0, _createNavigationAwareScrollable.default)(_reactNativeGestureHandler.ScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  var onRefresh = props.onRefresh;\n\n  if (onRefresh) {\n    (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return _objectSpread({}, props, {\n      refreshControl: props.refreshControl == null ? _react.default.createElement(_reactNative.RefreshControl, {\n        refreshing: props.refreshing,\n        onRefresh: onRefresh,\n        progressViewOffset: props.progressViewOffset\n      }) : props.refreshControl\n    });\n  } else {\n    return props;\n  }\n}\n\nvar WrappedFlatList = _react.default.forwardRef(function (props, ref) {\n  return _react.default.createElement(_reactNative.FlatList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return _react.default.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\n\nexports.FlatList = WrappedFlatList;\n\nvar WrappedSectionList = _react.default.forwardRef(function (props, ref) {\n  return _react.default.createElement(_reactNative.SectionList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return _react.default.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\n\nexports.SectionList = WrappedSectionList;","map":{"version":3,"sources":["Scrollables.js"],"names":["Platform","WrappedScrollView","createNavigationAwareScrollable","onRefresh","props","invariant","JSON","refreshControl","progressViewOffset","WrappedFlatList","ref","propsMaybeWithRefreshControl","WrappedSectionList"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,iBAAA;;;AACA,IAAIA,sBAAAA,EAAAA,KAAJ,SAAA,EAA+B;AAI7BC,uBAAAA,iBAAiB,GAAGC,8CAApBD,uBAAoBC,CAApBD;AAJF,CAAA,MAKO;AACLA,uBAAAA,iBAAiB,GAAGC,8CAApBD,qCAAoBC,CAApBD;AACD;;AAED,SAAA,4BAAA,CAAA,KAAA,EAA6C;AAC3C,MAAME,SAAS,GAAGC,KAAK,CAAvB,SAAA;;AACA,MAAA,SAAA,EAAe;AACbC,4BACE,OAAOD,KAAK,CAAZ,UAAA,KADO,SAATC,EAEE,sFACEC,IAAI,CAAJA,SAAAA,CAAeF,KAAK,CADtB,UACEE,CADF,GAFFD,GAAAA;AAMA,WAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEE,MAAAA,cAAc,EACZ,KAAK,CAAL,cAAA,IAAA,IAAA,GACE,eAAA,aAAA,CAAA,2BAAA,EAAA;AACE,QAAA,UAAU,EAAEH,KAAK,CADnB,UAAA;AAEE,QAAA,SAAS,EAFX,SAAA;AAGE,QAAA,kBAAkB,EAAEA,KAAK,CAACI;AAH5B,OAAA,CADF,GAOEJ,KAAK,CAACG;AAVZ,KAAA,CAAA;AAPF,GAAA,MAoBO;AACL,WAAA,KAAA;AACD;AACF;;AAED,IAAME,eAAe,GAAG,eAAA,UAAA,CAAiB,UAAA,KAAA,EAAA,GAAA;AAAA,SACvC,eAAA,aAAA,CAAA,qBAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAEC;AADP,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,qBAAqB,EAAGN,+BAAAA,KAAD;AAAA,aACrB,eAAA,aAAA,CAAA,iBAAA,EAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB;AAAA;AAHzB,GAAA,CAAA,CADuC;AAAA,CAAjB,CAAxB;;;;AAUA,IAAMC,kBAAkB,GAAG,eAAA,UAAA,CAAiB,UAAA,KAAA,EAAA,GAAA;AAAA,SAC1C,eAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAEF;AADP,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,qBAAqB,EAAGN,+BAAAA,KAAD;AAAA,aACrB,eAAA,aAAA,CAAA,iBAAA,EAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB;AAAA;AAHzB,GAAA,CAAA,CAD0C;AAAA,CAAjB,CAA3B","sourcesContent":["import React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\n// eslint-disable-next-line import/named\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]},"metadata":{},"sourceType":"script"}