{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextInputAffix = exports.default = exports.AffixAdornment = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../../core/theming\");\n\nvar _enums = require(\"./enums\");\n\nvar AFFIX_OFFSET = 12;\n\nvar AffixContext = _react.default.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: _enums.AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible;\n  return _react.default.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible\n    }\n  }, affix);\n};\n\nexports.AffixAdornment = AffixAdornment;\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n      theme = _ref2.theme;\n\n  var _React$useContext = _react.default.useContext(AffixContext),\n      textStyle = _React$useContext.textStyle,\n      onLayout = _React$useContext.onLayout,\n      topPosition = _React$useContext.topPosition,\n      side = _React$useContext.side,\n      visible = _React$useContext.visible;\n\n  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var style = (0, _defineProperty2.default)({\n    top: topPosition\n  }, side, AFFIX_OFFSET);\n  return _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, _react.default.createElement(_reactNative.Text, {\n    style: [{\n      color: textColor\n    }, textStyle]\n  }, text));\n};\n\nexports.TextInputAffix = TextInputAffix;\nTextInputAffix.displayName = 'TextInput.Affix';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(TextInputAffix);\n\nexports.default = _default;","map":{"version":3,"sources":["Affix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","visible","onLayout","TextInputAffix","theme","React","textColor","style","top","styles","opacity","inputRange","outputRange","container","position","justifyContent","alignItems","withTheme"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AASA;;AACA;;AAEA,IAAMA,YAAY,GAAlB,EAAA;;AAmBA,IAAMC,YAAY,GAAG,eAAA,aAAA,CAAkC;AACrDC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,UAAU,EAAZ,EAAA;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAD0C;AAErDC,EAAAA,WAAW,EAF0C,IAAA;AAGrDC,EAAAA,IAAI,EAAEC,qBAAcC;AAHiC,CAAlC,CAArB;;AAMO,IAAMC,cAKZ,GAAG,SALSA,cAKT,OAAgE;AAAA,MAA/D,KAA+D,QAA/D,KAA+D;AAAA,MAA/D,IAA+D,QAA/D,IAA+D;AAAA,MAA/D,SAA+D,QAA/D,SAA+D;AAAA,MAA/D,WAA+D,QAA/D,WAA+D;AAAA,MAA/D,QAA+D,QAA/D,QAA+D;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAClE,SACE,eAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,IADK,EACLA,IADK;AAELJ,MAAAA,SAFK,EAELA,SAFK;AAGLG,MAAAA,WAHK,EAGLA,WAHK;AAILM,MAAAA,QAJK,EAILA,QAJK;AAKLD,MAAAA,OAAAA,EAAAA;AALK;AADT,GAAA,EADF,KACE,CADF;AANK,CAAA;;;;AAqBP,IAAME,cAAc,GAAG,SAAjBA,cAAiB,QAA4B;AAAA,MAA3B,IAA2B,SAA3B,IAA2B;AAAA,MAAnBC,KAAmB,SAAnBA,KAAmB;;AAAA,0BACWC,eAAAA,UAAAA,CAA5D,YAA4DA,CADX;AAAA,MAC3C,SAD2C,qBAC3C,SAD2C;AAAA,MAC3C,QAD2C,qBAC3C,QAD2C;AAAA,MAC3C,WAD2C,qBAC3C,WAD2C;AAAA,MAC3C,IAD2C,qBAC3C,IAD2C;AAAA,MACDJ,OADC,qBACDA,OADC;;AAIjD,MAAMK,SAAS,GAAGX,oBAAMS,KAAK,CAALA,MAAAA,CAANT,IAAAA,EAAAA,KAAAA,CACTS,KAAK,CAALA,IAAAA,GAAAA,GAAAA,GADST,IAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB;AAKA,MAAMY,KAAK;AACTC,IAAAA,GAAG,EADS;AAAH,KAET,IAFS,EAEDjB,YAFC,CAAX;AAKA,SACE,eAAA,aAAA,CAAA,sBAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLkB,MAAM,CADD,SAAA,EAAA,KAAA,EAGL;AACEC,MAAAA,OAAO,EACL,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,WAAA,CAAqB;AACnBC,QAAAA,UAAU,EAAE,CAAA,CAAA,EADO,CACP,CADO;AAEnBC,QAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;AAFM,OAArB,CAAA,KAGM;AALV,KAHK,CADT;AAYE,IAAA,QAAQ,EAAEV;AAZZ,GAAA,EAcE,eAAA,aAAA,CAAA,iBAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEP,MAAAA,KAAK,EAAEW;AAAT,KAAD,EAAA,SAAA;AAAb,GAAA,EAfJ,IAeI,CAdF,CADF;AAdF,CAAA;;;AAiCAH,cAAc,CAAdA,WAAAA,GAAAA,iBAAAA;;AAEA,IAAMM,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BI,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EADC,UAAA;AAETC,IAAAA,cAAc,EAFL,QAAA;AAGTC,IAAAA,UAAU,EAAE;AAHH;AADoB,CAAlB,CAAf;;eAQeC,wBAAf,cAAeA,C","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nexport const AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix };\n"]},"metadata":{},"sourceType":"script"}