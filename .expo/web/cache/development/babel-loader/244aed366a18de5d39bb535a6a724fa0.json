{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = PainLogEntry;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _jsxFileName = \"/home/wade/projects/ineffectua/src/components/shared/PainLogEntry.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar COVERS = [{\n  uri: \"//static.invertase.io/assets/firebase/analytics.svg\"\n}];\n\nfunction PainLogEntry(props) {\n  var _this = this;\n\n  var _React$useState = React.useState(_reactNative.Dimensions.get('window')),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onDimensionsChange = function onDimensionsChange(_ref) {\n      var window = _ref.window;\n      setDimensions(window);\n    };\n\n    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);\n    };\n  }, []);\n  var ref = React.useRef(null);\n  (0, _native.useScrollToTop)(ref);\n  var itemSize = dimensions.width / Math.floor(dimensions.width / 150);\n  return React.createElement(_reactNative.ScrollView, (0, _extends2.default)({\n    ref: ref,\n    contentContainerStyle: styles.content\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), COVERS.map(function (source, i) {\n    return React.createElement(_reactNative.View, {\n      key: i,\n      style: [styles.item, _reactNative.Platform.OS !== 'web' && {\n        height: itemSize,\n        width: itemSize\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, React.createElement(_reactNative.Image, {\n      source: source,\n      style: styles.photo,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }));\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create(_objectSpread(_objectSpread({}, _reactNative.Platform.select({\n  web: {\n    content: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))'\n    },\n    item: {\n      width: '100%'\n    }\n  },\n  default: {\n    content: {\n      flexDirection: 'row',\n      flexWrap: 'wrap'\n    }\n  }\n})), {}, {\n  photo: {\n    flex: 1,\n    resizeMode: 'cover',\n    paddingTop: '100%'\n  }\n}));","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/shared/PainLogEntry.tsx"],"names":["COVERS","uri","PainLogEntry","props","React","useState","Dimensions","get","dimensions","setDimensions","useEffect","onDimensionsChange","window","addEventListener","removeEventListener","ref","useRef","itemSize","width","Math","floor","styles","content","map","source","i","item","Platform","OS","height","photo","StyleSheet","create","select","web","display","gridTemplateColumns","default","flexDirection","flexWrap","flex","resizeMode","paddingTop"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AAUA;;;;;;;;AAEA,IAAMA,MAAM,GAAG,CACb;AAAEC,EAAAA,GAAG,EAAE;AAAP,CADa,CAAf;;AAIe,SAASC,YAAT,CAAsBC,KAAtB,EAAuD;AAAA;;AAAA,wBAChCC,KAAK,CAACC,QAAN,CAAeC,wBAAWC,GAAX,CAAe,QAAf,CAAf,CADgC;AAAA;AAAA,MAC7DC,UAD6D;AAAA,MACjDC,aADiD;;AAGpEL,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AACpB,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAwC;AAAA,UAArCC,MAAqC,QAArCA,MAAqC;AACjEH,MAAAA,aAAa,CAACG,MAAD,CAAb;AACD,KAFD;;AAIAN,4BAAWO,gBAAX,CAA4B,QAA5B,EAAsCF,kBAAtC;;AAEA,WAAO;AAAA,aAAML,wBAAWQ,mBAAX,CAA+B,QAA/B,EAAyCH,kBAAzC,CAAN;AAAA,KAAP;AACD,GARD,EAQG,EARH;AAUA,MAAMI,GAAG,GAAGX,KAAK,CAACY,MAAN,CAAyB,IAAzB,CAAZ;AAEA,8BAAeD,GAAf;AAEA,MAAME,QAAQ,GAAGT,UAAU,CAACU,KAAX,GAAmBC,IAAI,CAACC,KAAL,CAAWZ,UAAU,CAACU,KAAX,GAAmB,GAA9B,CAApC;AAEA,SACE,oBAAC,uBAAD;AAAY,IAAA,GAAG,EAAEH,GAAjB;AAAsB,IAAA,qBAAqB,EAAEM,MAAM,CAACC;AAApD,KAAiEnB,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGH,MAAM,CAACuB,GAAP,CAAW,UAACC,MAAD,EAASC,CAAT;AAAA,WACV,oBAAC,iBAAD;AAEE,MAAA,GAAG,EAAEA,CAFP;AAGE,MAAA,KAAK,EAAE,CACLJ,MAAM,CAACK,IADF,EAELC,sBAASC,EAAT,KAAgB,KAAhB,IAAyB;AACvBC,QAAAA,MAAM,EAAEZ,QADe;AAEvBC,QAAAA,KAAK,EAAED;AAFgB,OAFpB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE,oBAAC,kBAAD;AAAO,MAAA,MAAM,EAAEO,MAAf;AAAuB,MAAA,KAAK,EAAEH,MAAM,CAACS,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADU;AAAA,GAAX,CADH,CADF;AAmBD;;AAED,IAAMT,MAAM,GAAGU,wBAAWC,MAAX,iCACVL,sBAASM,MAAT,CAAgB;AACjBC,EAAAA,GAAG,EAAE;AACHZ,IAAAA,OAAO,EAAE;AACPa,MAAAA,OAAO,EAAE,MADF;AAEPC,MAAAA,mBAAmB,EAAE;AAFd,KADN;AAKHV,IAAAA,IAAI,EAAE;AACJR,MAAAA,KAAK,EAAE;AADH;AALH,GADY;AAUjBmB,EAAAA,OAAO,EAAE;AACPf,IAAAA,OAAO,EAAE;AACPgB,MAAAA,aAAa,EAAE,KADR;AAEPC,MAAAA,QAAQ,EAAE;AAFH;AADF;AAVQ,CAAhB,CADU;AAkBbT,EAAAA,KAAK,EAAE;AACLU,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,UAAU,EAAE,OAFP;AAGLC,IAAAA,UAAU,EAAE;AAHP;AAlBM,GAAf","sourcesContent":["/* eslint-disable import/no-commonjs */\n\nimport * as React from 'react';\nimport {\n  View,\n  Image,\n  ScrollView,\n  StyleSheet,\n  ScrollViewProps,\n  Dimensions,\n  Platform,\n  ScaledSize,\n} from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nconst COVERS = [\n  { uri: \"//static.invertase.io/assets/firebase/analytics.svg\" }\n];\n\nexport default function PainLogEntry(props: Partial<ScrollViewProps>) {\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const ref = React.useRef<ScrollView>(null);\n\n  useScrollToTop(ref);\n\n  const itemSize = dimensions.width / Math.floor(dimensions.width / 150);\n\n  return (\n    <ScrollView ref={ref} contentContainerStyle={styles.content} {...props}>\n      {COVERS.map((source, i) => (\n        <View\n          // eslint-disable-next-line react/no-array-index-key\n          key={i}\n          style={[\n            styles.item,\n            Platform.OS !== 'web' && {\n              height: itemSize,\n              width: itemSize,\n            },\n          ]}\n        >\n          <Image source={source} style={styles.photo} />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  ...Platform.select({\n    web: {\n      content: {\n        display: 'grid' as 'none',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))',\n      },\n      item: {\n        width: '100%',\n      },\n    },\n    default: {\n      content: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      },\n    },\n  }),\n  photo: {\n    flex: 1,\n    resizeMode: 'cover',\n    paddingTop: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}