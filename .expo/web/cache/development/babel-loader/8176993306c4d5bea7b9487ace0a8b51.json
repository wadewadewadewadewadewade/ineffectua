{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = App;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _redux = require(\"redux\");\n\nvar _reducers = _interopRequireDefault(require(\"../reducers\"));\n\nvar _middleware = _interopRequireDefault(require(\"../middleware\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _devtools = require(\"@react-navigation/devtools\");\n\nvar _AsyncStorage = _interopRequireDefault(require(\"./AsyncStorage\"));\n\nvar _LinkingPrefixes = _interopRequireDefault(require(\"./LinkingPrefixes\"));\n\nvar _SettingsItem = _interopRequireDefault(require(\"./shared/SettingsItem\"));\n\nvar _SimpleStack = _interopRequireDefault(require(\"./screens/SimpleStack\"));\n\nvar _ModalPresentationStack = _interopRequireDefault(require(\"./screens/ModalPresentationStack\"));\n\nvar _StackTransparent = _interopRequireDefault(require(\"./screens/StackTransparent\"));\n\nvar _StackHeaderCustomization = _interopRequireDefault(require(\"./screens/StackHeaderCustomization\"));\n\nvar _MaterialBottomTabs = _interopRequireDefault(require(\"./screens/MaterialBottomTabs\"));\n\nvar _NotFound = _interopRequireDefault(require(\"./screens/NotFound\"));\n\nvar _MasterDetail = _interopRequireDefault(require(\"./screens/MasterDetail\"));\n\nvar _AuthFlow = _interopRequireDefault(require(\"./screens/AuthFlow\"));\n\nvar _LinkComponent = _interopRequireDefault(require(\"./screens/LinkComponent\"));\n\nvar _AuthContext = _interopRequireDefault(require(\"./shared/AuthContext\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar Analytics = _interopRequireWildcard(require(\"expo-firebase-analytics\"));\n\nvar _Profile = _interopRequireDefault(require(\"./screens/Profile\"));\n\nvar _jsxFileName = \"/home/wade/projects/ineffectua/src/components/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAc7X0OaRKdN50CMAVQDu-EPrUBXhP58n4\",\n  authDomain: \"ineffectua.firebaseapp.com\",\n  databaseURL: \"https://ineffectua.firebaseio.com\",\n  projectId: \"ineffectua\",\n  storageBucket: \"ineffectua.appspot.com\",\n  messagingSenderId: \"sender-id\",\n  appId: \"1:616783557128:android:c473fc0abeb11b16\",\n  measurementId: \"G-153557660\"\n};\nfirebase.initializeApp(firebaseConfig);\nvar store = (0, _redux.createStore)(_reducers.default, _middleware.default);\n\n_reactNative.YellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);\n\n(0, _reactNativeScreens.enableScreens)();\nvar SCREENS = {\n  SimpleStack: {\n    title: 'Simple Stack',\n    component: _SimpleStack.default\n  },\n  ModalPresentationStack: {\n    title: 'Modal Presentation Stack',\n    component: _ModalPresentationStack.default\n  },\n  StackTransparent: {\n    title: 'Transparent Stack',\n    component: _StackTransparent.default\n  },\n  StackHeaderCustomization: {\n    title: 'Header Customization in Stack',\n    component: _StackHeaderCustomization.default\n  },\n  MaterialBottomTabs: {\n    title: 'Material Bottom Tabs',\n    component: _MaterialBottomTabs.default\n  },\n  MasterDetail: {\n    title: 'Master Detail',\n    component: _MasterDetail.default\n  },\n  AuthFlow: {\n    title: 'Auth Flow',\n    component: _AuthFlow.default\n  },\n  LinkComponent: {\n    title: '<Link />',\n    component: _LinkComponent.default\n  }\n};\nvar Drawer = (0, _drawer.createDrawerNavigator)();\nvar Stack = (0, _stack.createStackNavigator)();\nvar NAVIGATION_PERSISTENCE_KEY = 'NAVIGATION_STATE';\nvar THEME_PERSISTENCE_KEY = 'THEME_TYPE';\n\nfunction App() {\n  var _this = this;\n\n  var _React$useState = React.useState(_native.DefaultTheme),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var _React$useState3 = React.useState(_reactNative.Platform.OS === 'web'),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      isReady = _React$useState4[0],\n      setIsReady = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      initialState = _React$useState6[0],\n      setInitialState = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),\n      user = _React$useState8[0],\n      setUser = _React$useState8[1];\n\n  var routeName = undefined;\n  React.useEffect(function () {\n    firebase.auth().onAuthStateChanged(function (userState) {\n      console.log('authState Changed', userState);\n\n      if (userState === null) {\n        var _navigationRef$curren;\n\n        (_navigationRef$curren = navigationRef.current) == null ? void 0 : _navigationRef$curren.navigate('AuthFlow');\n      } else {\n        setUser(userState);\n      }\n    });\n  }, []);\n  React.useEffect(function () {\n    var restoreState = function restoreState() {\n      var initialUrl, savedState, state, themeName;\n      return _regenerator.default.async(function restoreState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());\n\n            case 3:\n              initialUrl = _context.sent;\n\n              if (!(_reactNative.Platform.OS !== 'web' || initialUrl === null)) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regenerator.default.awrap(_AsyncStorage.default.getItem(NAVIGATION_PERSISTENCE_KEY));\n\n            case 7:\n              savedState = _context.sent;\n              state = savedState ? JSON.parse(savedState) : undefined;\n\n              if (state !== undefined) {\n                setInitialState(state);\n              }\n\n            case 10:\n              _context.prev = 10;\n              _context.prev = 11;\n              _context.next = 14;\n              return _regenerator.default.awrap(_AsyncStorage.default.getItem(THEME_PERSISTENCE_KEY));\n\n            case 14:\n              themeName = _context.sent;\n              setTheme(themeName === 'dark' ? _native.DarkTheme : _native.DefaultTheme);\n              _context.next = 20;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](11);\n\n            case 20:\n              setIsReady(true);\n              return _context.finish(10);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0,, 10, 22], [11, 18]], Promise);\n    };\n\n    restoreState();\n  }, []);\n  var paperTheme = React.useMemo(function () {\n    var t = theme.dark ? _reactNativePaper.DarkTheme : _reactNativePaper.DefaultTheme;\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), theme.colors), {}, {\n        surface: theme.colors.card,\n        accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)'\n      })\n    });\n  }, [theme.colors, theme.dark]);\n\n  var _React$useState9 = React.useState(_reactNative.Dimensions.get('window')),\n      _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),\n      dimensions = _React$useState10[0],\n      setDimensions = _React$useState10[1];\n\n  React.useEffect(function () {\n    var onDimensionsChange = function onDimensionsChange(_ref) {\n      var window = _ref.window;\n      setDimensions(window);\n    };\n\n    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);\n    };\n  }, []);\n  var navigationRef = React.useRef(null);\n  (0, _devtools.useReduxDevToolsExtension)(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  var isLargeScreen = dimensions.width >= 1024;\n  return React.createElement(_reactRedux.Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNativePaper.Provider, {\n    theme: paperTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, _reactNative.Platform.OS === 'ios' && React.createElement(_reactNative.StatusBar, {\n    barStyle: theme.dark ? 'light-content' : 'dark-content',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }), React.createElement(_AuthContext.default.Provider, {\n    value: {\n      user: user,\n      signIn: function signIn() {\n        return new Promise(function (r) {\n          var _navigationRef$curren2;\n\n          return r((_navigationRef$curren2 = navigationRef.current) == null ? void 0 : _navigationRef$curren2.navigate('AuthFlow'));\n        });\n      },\n      signOut: function signOut() {\n        return firebase.auth().signOut();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, React.createElement(_native.NavigationContainer, {\n    ref: navigationRef,\n    initialState: initialState,\n    onReady: function onReady() {\n      var _navigationRef$curren3;\n\n      var currentRoute = (_navigationRef$curren3 = navigationRef.current) == null ? void 0 : _navigationRef$curren3.getCurrentRoute();\n      routeName = currentRoute == null ? void 0 : currentRoute.name;\n    },\n    onStateChange: function onStateChange(state) {\n      var _navigationRef$curren4;\n\n      var previousRouteName = routeName;\n      var currentRoute = (_navigationRef$curren4 = navigationRef.current) == null ? void 0 : _navigationRef$curren4.getCurrentRoute();\n      var currentRouteName = currentRoute == null ? void 0 : currentRoute.name;\n\n      _AsyncStorage.default.setItem(NAVIGATION_PERSISTENCE_KEY, JSON.stringify(state));\n\n      if (previousRouteName !== currentRouteName) {\n        Analytics.setCurrentScreen(currentRouteName);\n      }\n\n      if (currentRouteName) {\n        routeName = currentRouteName;\n      }\n    },\n    theme: theme,\n    linking: {\n      prefixes: _LinkingPrefixes.default,\n      config: {\n        screens: {\n          Root: {\n            path: '',\n            initialRouteName: 'Home',\n            screens: Object.keys(SCREENS).reduce(function (acc, name) {\n              var path = name.replace(/([A-Z]+)/g, '-$1').replace(/^-/, '').toLowerCase();\n              acc[name] = {\n                path: path,\n                screens: {\n                  Article: {\n                    path: 'article/:author?',\n                    parse: {\n                      author: function author(_author) {\n                        return _author.charAt(0).toUpperCase() + _author.slice(1).replace(/-/g, ' ');\n                      }\n                    },\n                    stringify: {\n                      author: function author(_author2) {\n                        return _author2.toLowerCase().replace(/\\s/g, '-');\n                      }\n                    }\n                  },\n                  Albums: 'music',\n                  Contacts: 'people',\n                  NewsFeed: 'feed',\n                  Dialog: 'dialog'\n                }\n              };\n              return acc;\n            }, {\n              Home: '',\n              NotFound: '*'\n            })\n          }\n        }\n      }\n    },\n    fallback: React.createElement(_reactNativePaper.ActivityIndicator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 23\n      }\n    }),\n    documentTitle: {\n      formatter: function formatter(options, route) {\n        var _options$title;\n\n        return ((_options$title = options == null ? void 0 : options.title) != null ? _options$title : route == null ? void 0 : route.name) + \" - ineffectua\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, React.createElement(Drawer.Navigator, {\n    drawerType: isLargeScreen ? 'permanent' : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Root\",\n    options: {\n      title: 'Examples'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, function (_ref2) {\n    var navigation = _ref2.navigation;\n    return React.createElement(Stack.Navigator, {\n      screenOptions: {\n        headerStyleInterpolator: _stack.HeaderStyleInterpolators.forUIKit\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 19\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Home\",\n      options: {\n        title: 'Examples',\n        headerLeft: isLargeScreen ? undefined : function () {\n          return React.createElement(_reactNative.ScrollView, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 31\n            }\n          }, React.createElement(_reactNativePaper.Appbar.Action, {\n            color: theme.colors.text,\n            icon: \"menu\",\n            onPress: function onPress() {\n              return navigation.toggleDrawer();\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 33\n            }\n          }), navigationRef.current ? React.createElement(_Profile.default, (0, _extends2.default)({}, navigationRef.current, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 35\n            }\n          })) : null);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }\n    }, function (_ref3) {\n      var navigation = _ref3.navigation;\n      return React.createElement(_reactNative.ScrollView, {\n        style: {\n          backgroundColor: theme.colors.background\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }\n      }, React.createElement(_SettingsItem.default, {\n        label: \"Dark theme\",\n        value: theme.dark,\n        onValueChange: function onValueChange() {\n          _AsyncStorage.default.setItem(THEME_PERSISTENCE_KEY, theme.dark ? 'light' : 'dark');\n\n          setTheme(function (t) {\n            return t.dark ? _native.DefaultTheme : _native.DarkTheme;\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 27\n        }\n      }), React.createElement(_reactNativePaper.Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 27\n        }\n      }), Object.keys(SCREENS).map(function (name) {\n        return React.createElement(_reactNativePaper.List.Item, {\n          key: name,\n          testID: name,\n          title: SCREENS[name].title,\n          onPress: function onPress() {\n            return navigation.navigate(name);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 31\n          }\n        });\n      }));\n    }), React.createElement(Stack.Screen, {\n      name: \"NotFound\",\n      component: _NotFound.default,\n      options: {\n        title: 'Oops!'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }\n    }), Object.keys(SCREENS).map(function (name) {\n      return React.createElement(Stack.Screen, {\n        key: name,\n        name: name,\n        getComponent: function getComponent() {\n          return SCREENS[name].component;\n        },\n        options: {\n          title: SCREENS[name].title\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 25\n        }\n      });\n    }));\n  }))))));\n}","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/App.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","store","reducer","middleware","YellowBox","ignoreWarnings","SCREENS","SimpleStack","title","component","ModalPresentationStack","StackTransparent","StackHeaderCustomization","MaterialBottomTabs","MasterDetail","AuthFlow","LinkComponent","Drawer","Stack","NAVIGATION_PERSISTENCE_KEY","THEME_PERSISTENCE_KEY","App","React","useState","DefaultTheme","theme","setTheme","Platform","OS","isReady","setIsReady","initialState","setInitialState","user","setUser","routeName","undefined","useEffect","auth","onAuthStateChanged","userState","console","log","navigationRef","current","navigate","restoreState","Linking","getInitialURL","initialUrl","AsyncStorage","getItem","savedState","state","JSON","parse","themeName","DarkTheme","paperTheme","useMemo","t","dark","PaperDarkTheme","PaperLightTheme","colors","surface","card","accent","Dimensions","get","dimensions","setDimensions","onDimensionsChange","window","addEventListener","removeEventListener","useRef","isLargeScreen","width","signIn","Promise","r","signOut","currentRoute","getCurrentRoute","name","previousRouteName","currentRouteName","setItem","stringify","Analytics","setCurrentScreen","prefixes","LinkingPrefixes","config","screens","Root","path","initialRouteName","Object","keys","reduce","acc","replace","toLowerCase","Article","author","charAt","toUpperCase","slice","Albums","Contacts","NewsFeed","Dialog","Home","NotFound","formatter","options","route","navigation","headerStyleInterpolator","HeaderStyleInterpolators","forUIKit","headerLeft","text","toggleDrawer","backgroundColor","background","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from '../reducers'\nimport middleware from '../middleware'\nimport {\n  ScrollView,\n  YellowBox,\n  Platform,\n  StatusBar,\n  Dimensions,\n  ScaledSize,\n  Linking,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { enableScreens } from 'react-native-screens';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {\n  Provider as PaperProvider,\n  DefaultTheme as PaperLightTheme,\n  DarkTheme as PaperDarkTheme,\n  Appbar,\n  List,\n  Divider,\n  Text,\n  ActivityIndicator,\n} from 'react-native-paper';\nimport {\n  InitialState,\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n  PathConfigMap,\n  NavigationContainerRef,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n} from '@react-navigation/drawer';\nimport {\n  createStackNavigator,\n  StackScreenProps,\n  HeaderStyleInterpolators,\n} from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\n// use this to restart the app for things like changing RTL to LTR\n//import { restartApp } from './Restart';\nimport AsyncStorage from './AsyncStorage';\nimport LinkingPrefixes from './LinkingPrefixes';\nimport SettingsItem from './shared/SettingsItem';\nimport SimpleStack from './screens/SimpleStack';\nimport ModalPresentationStack from './screens/ModalPresentationStack';\nimport StackTransparent from './screens/StackTransparent';\nimport StackHeaderCustomization from './screens/StackHeaderCustomization';\nimport MaterialBottomTabs from './screens/MaterialBottomTabs';\nimport NotFound from './screens/NotFound';\nimport MasterDetail from './screens/MasterDetail';\nimport AuthFlow from './screens/AuthFlow';\nimport LinkComponent from './screens/LinkComponent';\n\nimport AuthContext from './shared/AuthContext'\n\nimport * as firebase from 'firebase';\nimport * as Analytics from 'expo-firebase-analytics';\nimport Profile from './screens/Profile';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAc7X0OaRKdN50CMAVQDu-EPrUBXhP58n4\",\n  authDomain: \"ineffectua.firebaseapp.com\",\n  databaseURL: \"https://ineffectua.firebaseio.com\",\n  projectId: \"ineffectua\",\n  storageBucket: \"ineffectua.appspot.com\",\n  messagingSenderId: \"sender-id\",\n  appId: \"1:616783557128:android:c473fc0abeb11b16\",\n  measurementId: \"G-153557660\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst store = createStore(reducer, middleware);\n\nYellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);\n\nenableScreens();\n\ntype RootDrawerParamList = {\n  Root: undefined;\n  Another: undefined;\n};\n\ntype RootStackParamList = {\n  Home: undefined;\n  NotFound: undefined;\n} & {\n  [P in keyof typeof SCREENS]: undefined;\n};\n\nconst SCREENS = {\n  SimpleStack: { title: 'Simple Stack', component: SimpleStack },\n  ModalPresentationStack: {\n    title: 'Modal Presentation Stack',\n    component: ModalPresentationStack,\n  },\n  StackTransparent: {\n    title: 'Transparent Stack',\n    component: StackTransparent,\n  },\n  StackHeaderCustomization: {\n    title: 'Header Customization in Stack',\n    component: StackHeaderCustomization,\n  },\n  MaterialBottomTabs: {\n    title: 'Material Bottom Tabs',\n    component: MaterialBottomTabs,\n  },\n  MasterDetail: {\n    title: 'Master Detail',\n    component: MasterDetail,\n  },\n  AuthFlow: {\n    title: 'Auth Flow',\n    component: AuthFlow,\n  },\n  LinkComponent: {\n    title: '<Link />',\n    component: LinkComponent,\n  },\n};\n\nconst Drawer = createDrawerNavigator<RootDrawerParamList>();\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst NAVIGATION_PERSISTENCE_KEY = 'NAVIGATION_STATE';\nconst THEME_PERSISTENCE_KEY = 'THEME_TYPE';\n\nexport default function App() {\n  const [theme, setTheme] = React.useState(DefaultTheme);\n\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState<\n    InitialState | undefined\n  >();\n\n  //detect auth status so we can redirect accordingly\n  const [user, setUser] = React.useState<firebase.User | null>(null);\n\n  let routeName: string | undefined = undefined;\n\n  React.useEffect(() => {\n    //const checkAuthentication = async () => {\n      firebase.auth().onAuthStateChanged(userState => {\n        console.log('authState Changed', userState)\n        if (userState === null) {\n          // user is not authenticated, so navigate\n          navigationRef.current?.navigate('AuthFlow');\n        } else {\n          setUser(userState);\n        }\n      });\n    //};\n    //checkAuthentication();\n  }, []);\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' || initialUrl === null) {\n          const savedState = await AsyncStorage.getItem(\n            NAVIGATION_PERSISTENCE_KEY\n          );\n\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        try {\n          const themeName = await AsyncStorage.getItem(THEME_PERSISTENCE_KEY);\n\n          setTheme(themeName === 'dark' ? DarkTheme : DefaultTheme);\n        } catch (e) {\n          // Ignore\n        }\n\n        setIsReady(true);\n      }\n    };\n\n    restoreState();\n  }, []);\n\n  const paperTheme = React.useMemo(() => {\n    const t = theme.dark ? PaperDarkTheme : PaperLightTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...theme.colors,\n        surface: theme.colors.card,\n        accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)',\n      },\n    };\n  }, [theme.colors, theme.dark]);\n\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const navigationRef = React.useRef<NavigationContainerRef>(null);\n\n  useReduxDevToolsExtension(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  const isLargeScreen = dimensions.width >= 1024;\n\n  return (\n    <ReduxProvider store={store}>\n      <PaperProvider theme={paperTheme}>\n        {Platform.OS === 'ios' && (\n          <StatusBar barStyle={theme.dark ? 'light-content' : 'dark-content'} />\n        )}\n        <AuthContext.Provider \n          value={{ \n              user: user, \n              signIn: () => new Promise((r) => r(navigationRef.current?.navigate('AuthFlow'))),\n              signOut: () => firebase.auth().signOut(),\n          }}\n        >\n          <NavigationContainer\n            ref={navigationRef}\n            initialState={initialState}\n            onReady={() => {\n              const currentRoute = navigationRef.current?.getCurrentRoute();\n              routeName = currentRoute?.name;\n            }}\n            onStateChange={(state) => {\n              const previousRouteName = routeName;\n              const currentRoute = navigationRef.current?.getCurrentRoute();\n              const currentRouteName = currentRoute?.name;\n\n              AsyncStorage.setItem(\n                NAVIGATION_PERSISTENCE_KEY,\n                JSON.stringify(state)\n              )\n\n              if (previousRouteName !== currentRouteName) {\n                // The line below uses the expo-firebase-analytics tracker\n                // https://docs.expo.io/versions/latest/sdk/firebase-analytics/\n                // Change this line to use another Mobile analytics SDK\n                Analytics.setCurrentScreen(currentRouteName);\n              }\n\n              // Save the current route name for later comparision\n              if (currentRouteName) {\n                routeName = currentRouteName;\n              }\n\n            }}\n            theme={theme}\n            linking={{\n              // To test deep linking on, run the following in the Terminal:\n              // Android: adb shell am start -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/simple-stack\"\n              // iOS: xcrun simctl openurl booted exp://127.0.0.1:19000/--/simple-stack\n              // Android (bare): adb shell am start -a android.intent.action.VIEW -d \"rne://127.0.0.1:19000/--/simple-stack\"\n              // iOS (bare): xcrun simctl openurl booted rne://127.0.0.1:19000/--/simple-stack\n              // The first segment of the link is the the scheme + host (returned by `Linking.makeUrl`)\n              prefixes: LinkingPrefixes,\n              config: {\n                screens: {\n                  Root: {\n                    path: '',\n                    initialRouteName: 'Home',\n                    screens: Object.keys(SCREENS).reduce<PathConfigMap>(\n                      (acc, name) => {\n                        // Convert screen names such as SimpleStack to kebab case (simple-stack)\n                        const path = name\n                          .replace(/([A-Z]+)/g, '-$1')\n                          .replace(/^-/, '')\n                          .toLowerCase();\n\n                        acc[name] = {\n                          path,\n                          screens: {\n                            Article: {\n                              path: 'article/:author?',\n                              parse: {\n                                author: (author) =>\n                                  author.charAt(0).toUpperCase() +\n                                  author.slice(1).replace(/-/g, ' '),\n                              },\n                              stringify: {\n                                author: (author: string) =>\n                                  author.toLowerCase().replace(/\\s/g, '-'),\n                              },\n                            },\n                            Albums: 'music',\n                            Contacts: 'people',\n                            NewsFeed: 'feed',\n                            Dialog: 'dialog',\n                          },\n                        };\n\n                        return acc;\n                      },\n                      {\n                        Home: '',\n                        NotFound: '*',\n                      }\n                    ),\n                  },\n                },\n              },\n            }}\n            fallback={<ActivityIndicator />}\n            documentTitle={{\n              formatter: (options, route) =>\n                `${options?.title ?? route?.name} - ineffectua`,\n            }}\n          >\n            <Drawer.Navigator drawerType={isLargeScreen ? 'permanent' : undefined}>\n              <Drawer.Screen\n                name=\"Root\"\n                options={{\n                  title: 'Examples'\n                }}\n              >\n                {({ navigation }: DrawerScreenProps<RootDrawerParamList>) => (\n                  <Stack.Navigator\n                    screenOptions={{\n                      headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n                    }}\n                  >\n                    <Stack.Screen\n                      name=\"Home\"\n                      options={{\n                        title: 'Examples',\n                        headerLeft: isLargeScreen\n                          ? undefined\n                          : () => (\n                              <ScrollView>\n                                <Appbar.Action\n                                  color={theme.colors.text}\n                                  icon=\"menu\"\n                                  onPress={() => navigation.toggleDrawer()}\n                                />\n                                {navigationRef.current ? (\n                                  <Profile {...navigationRef.current} />\n                                ) : null}\n                              </ScrollView>\n                            ),\n                      }}\n                    >\n                      {({ navigation }: StackScreenProps<RootStackParamList>) => (\n                        <ScrollView\n                          style={{ backgroundColor: theme.colors.background }}\n                        >\n                          <SettingsItem\n                            label=\"Dark theme\"\n                            value={theme.dark}\n                            onValueChange={() => {\n                              AsyncStorage.setItem(\n                                THEME_PERSISTENCE_KEY,\n                                theme.dark ? 'light' : 'dark'\n                              );\n\n                              setTheme((t) => (t.dark ? DefaultTheme : DarkTheme));\n                            }}\n                          />\n                          <Divider />\n                          {(Object.keys(SCREENS) as (keyof typeof SCREENS)[]).map(\n                            (name) => (\n                              <List.Item\n                                key={name}\n                                testID={name}\n                                title={SCREENS[name].title}\n                                onPress={() => navigation.navigate(name)}\n                              />\n                            )\n                          )}\n                        </ScrollView>\n                      )}\n                    </Stack.Screen>\n                    <Stack.Screen\n                      name=\"NotFound\"\n                      component={NotFound}\n                      options={{ title: 'Oops!' }}\n                    />\n                    {(Object.keys(SCREENS) as (keyof typeof SCREENS)[]).map(\n                      (name) => (\n                        <Stack.Screen\n                          key={name}\n                          name={name}\n                          getComponent={() => SCREENS[name].component}\n                          options={{ title: SCREENS[name].title }}\n                        />\n                      )\n                    )}\n                  </Stack.Navigator>\n                )}\n              </Drawer.Screen>\n            </Drawer.Navigator>\n          </NavigationContainer>\n        </AuthContext.Provider>\n      </PaperProvider>\n    </ReduxProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}