{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _DrawerRouter = _interopRequireDefault(require(\"../routers/DrawerRouter\"));\n\nvar _DrawerView = _interopRequireDefault(require(\"../views/DrawerView\"));\n\nvar _DrawerNavigatorItems = _interopRequireDefault(require(\"../views/DrawerNavigatorItems\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultContentComponent = function defaultContentComponent(props) {\n  return React.createElement(_reactNative.ScrollView, {\n    alwaysBounceVertical: false\n  }, React.createElement(_reactNavigation.SafeAreaView, {\n    forceInset: {\n      top: 'always',\n      horizontal: 'never'\n    }\n  }, React.createElement(_DrawerNavigatorItems.default, props)));\n};\n\nvar DefaultDrawerConfig = {\n  drawerWidth: function drawerWidth() {\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n        height = _Dimensions$get.height,\n        width = _Dimensions$get.width;\n\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: _reactNavigation.ThemeColors.light.bodyContent,\n    dark: _reactNavigation.ThemeColors.dark.bodyContent\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)'\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n};\n\nvar DrawerNavigator = function DrawerNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var mergedConfig = _objectSpread({}, DefaultDrawerConfig, {}, config);\n\n  var drawerRouter = (0, _DrawerRouter.default)(routeConfigs, mergedConfig);\n  var navigator = (0, _reactNavigation.createNavigator)(_DrawerView.default, drawerRouter, mergedConfig);\n  return navigator;\n};\n\nvar _default = DrawerNavigator;\nexports.default = _default;","map":{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","width","Dimensions","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","contentComponent","drawerPosition","I18nManager","keyboardDismissMode","drawerBackgroundColor","light","ThemeColors","dark","bodyContent","overlayColor","drawerType","hideStatusBar","statusBarAnimation","DrawerNavigator","config","mergedConfig","drawerRouter","DrawerRouter","navigator","createNavigator"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAQA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,uBAAuB,GAAIC,SAA3BD,uBAA2BC,CAAAA,KAAD;AAAA,SAC9B,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA;AAAY,IAAA,oBAAoB,EAAE;AAAlC,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,6BAAA,EAAA;AAAc,IAAA,UAAU,EAAE;AAAEC,MAAAA,GAAG,EAAL,QAAA;AAAiBC,MAAAA,UAAU,EAAE;AAA7B;AAA1B,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,6BAAA,EAHN,KAGM,CADF,CADF,CAD8B;AAAA,CAAhC;;AAQA,IAAMC,mBAA2C,GAAG;AAClDC,EAAAA,WAAW,EAAE,uBAAM;AAAA,0BAMSE,wBAAAA,GAAAA,CAA1B,QAA0BA,CANT;AAAA,QAMX,MANW,mBAMX,MANW;AAAA,QAMDD,KANC,mBAMDA,KANC;;AAOjB,QAAME,eAAe,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAxB,KAAwBA,CAAxB;AACA,QAAMC,WAAW,GAAGJ,KAAK,GAAzB,MAAA;AACA,QAAMK,QAAQ,GAAGH,eAAe,IAAhC,GAAA;AACA,QAAMI,YAAY,GAAGC,sBAAAA,EAAAA,KAAAA,KAAAA,GAAyBH,WAAW,GAAA,EAAA,GAApCG,EAAAA,GAArB,EAAA;AACA,QAAMC,QAAQ,GAAGH,QAAQ,GAAA,GAAA,GAAzB,GAAA;AAEA,WAAOF,IAAI,CAAJA,GAAAA,CAASD,eAAe,GAAxBC,YAAAA,EAAP,QAAOA,CAAP;AAdgD,GAAA;AAgBlDM,EAAAA,gBAAgB,EAhBkC,uBAAA;AAiBlDC,EAAAA,cAAc,EAAEC,yBAAAA,KAAAA,GAAAA,OAAAA,GAjBkC,MAAA;AAkBlDC,EAAAA,mBAAmB,EAlB+B,SAAA;AAmBlDC,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,KAAK,EAAEC,6BAAAA,KAAAA,CADc,WAAA;AAErBC,IAAAA,IAAI,EAAED,6BAAAA,IAAAA,CAAiBE;AAFF,GAnB2B;AAuBlDC,EAAAA,YAAY,EAAE;AACZJ,IAAAA,KAAK,EADO,oBAAA;AAEZE,IAAAA,IAAI,EAAE;AAFM,GAvBoC;AA2BlDG,EAAAA,UAAU,EA3BwC,OAAA;AA4BlDC,EAAAA,aAAa,EA5BqC,KAAA;AA6BlDC,EAAAA,kBAAkB,EAAE;AA7B8B,CAApD;;AAgCA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,YAAA,EAWnB;AAAA,MANHC,MAMG,uEAXmB,EAWnB;;AACH,MAAMC,YAAY,GAAA,aAAA,CAAA,EAAA,EAAA,mBAAA,EAAA,EAAA,EAAlB,MAAkB,CAAlB;;AACA,MAAMC,YAAY,GAAGC,2BAAY,YAAZA,EAFlB,YAEkBA,CAArB;AAGA,MAAMC,SAAS,GAAGC,sCAAe,mBAAfA,EAAe,YAAfA,EAAlB,YAAkBA,CAAlB;AAKA,SAAA,SAAA;AArBF,CAAA;;eAwBA,e","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, ScrollView, I18nManager } from 'react-native';\nimport {\n  createNavigator,\n  ThemeColors,\n  SafeAreaView,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationRoute,\n} from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\nimport {\n  NavigationDrawerOptions,\n  NavigationDrawerProp,\n  NavigationDrawerConfig,\n  NavigationDrawerRouterConfig,\n  DrawerContentComponentProps,\n} from '../types';\n\nconst defaultContentComponent = (props: DrawerContentComponentProps) => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig: NavigationDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent,\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)',\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n};\n\nconst DrawerNavigator = (\n  routeConfigs: NavigationRouteConfigMap<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationDrawerConfig,\n    NavigationDrawerRouterConfig,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  > = {}\n) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n\n  // TODO: don't have time to fix it right now\n  const navigator = createNavigator(\n    DrawerView as any,\n    drawerRouter,\n    mergedConfig\n  );\n  return navigator;\n};\n\nexport default DrawerNavigator;\n"]},"metadata":{},"sourceType":"script"}