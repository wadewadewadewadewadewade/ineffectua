{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _InternalAnimatedValue = _interopRequireDefault(require(\"../core/InternalAnimatedValue\"));\n\nvar _Animation2 = _interopRequireDefault(require(\"./Animation\"));\n\nvar _SpringConfig = _interopRequireDefault(require(\"../SpringConfig\"));\n\nvar _spring = _interopRequireDefault(require(\"./spring\"));\n\nvar _base = require(\"../base\");\n\nvar _AnimatedClock = _interopRequireDefault(require(\"../core/AnimatedClock\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nvar SpringAnimation = function (_Animation) {\n  (0, _inherits2.default)(SpringAnimation, _Animation);\n\n  var _super = _createSuper(SpringAnimation);\n\n  function SpringAnimation(config) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SpringAnimation);\n    _this = _super.call(this);\n    _this._overshootClamping = withDefault(config.overshootClamping, false);\n    _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);\n    _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    _this._initialVelocity = withDefault(config.velocity, 0);\n    _this._lastVelocity = withDefault(config.velocity, 0);\n    _this._toValue = config.toValue;\n    _this._delay = withDefault(config.delay, 0);\n\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      _this._stiffness = withDefault(config.stiffness, 100);\n      _this._damping = withDefault(config.damping, 10);\n      _this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n\n      var springConfig = _SpringConfig.default.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));\n\n      _this._stiffness = springConfig.stiffness;\n      _this._damping = springConfig.damping;\n      _this._mass = 1;\n    } else {\n      var _springConfig = _SpringConfig.default.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));\n\n      _this._stiffness = _springConfig.stiffness;\n      _this._damping = _springConfig.damping;\n      _this._mass = 1;\n    }\n\n    (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');\n    (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');\n    (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');\n    return _this;\n  }\n\n  (0, _createClass2.default)(SpringAnimation, [{\n    key: \"start\",\n    value: function start(value) {\n      this._clock = new _AnimatedClock.default();\n      var state = {\n        finished: new _InternalAnimatedValue.default(0),\n        velocity: new _InternalAnimatedValue.default(this._initialVelocity),\n        position: value,\n        time: new _InternalAnimatedValue.default(0)\n      };\n      var config = {\n        damping: this._damping,\n        mass: this._mass,\n        stiffness: this._stiffness,\n        toValue: this._toValue,\n        overshootClamping: this._overshootClamping,\n        restSpeedThreshold: this._restSpeedThreshold,\n        restDisplacementThreshold: this._restDisplacementThreshold\n      };\n      return (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(this._clock), 0, [(0, _base.startClock)(this._clock)]), (0, _spring.default)(this._clock, state, config), (0, _base.cond)(state.finished, (0, _base.stopClock)(this._clock))]);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n  }], [{\n    key: \"getDefaultState\",\n    value: function getDefaultState() {\n      return {\n        position: new _InternalAnimatedValue.default(0),\n        finished: new _InternalAnimatedValue.default(0),\n        velocity: new _InternalAnimatedValue.default(0),\n        time: new _InternalAnimatedValue.default(0)\n      };\n    }\n  }]);\n  return SpringAnimation;\n}(_Animation2.default);\n\nexports.default = SpringAnimation;","map":{"version":3,"sources":["SpringAnimation.js"],"names":["value","constructor","withDefault","config","invariant","springConfig","SpringConfig","state","finished","velocity","position","time","damping","mass","stiffness","toValue","overshootClamping","restSpeedThreshold","restDisplacementThreshold","_restDisplacementThreshold","block","cond","clockRunning","startClock","spring","stopClock"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;;;AAEA,SAAA,WAAA,CAAA,KAAA,EAAA,YAAA,EAA0C;AACxC,MAAIA,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAAhC,IAAA,EAA2C;AACzC,WAAA,YAAA;AACD;;AACD,SAAA,KAAA;AACD;;IAEc,e;;;;;AACbC,2BAAW,MAAXA,EAAoB;AAAA;;AAAA;AAClB;AAEA,UAAA,kBAAA,GAA0BC,WAAW,CAACC,MAAM,CAAP,iBAAA,EAArC,KAAqC,CAArC;AACA,UAAA,0BAAA,GAAkCD,WAAW,CAC3CC,MAAM,CADqC,yBAAA,EAA7C,KAA6C,CAA7C;AAIA,UAAA,mBAAA,GAA2BD,WAAW,CAACC,MAAM,CAAP,kBAAA,EAAtC,KAAsC,CAAtC;AACA,UAAA,gBAAA,GAAwBD,WAAW,CAACC,MAAM,CAAP,QAAA,EAAnC,CAAmC,CAAnC;AACA,UAAA,aAAA,GAAqBD,WAAW,CAACC,MAAM,CAAP,QAAA,EAAhC,CAAgC,CAAhC;AACA,UAAA,QAAA,GAAgBA,MAAM,CAAtB,OAAA;AACA,UAAA,MAAA,GAAcD,WAAW,CAACC,MAAM,CAAP,KAAA,EAAzB,CAAyB,CAAzB;;AAEA,QACEA,MAAM,CAANA,SAAAA,KAAAA,SAAAA,IACAA,MAAM,CAANA,OAAAA,KADAA,SAAAA,IAEAA,MAAM,CAANA,IAAAA,KAHF,SAAA,EAIE;AACAC,8BACED,MAAM,CAANA,UAAAA,KAAAA,SAAAA,IACEA,MAAM,CAANA,KAAAA,KADFA,SAAAA,IAEEA,MAAM,CAANA,OAAAA,KAFFA,SAAAA,IAGEA,MAAM,CAANA,QAAAA,KAJK,SAATC,EAAAA,4GAAAA;AAOA,YAAA,UAAA,GAAkBF,WAAW,CAACC,MAAM,CAAP,SAAA,EAA7B,GAA6B,CAA7B;AACA,YAAA,QAAA,GAAgBD,WAAW,CAACC,MAAM,CAAP,OAAA,EAA3B,EAA2B,CAA3B;AACA,YAAA,KAAA,GAAaD,WAAW,CAACC,MAAM,CAAP,IAAA,EAAxB,CAAwB,CAAxB;AAdF,KAAA,MAeO,IAAIA,MAAM,CAANA,UAAAA,KAAAA,SAAAA,IAAmCA,MAAM,CAANA,KAAAA,KAAvC,SAAA,EAAmE;AAGxEC,8BACED,MAAM,CAANA,OAAAA,KAAAA,SAAAA,IACEA,MAAM,CAANA,QAAAA,KADFA,SAAAA,IAEEA,MAAM,CAANA,SAAAA,KAFFA,SAAAA,IAGEA,MAAM,CAANA,OAAAA,KAHFA,SAAAA,IAIEA,MAAM,CAANA,IAAAA,KALK,SAATC,EAAAA,4GAAAA;;AAQA,UAAMC,YAAY,GAAGC,sBAAAA,sBAAAA,CACnBJ,WAAW,CAACC,MAAM,CAAP,UAAA,EADQG,CACR,CADQA,EAEnBJ,WAAW,CAACC,MAAM,CAAP,KAAA,EAFb,EAEa,CAFQG,CAArB;;AAIA,YAAA,UAAA,GAAkBD,YAAY,CAA9B,SAAA;AACA,YAAA,QAAA,GAAgBA,YAAY,CAA5B,OAAA;AACA,YAAA,KAAA,GAAA,CAAA;AAjBK,KAAA,MAkBA;AAGL,UAAMA,aAAY,GAAGC,sBAAAA,6BAAAA,CACnBJ,WAAW,CAACC,MAAM,CAAP,OAAA,EADQG,EACR,CADQA,EAEnBJ,WAAW,CAACC,MAAM,CAAP,QAAA,EAFb,CAEa,CAFQG,CAArB;;AAIA,YAAA,UAAA,GAAkBD,aAAY,CAA9B,SAAA;AACA,YAAA,QAAA,GAAgBA,aAAY,CAA5B,OAAA;AACA,YAAA,KAAA,GAAA,CAAA;AACD;;AAEDD,4BAAU,MAAA,UAAA,GAAD,CAATA,EAAAA,wCAAAA;AACAA,4BAAU,MAAA,QAAA,GAAD,CAATA,EAAAA,sCAAAA;AACAA,4BAAU,MAAA,KAAA,GAAD,CAATA,EAAAA,mCAAAA;AA7DkB;AA8DnB;;;;0BAEI,K,EAAQ;AACX,WAAA,MAAA,GAAc,IAAd,sBAAc,EAAd;AACA,UAAMG,KAAK,GAAG;AACZC,QAAAA,QAAQ,EAAE,IAAA,8BAAA,CADE,CACF,CADE;AAEZC,QAAAA,QAAQ,EAAE,IAAA,8BAAA,CAAkB,KAFhB,gBAEF,CAFE;AAGZC,QAAAA,QAAQ,EAHI,KAAA;AAIZC,QAAAA,IAAI,EAAE,IAAA,8BAAA,CAAA,CAAA;AAJM,OAAd;AAOA,UAAMR,MAAM,GAAG;AACbS,QAAAA,OAAO,EAAE,KADI,QAAA;AAEbC,QAAAA,IAAI,EAAE,KAFO,KAAA;AAGbC,QAAAA,SAAS,EAAE,KAHE,UAAA;AAIbC,QAAAA,OAAO,EAAE,KAJI,QAAA;AAKbC,QAAAA,iBAAiB,EAAE,KALN,kBAAA;AAMbC,QAAAA,kBAAkB,EAAE,KANP,mBAAA;AAObC,QAAAA,yBAAyB,EAAE,KAAKC;AAPnB,OAAf;AAUA,aAAOC,iBAAM,CACXC,gBAAKC,wBAAa,KAAd,MAACA,CAALD,EAAI,CAAJA,EAAmC,CAACE,sBAAW,KADpC,MACyBA,CAAD,CAAnCF,CADW,EAEXG,qBAAO,KAAD,MAANA,EAAM,KAANA,EAFW,MAEXA,CAFW,EAGXH,gBAAKd,KAAK,CAAN,QAAJc,EAAqBI,qBAAU,KAHjC,MAGuBA,CAArBJ,CAHW,CAAND,CAAP;AAKD;;;2BAEM,CAEN;;;sCAEwB;AACvB,aAAO;AACLV,QAAAA,QAAQ,EAAE,IAAA,8BAAA,CADL,CACK,CADL;AAELF,QAAAA,QAAQ,EAAE,IAAA,8BAAA,CAFL,CAEK,CAFL;AAGLC,QAAAA,QAAQ,EAAE,IAAA,8BAAA,CAHL,CAGK,CAHL;AAILE,QAAAA,IAAI,EAAE,IAAA,8BAAA,CAAA,CAAA;AAJD,OAAP;AAMD;;;EAtGY,mB","sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport Animation from './Animation';\nimport SpringConfig from '../SpringConfig';\nimport spring from './spring';\n\nimport { block, clockRunning, startClock, stopClock, cond } from '../base';\nimport Clock from '../core/AnimatedClock';\n\nimport invariant from 'fbjs/lib/invariant';\n\nfunction withDefault(value, defaultValue) {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  return value;\n}\n\nexport default class SpringAnimation extends Animation {\n  constructor(config) {\n    super();\n\n    this._overshootClamping = withDefault(config.overshootClamping, false);\n    this._restDisplacementThreshold = withDefault(\n      config.restDisplacementThreshold,\n      0.001\n    );\n    this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);\n    this._initialVelocity = withDefault(config.velocity, 0);\n    this._lastVelocity = withDefault(config.velocity, 0);\n    this._toValue = config.toValue;\n    this._delay = withDefault(config.delay, 0);\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one'\n      );\n      this._stiffness = withDefault(config.stiffness, 100);\n      this._damping = withDefault(config.damping, 10);\n      this._mass = withDefault(config.mass, 1);\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one'\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        withDefault(config.bounciness, 8),\n        withDefault(config.speed, 12)\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        withDefault(config.tension, 40),\n        withDefault(config.friction, 7)\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  start(value) {\n    this._clock = new Clock();\n    const state = {\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(this._initialVelocity),\n      position: value,\n      time: new AnimatedValue(0),\n    };\n\n    const config = {\n      damping: this._damping,\n      mass: this._mass,\n      stiffness: this._stiffness,\n      toValue: this._toValue,\n      overshootClamping: this._overshootClamping,\n      restSpeedThreshold: this._restSpeedThreshold,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n    };\n\n    return block([\n      cond(clockRunning(this._clock), 0, [startClock(this._clock)]),\n      spring(this._clock, state, config),\n      cond(state.finished, stopClock(this._clock)),\n    ]);\n  }\n\n  stop() {\n    // this._finished && this._finished.setValue(1);\n  }\n\n  static getDefaultState() {\n    return {\n      position: new AnimatedValue(0),\n      finished: new AnimatedValue(0),\n      velocity: new AnimatedValue(0),\n      time: new AnimatedValue(0),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}