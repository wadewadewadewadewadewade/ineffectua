{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SimpleStackScreen;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar AUTH_CONTEXT_ERROR = 'Authentication context not found. Have your wrapped your components with AuthContext.Consumer?';\nvar AuthContext = React.createContext({\n  signIn: function signIn() {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  },\n  signOut: function signOut() {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  }\n});\n\nvar SplashScreen = function SplashScreen() {\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar SignInScreen = function SignInScreen() {\n  var _React$useContext = React.useContext(AuthContext),\n      signIn = _React$useContext.signIn;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.TextInput, {\n    placeholder: \"Username\",\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNative.TextInput, {\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNativePaper.Button, {\n    mode: \"contained\",\n    onPress: signIn,\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Sign in\"));\n};\n\nvar HomeScreen = function HomeScreen() {\n  var _React$useContext2 = React.useContext(AuthContext),\n      signOut = _React$useContext2.signOut;\n\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNativePaper.Title, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Signed in successfully \\uD83C\\uDF89\"), React.createElement(_reactNativePaper.Button, {\n    onPress: signOut,\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Sign out\"));\n};\n\nvar SimpleStack = (0, _stack.createStackNavigator)();\n\nfunction SimpleStackScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useReducer = React.useReducer(function (prevState, action) {\n    switch (action.type) {\n      case 'RESTORE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'SIGN_IN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: false,\n          userToken: action.token\n        });\n\n      case 'SIGN_OUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          isSignout: true,\n          userToken: undefined\n        });\n    }\n  }, {\n    isLoading: true,\n    isSignout: false,\n    userToken: undefined\n  }),\n      _React$useReducer2 = (0, _slicedToArray2.default)(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var timer = setTimeout(function () {\n      dispatch({\n        type: 'RESTORE_TOKEN',\n        token: undefined\n      });\n    }, 1000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, []);\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerShown: false\n    });\n  }, [navigation]);\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn() {\n        return dispatch({\n          type: 'SIGN_IN',\n          token: 'dummy-auth-token'\n        });\n      },\n      signOut: function signOut() {\n        return dispatch({\n          type: 'SIGN_OUT'\n        });\n      }\n    };\n  }, []);\n\n  if (state.isLoading) {\n    return React.createElement(SplashScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, React.createElement(SimpleStack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, state.userToken === undefined ? React.createElement(SimpleStack.Screen, {\n    name: \"SignIn\",\n    options: {\n      title: 'Sign in',\n      animationTypeForReplace: state.isSignout ? 'pop' : 'push'\n    },\n    component: SignInScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }) : React.createElement(SimpleStack.Screen, {\n    name: \"Home\",\n    options: {\n      title: 'Home'\n    },\n    component: HomeScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  })));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)'\n  },\n  button: {\n    margin: 8\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8\n  }\n});","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx"],"names":["AUTH_CONTEXT_ERROR","AuthContext","React","createContext","signIn","Error","signOut","SplashScreen","styles","content","SignInScreen","useContext","colors","input","backgroundColor","card","color","text","button","HomeScreen","SimpleStack","SimpleStackScreen","navigation","useReducer","prevState","action","type","userToken","token","isLoading","isSignout","undefined","state","dispatch","useEffect","timer","setTimeout","clearTimeout","useLayoutEffect","setOptions","headerShown","authContext","useMemo","title","animationTypeForReplace","StyleSheet","create","flex","padding","justifyContent","margin","borderRadius","borderWidth","hairlineWidth","borderColor","textAlign"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, TextInput, ActivityIndicator, StyleSheet } from 'react-native';\nimport { Title, Button } from 'react-native-paper';\nimport { useTheme, ParamListBase } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  HeaderBackButton,\n  StackScreenProps,\n} from '@react-navigation/stack';\n\ntype AuthStackParams = {\n  Splash: undefined;\n  Home: undefined;\n  SignIn: undefined;\n  PostSignOut: undefined;\n};\n\nconst AUTH_CONTEXT_ERROR =\n  'Authentication context not found. Have your wrapped your components with AuthContext.Consumer?';\n\nconst AuthContext = React.createContext<{\n  signIn: () => void;\n  signOut: () => void;\n}>({\n  signIn: () => {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  },\n  signOut: () => {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  },\n});\n\nconst SplashScreen = () => {\n  return (\n    <View style={styles.content}>\n      <ActivityIndicator />\n    </View>\n  );\n};\n\nconst SignInScreen = () => {\n  const { signIn } = React.useContext(AuthContext);\n  const { colors } = useTheme();\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        placeholder=\"Username\"\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        secureTextEntry\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n      />\n      <Button mode=\"contained\" onPress={signIn} style={styles.button}>\n        Sign in\n      </Button>\n    </View>\n  );\n};\n\nconst HomeScreen = () => {\n  const { signOut } = React.useContext(AuthContext);\n\n  return (\n    <View style={styles.content}>\n      <Title style={styles.text}>Signed in successfully 🎉</Title>\n      <Button onPress={signOut} style={styles.button}>\n        Sign out\n      </Button>\n    </View>\n  );\n};\n\nconst SimpleStack = createStackNavigator<AuthStackParams>();\n\ntype State = {\n  isLoading: boolean;\n  isSignout: boolean;\n  userToken: undefined | string;\n};\n\ntype Action =\n  | { type: 'RESTORE_TOKEN'; token: undefined | string }\n  | { type: 'SIGN_IN'; token: string }\n  | { type: 'SIGN_OUT' };\n\nexport default function SimpleStackScreen({\n  navigation,\n}: StackScreenProps<ParamListBase>) {\n  const [state, dispatch] = React.useReducer<React.Reducer<State, Action>>(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: undefined,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: undefined,\n    }\n  );\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch({ type: 'RESTORE_TOKEN', token: undefined });\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n    });\n  }, [navigation]);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: () => dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' }),\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n    }),\n    []\n  );\n\n  if (state.isLoading) {\n    return <SplashScreen />;\n  }\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <SimpleStack.Navigator\n        // take out the back button so as to disable the users ability to bail out of authentication\n        /*screenOptions={{\n          headerLeft: () => (\n            <HeaderBackButton onPress={() => navigation.goBack()} />\n          ),\n        }}*/\n      >\n        {state.userToken === undefined ? (\n          <SimpleStack.Screen\n            name=\"SignIn\"\n            options={{\n              title: 'Sign in',\n              animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n            }}\n            component={SignInScreen}\n          />\n        ) : (\n          <SimpleStack.Screen\n            name=\"Home\"\n            options={{ title: 'Home' }}\n            component={HomeScreen}\n          />\n        )}\n      </SimpleStack.Navigator>\n    </AuthContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center',\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n  },\n  button: {\n    margin: 8,\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}