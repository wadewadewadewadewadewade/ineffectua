{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAdornmentConfig = getAdornmentConfig;\nexports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;\nexports.default = void 0;\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Icon = _interopRequireWildcard(require(\"./Icon\"));\n\nvar _Affix = _interopRequireWildcard(require(\"./Affix\"));\n\nvar _constants = require(\"../constants\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _enums = require(\"./enums\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: _enums.AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: _enums.AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && _react.default.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === _Affix.default) {\n          type = _enums.AdornmentType.Affix;\n        } else if (adornment.type === _Icon.default) {\n          type = _enums.AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nfunction getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref6;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isWeb = _reactNative.Platform.OS !== 'ios' && _reactNative.Platform.OS !== 'android';\n      var isLeftSide = side === _enums.AdornmentSide.Left;\n      var offset = (isLeftSide ? leftAffixWidth : rightAffixWidth) + _constants.ADORNMENT_OFFSET;\n      var paddingKey = \"padding\".concat(captalize(side));\n      if (isWeb) return (0, _defineProperty3.default)({}, paddingKey, offset);\n      var isAffix = type === _enums.AdornmentType.Affix;\n      var marginKey = \"margin\".concat(captalize(side));\n      return _ref6 = {}, (0, _defineProperty3.default)(_ref6, marginKey, isAffix ? 0 : offset), (0, _defineProperty3.default)(_ref6, paddingKey, isAffix ? offset : inputOffset), _ref6;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref7) {\n  var adornmentConfig = _ref7.adornmentConfig,\n      left = _ref7.left,\n      right = _ref7.right,\n      onAffixChange = _ref7.onAffixChange,\n      textStyle = _ref7.textStyle,\n      visible = _ref7.visible,\n      topPosition = _ref7.topPosition,\n      isTextInputFocused = _ref7.isTextInputFocused,\n      forceFocus = _ref7.forceFocus;\n\n  if (adornmentConfig.length) {\n    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref8) {\n      var type = _ref8.type,\n          side = _ref8.side;\n      var inputAdornmentComponent;\n\n      if (side === _enums.AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === _enums.AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: \"\".concat(side, \"-\").concat(type, \"-adornment\"),\n        isTextInputFocused: isTextInputFocused\n      };\n\n      if (type === _enums.AdornmentType.Icon) {\n        return _react.default.createElement(_Icon.IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[_enums.AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === _enums.AdornmentType.Affix) {\n        return _react.default.createElement(_Affix.AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[_enums.AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar _default = TextInputAdornment;\nexports.default = _default;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","adornmentStyleAdjustmentForNativeInput","isWeb","Platform","isLeftSide","offset","paddingKey","captalize","isAffix","marginKey","allStyleAdjustmentsMerged","text","TextInputAdornment","forceFocus","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","topPosition","onAffixChange","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  Platform,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n        const isLeftSide = side === AdornmentSide.Left;\n        const offset =\n          (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n\n        if (isWeb) return { [paddingKey]: offset };\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"script"}