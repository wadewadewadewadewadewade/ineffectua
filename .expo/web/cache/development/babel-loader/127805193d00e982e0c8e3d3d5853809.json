{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SimpleStackScreen;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _AuthContext = _interopRequireWildcard(require(\"../shared/AuthContext\"));\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx\";\n\nvar SplashScreen = function SplashScreen() {\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.ActivityIndicator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar SignInScreen = function SignInScreen() {\n  var _React$useContext = React.useContext(_AuthContext.default),\n      signIn = _React$useContext.signIn;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('Email'),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      email = _React$useState2[0],\n      onChangeEmail = _React$useState2[1];\n\n  var _React$useState3 = React.useState('Password'),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      password = _React$useState4[0],\n      onChangePassword = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      error = _React$useState6[0],\n      onChangeError = _React$useState6[1];\n\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.TextInput, {\n    placeholder: \"Email\",\n    autoCompleteType: \"email\",\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    onChangeText: onChangeEmail,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNative.TextInput, {\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    onChangeText: onChangePassword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), error !== undefined ? React.createElement(_reactNative.Text, {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 31\n    }\n  }, error) : null, React.createElement(_reactNativePaper.Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      signIn(email, password).then(function (errorMessage) {\n        if (errorMessage && errorMessage.length > 0) {\n          onChangeError(errorMessage);\n        }\n      });\n    },\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Sign in\"));\n};\n\nvar AuthenticationSuccessScreen = function AuthenticationSuccessScreen() {\n  var _React$useContext2 = React.useContext(_AuthContext.default),\n      signOut = _React$useContext2.signOut;\n\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNativePaper.Title, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Signed in successfully \\uD83C\\uDF89\"), React.createElement(_reactNativePaper.Button, {\n    onPress: signOut,\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Sign out\"));\n};\n\nvar SimpleStack = (0, _stack.createStackNavigator)();\n\nfunction SimpleStackScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  React.useEffect(function () {\n    (0, _AuthContext.dispatch)({\n      type: 'RESTORE_TOKEN',\n      token: _AuthContext.state.userToken\n    });\n  }, []);\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerShown: false\n    });\n  }, [navigation]);\n\n  if (_AuthContext.state.userToken !== null) {\n    navigation.popToTop();\n  }\n\n  if (_AuthContext.state.isLoading) {\n    return React.createElement(SplashScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(SimpleStack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, _AuthContext.state.userToken === null ? React.createElement(SimpleStack.Screen, {\n    name: \"SignIn\",\n    options: {\n      title: 'Sign in',\n      animationTypeForReplace: _AuthContext.state.isSignout ? 'pop' : 'push',\n      headerShown: false\n    },\n    component: SignInScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }) : React.createElement(SimpleStack.Screen, {\n    name: \"Success\",\n    options: {\n      title: 'Authentication Success'\n    },\n    component: AuthenticationSuccessScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)'\n  },\n  button: {\n    margin: 8\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8\n  }\n});","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx"],"names":["SplashScreen","styles","content","SignInScreen","React","useContext","AuthContext","signIn","colors","useState","email","onChangeEmail","password","onChangePassword","error","onChangeError","input","backgroundColor","card","color","text","undefined","then","errorMessage","length","button","AuthenticationSuccessScreen","signOut","SimpleStack","SimpleStackScreen","navigation","route","useEffect","type","token","state","userToken","useLayoutEffect","setOptions","headerShown","popToTop","isLoading","title","animationTypeForReplace","isSignout","StyleSheet","create","flex","padding","justifyContent","margin","borderRadius","borderWidth","hairlineWidth","borderColor","textAlign"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, TextInput, ActivityIndicator, StyleSheet, Text } from 'react-native';\nimport { Title, Button } from 'react-native-paper';\nimport { useTheme, ParamListBase } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  StackScreenProps,\n} from '@react-navigation/stack';\nimport AuthContext, { dispatch, state } from '../shared/AuthContext'\n\ntype AuthStackParams = {\n  SignIn: undefined;\n  Success: undefined;\n};\n\nconst SplashScreen = () => {\n  return (\n    <View style={styles.content}>\n      <ActivityIndicator />\n    </View>\n  );\n};\n\nconst SignInScreen = () => {\n  const { signIn } = React.useContext(AuthContext);\n  const { colors } = useTheme();\n  const [email, onChangeEmail] = React.useState('Email');\n  const [password, onChangePassword] = React.useState('Password');\n  const [error, onChangeError] = React.useState('');\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        placeholder=\"Email\"\n        autoCompleteType=\"email\"\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n        onChangeText={onChangeEmail}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        secureTextEntry\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n        onChangeText={onChangePassword}\n      />\n      {error !== undefined ? (<Text style={{color: 'red'}}>{error}</Text>) : null}\n      <Button mode=\"contained\" onPress={() => {\n        signIn(email, password).then((errorMessage) => {\n          if (errorMessage && errorMessage.length > 0) {\n            onChangeError(errorMessage)\n          }\n        })\n      }} style={styles.button}>\n        Sign in\n      </Button>\n    </View>\n  );\n};\n\nconst AuthenticationSuccessScreen = () => {\n  const { signOut } = React.useContext(AuthContext);\n  \n  return (\n    <View style={styles.content}>\n      <Title style={styles.text}>Signed in successfully 🎉</Title>\n      <Button onPress={signOut} style={styles.button}>\n        Sign out\n      </Button>\n    </View>\n  );\n};\n\nconst SimpleStack = createStackNavigator<AuthStackParams>();\n\nexport default function SimpleStackScreen({\n  navigation, route\n}: StackScreenProps<ParamListBase>) {\n\n  React.useEffect(() => {\n    dispatch({ type: 'RESTORE_TOKEN', token: state.userToken });\n  }, []);\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n    });\n  }, [navigation]);\n\n  if (state.userToken !== null) {\n    navigation.popToTop()\n  }\n\n  if (state.isLoading) {\n    return <SplashScreen />;\n  }\n\n  return (\n    <SimpleStack.Navigator>\n      {state.userToken === null ? (\n        <SimpleStack.Screen\n          name=\"SignIn\"\n          options={{\n            title: 'Sign in',\n            animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n            headerShown: false\n          }}\n          component={SignInScreen}\n        />\n      ) : (\n        <SimpleStack.Screen\n          name=\"Success\"\n          options={{ title: 'Authentication Success' }}\n          component={AuthenticationSuccessScreen}\n        />\n      )}\n    </SimpleStack.Navigator>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center',\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n  },\n  button: {\n    margin: 8,\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}