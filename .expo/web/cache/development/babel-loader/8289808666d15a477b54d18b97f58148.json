{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = App;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _devtools = require(\"@react-navigation/devtools\");\n\nvar _AsyncStorage = _interopRequireDefault(require(\"./AsyncStorage\"));\n\nvar _LinkingPrefixes = _interopRequireDefault(require(\"./LinkingPrefixes\"));\n\nvar _SimpleStack = _interopRequireDefault(require(\"./screens/SimpleStack\"));\n\nvar _ModalPresentationStack = _interopRequireDefault(require(\"./screens/ModalPresentationStack\"));\n\nvar _StackTransparent = _interopRequireDefault(require(\"./screens/StackTransparent\"));\n\nvar _StackHeaderCustomization = _interopRequireDefault(require(\"./screens/StackHeaderCustomization\"));\n\nvar _MaterialBottomTabs = _interopRequireDefault(require(\"./screens/MaterialBottomTabs\"));\n\nvar _NotFound = _interopRequireDefault(require(\"./screens/NotFound\"));\n\nvar _MasterDetail = _interopRequireDefault(require(\"./screens/MasterDetail\"));\n\nvar _AuthFlow = _interopRequireDefault(require(\"./screens/AuthFlow\"));\n\nvar _LinkComponent = _interopRequireDefault(require(\"./screens/LinkComponent\"));\n\nvar _AuthContext = _interopRequireDefault(require(\"./shared/AuthContext\"));\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar Analytics = _interopRequireWildcard(require(\"expo-firebase-analytics\"));\n\nvar _Profile = _interopRequireDefault(require(\"./screens/Profile\"));\n\nvar _Types = require(\"../Types\");\n\nvar _jsxFileName = \"/home/wade/projects/ineffectua/src/components/App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAc7X0OaRKdN50CMAVQDu-EPrUBXhP58n4\",\n  authDomain: \"ineffectua.firebaseapp.com\",\n  databaseURL: \"https://ineffectua.firebaseio.com\",\n  projectId: \"ineffectua\",\n  storageBucket: \"ineffectua.appspot.com\",\n  messagingSenderId: \"sender-id\",\n  appId: \"1:616783557128:android:c473fc0abeb11b16\",\n  measurementId: \"G-153557660\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n_reactNative.YellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);\n\n(0, _reactNativeScreens.enableScreens)();\nvar SCREENS = {\n  SimpleStack: {\n    title: 'Simple Stack',\n    component: _SimpleStack.default\n  },\n  ModalPresentationStack: {\n    title: 'Modal Presentation Stack',\n    component: _ModalPresentationStack.default\n  },\n  StackTransparent: {\n    title: 'Transparent Stack',\n    component: _StackTransparent.default\n  },\n  StackHeaderCustomization: {\n    title: 'Header Customization in Stack',\n    component: _StackHeaderCustomization.default\n  },\n  MaterialBottomTabs: {\n    title: 'Material Bottom Tabs',\n    component: _MaterialBottomTabs.default\n  },\n  MasterDetail: {\n    title: 'Master Detail',\n    component: _MasterDetail.default\n  },\n  AuthFlow: {\n    title: 'Auth Flow',\n    component: _AuthFlow.default\n  },\n  LinkComponent: {\n    title: '<Link />',\n    component: _LinkComponent.default\n  }\n};\nvar Drawer = (0, _drawer.createDrawerNavigator)();\nvar Stack = (0, _stack.createStackNavigator)();\n\nfunction App() {\n  var _this = this;\n\n  var _React$useState = React.useState(_native.DefaultTheme),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  var _React$useState3 = React.useState(_reactNative.Platform.OS === 'web'),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      isReady = _React$useState4[0],\n      setIsReady = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      initialState = _React$useState6[0],\n      setInitialState = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),\n      user = _React$useState8[0],\n      setUser = _React$useState8[1];\n\n  function getHeaderTitle(route) {\n    var _getFocusedRouteNameF;\n\n    var routeName = typeof route === 'string' ? route : route !== undefined && typeof route !== 'string' ? (_getFocusedRouteNameF = (0, _native.getFocusedRouteNameFromRoute)(route)) != null ? _getFocusedRouteNameF : 'Feed' : 'Feed';\n\n    switch (routeName) {\n      case 'Agenda' || 'Feed':\n        return 'Agenda';\n\n      case 'CalendarEntry' || 'Calendar':\n        return 'Calendar';\n\n      case 'PainLogEntry' || 'PainLog':\n        return 'Pain Log';\n\n      case 'Profile':\n        return 'My Profile';\n\n      case 'Contacts':\n        return 'Contacts';\n\n      case 'Account':\n        return 'My Account';\n    }\n  }\n\n  React.useEffect(function () {\n    return firebase.auth().onAuthStateChanged(function (userState) {\n      if (userState === null) {\n        var _navigationRef$curren;\n\n        (_navigationRef$curren = navigationRef.current) == null ? void 0 : _navigationRef$curren.navigate('AuthFlow');\n      } else {\n        setUser(userState);\n      }\n    });\n  }, []);\n  var previousRouteName = 'Feed';\n  React.useEffect(function () {\n    var restoreState = function restoreState() {\n      var initialUrl, savedState, state, themeName;\n      return _regenerator.default.async(function restoreState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());\n\n            case 3:\n              initialUrl = _context.sent;\n\n              if (!(_reactNative.Platform.OS !== 'web' || initialUrl === null)) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return _regenerator.default.awrap(_AsyncStorage.default.getItem(_Types.NAVIGATION_PERSISTENCE_KEY));\n\n            case 7:\n              savedState = _context.sent;\n              state = savedState ? JSON.parse(savedState) : undefined;\n\n              if (state !== undefined) {\n                previousRouteName = getHeaderTitle(state);\n                setInitialState(state);\n              }\n\n            case 10:\n              _context.prev = 10;\n              _context.prev = 11;\n              _context.next = 14;\n              return _regenerator.default.awrap(_AsyncStorage.default.getItem(_Types.THEME_PERSISTENCE_KEY));\n\n            case 14:\n              themeName = _context.sent;\n              setTheme(themeName === 'dark' ? _native.DarkTheme : _native.DefaultTheme);\n              _context.next = 20;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](11);\n\n            case 20:\n              setIsReady(true);\n              return _context.finish(10);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0,, 10, 22], [11, 18]], Promise);\n    };\n\n    restoreState();\n  }, []);\n  var paperTheme = React.useMemo(function () {\n    var t = theme.dark ? _reactNativePaper.DarkTheme : _reactNativePaper.DefaultTheme;\n    return _objectSpread(_objectSpread({}, t), {}, {\n      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), theme.colors), {}, {\n        surface: theme.colors.card,\n        accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)'\n      })\n    });\n  }, [theme.colors, theme.dark]);\n\n  var _React$useState9 = React.useState(_reactNative.Dimensions.get('window')),\n      _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),\n      dimensions = _React$useState10[0],\n      setDimensions = _React$useState10[1];\n\n  React.useEffect(function () {\n    var onDimensionsChange = function onDimensionsChange(_ref) {\n      var window = _ref.window;\n      setDimensions(window);\n    };\n\n    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);\n    };\n  }, []);\n  var navigationRef = React.useRef(null);\n  (0, _devtools.useReduxDevToolsExtension)(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  var isLargeScreen = dimensions.width >= 1024;\n  return React.createElement(_reactNativePaper.Provider, {\n    theme: paperTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, _reactNative.Platform.OS === 'ios' && React.createElement(_reactNative.StatusBar, {\n    barStyle: theme.dark ? 'light-content' : 'dark-content',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }), React.createElement(_AuthContext.default.Provider, {\n    value: {\n      user: user,\n      signIn: function signIn() {\n        return new Promise(function (r) {\n          var _navigationRef$curren2;\n\n          return r((_navigationRef$curren2 = navigationRef.current) == null ? void 0 : _navigationRef$curren2.navigate('AuthFlow'));\n        });\n      },\n      signOut: function signOut() {\n        return firebase.auth().signOut();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, React.createElement(_native.NavigationContainer, {\n    ref: navigationRef,\n    initialState: initialState,\n    onStateChange: function onStateChange(state) {\n      var _navigationRef$curren3;\n\n      var currentRoute = (_navigationRef$curren3 = navigationRef.current) == null ? void 0 : _navigationRef$curren3.getCurrentRoute();\n      var currentRouteName = previousRouteName;\n\n      if (currentRoute !== undefined) {\n        currentRouteName = getHeaderTitle(currentRoute.name);\n      }\n\n      _AsyncStorage.default.setItem(_Types.NAVIGATION_PERSISTENCE_KEY, JSON.stringify(state));\n\n      if (previousRouteName !== currentRouteName) {\n        Analytics.setCurrentScreen(currentRouteName);\n      }\n\n      if (currentRouteName) {\n        previousRouteName = currentRouteName;\n      }\n    },\n    theme: theme,\n    linking: {\n      prefixes: _LinkingPrefixes.default,\n      config: {\n        screens: {\n          Root: {\n            path: '',\n            initialRouteName: 'Home',\n            screens: Object.keys(SCREENS).reduce(function (acc, name) {\n              var path = name.replace(/([A-Z]+)/g, '-$1').replace(/^-/, '').toLowerCase();\n              acc[name] = {\n                path: path,\n                screens: {\n                  Calendar: 'calendar/:id?',\n                  CalendarEntry: 'calendar/:id?',\n                  PainLog: 'pain-log/',\n                  PainLogEntry: 'pain-log/:id',\n                  Contacts: 'people',\n                  Agenda: 'agenda',\n                  Dialog: 'dialog'\n                }\n              };\n              return acc;\n            }, {\n              Home: '',\n              NotFound: '*'\n            })\n          }\n        }\n      }\n    },\n    fallback: React.createElement(_reactNativePaper.ActivityIndicator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 23\n      }\n    }),\n    documentTitle: {\n      formatter: function formatter(options, route) {\n        var _options$title;\n\n        return ((_options$title = options == null ? void 0 : options.title) != null ? _options$title : getHeaderTitle(route == null ? void 0 : route.name)) + \" - ineffectua\";\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, React.createElement(Drawer.Navigator, {\n    drawerType: isLargeScreen ? 'permanent' : undefined,\n    drawerContent: function drawerContent(props) {\n      return (0, _Profile.default)(props, user, theme, setTheme);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Root\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, function (_ref2) {\n    var navigation = _ref2.navigation;\n    return React.createElement(Stack.Navigator, {\n      screenOptions: {\n        headerStyleInterpolator: _stack.HeaderStyleInterpolators.forUIKit\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 19\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Home\",\n      options: function options(_ref3) {\n        var route = _ref3.route;\n        return {\n          headerTitle: getHeaderTitle(route),\n          headerLeft: isLargeScreen ? undefined : function () {\n            return React.createElement(_reactNativePaper.Appbar.Action, {\n              color: theme.colors.text,\n              icon: \"menu\",\n              onPress: function onPress() {\n                return navigation.toggleDrawer();\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 31\n              }\n            });\n          }\n        };\n      },\n      component: user !== null ? _MaterialBottomTabs.default : _AuthFlow.default,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"NotFound\",\n      component: _NotFound.default,\n      options: {\n        title: 'Oops!'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 21\n      }\n    }), Object.keys(SCREENS).map(function (name) {\n      return React.createElement(Stack.Screen, {\n        key: name,\n        name: name,\n        getComponent: function getComponent() {\n          return SCREENS[name].component;\n        },\n        options: {\n          title: SCREENS[name].title\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 25\n        }\n      });\n    }));\n  })))));\n}","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/App.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","YellowBox","ignoreWarnings","SCREENS","SimpleStack","title","component","ModalPresentationStack","StackTransparent","StackHeaderCustomization","MaterialBottomTabs","MasterDetail","AuthFlow","LinkComponent","Drawer","Stack","App","React","useState","DefaultTheme","theme","setTheme","Platform","OS","isReady","setIsReady","initialState","setInitialState","user","setUser","getHeaderTitle","route","routeName","undefined","useEffect","auth","onAuthStateChanged","userState","navigationRef","current","navigate","previousRouteName","restoreState","Linking","getInitialURL","initialUrl","AsyncStorage","getItem","NAVIGATION_PERSISTENCE_KEY","savedState","state","JSON","parse","THEME_PERSISTENCE_KEY","themeName","DarkTheme","paperTheme","useMemo","t","dark","PaperDarkTheme","PaperLightTheme","colors","surface","card","accent","Dimensions","get","dimensions","setDimensions","onDimensionsChange","window","addEventListener","removeEventListener","useRef","isLargeScreen","width","signIn","Promise","r","signOut","currentRoute","getCurrentRoute","currentRouteName","name","setItem","stringify","Analytics","setCurrentScreen","prefixes","LinkingPrefixes","config","screens","Root","path","initialRouteName","Object","keys","reduce","acc","replace","toLowerCase","Calendar","CalendarEntry","PainLog","PainLogEntry","Contacts","Agenda","Dialog","Home","NotFound","formatter","options","props","navigation","headerStyleInterpolator","HeaderStyleInterpolators","forUIKit","headerTitle","headerLeft","text","toggleDrawer","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { createStore } from 'redux';\nimport {\n  YellowBox,\n  Platform,\n  StatusBar,\n  Dimensions,\n  ScaledSize,\n  Linking,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { enableScreens } from 'react-native-screens';\nimport {\n  Provider as PaperProvider,\n  DefaultTheme as PaperLightTheme,\n  DarkTheme as PaperDarkTheme,\n  Appbar,\n  ActivityIndicator,\n} from 'react-native-paper';\nimport {\n  InitialState,\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n  PathConfigMap,\n  NavigationContainerRef,\n  getFocusedRouteNameFromRoute,\n  RouteProp\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n} from '@react-navigation/drawer';\nimport {\n  createStackNavigator,\n  HeaderStyleInterpolators,\n} from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\n// use this to restart the app for things like changing RTL to LTR\n//import { restartApp } from './Restart';\nimport AsyncStorage from './AsyncStorage';\nimport LinkingPrefixes from './LinkingPrefixes';\nimport SimpleStack from './screens/SimpleStack';\nimport ModalPresentationStack from './screens/ModalPresentationStack';\nimport StackTransparent from './screens/StackTransparent';\nimport StackHeaderCustomization from './screens/StackHeaderCustomization';\nimport MaterialBottomTabs from './screens/MaterialBottomTabs';\nimport NotFound from './screens/NotFound';\nimport MasterDetail from './screens/MasterDetail';\nimport AuthFlow from './screens/AuthFlow';\nimport LinkComponent from './screens/LinkComponent';\n\nimport AuthContext from './shared/AuthContext'\n\nimport * as firebase from 'firebase';\nimport * as Analytics from 'expo-firebase-analytics';\nimport Profile from './screens/Profile';\n\nimport { THEME_PERSISTENCE_KEY, NAVIGATION_PERSISTENCE_KEY } from '../Types';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAc7X0OaRKdN50CMAVQDu-EPrUBXhP58n4\",\n  authDomain: \"ineffectua.firebaseapp.com\",\n  databaseURL: \"https://ineffectua.firebaseio.com\",\n  projectId: \"ineffectua\",\n  storageBucket: \"ineffectua.appspot.com\",\n  messagingSenderId: \"sender-id\",\n  appId: \"1:616783557128:android:c473fc0abeb11b16\",\n  measurementId: \"G-153557660\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n//const store = createStore(reducer, middleware);\n\nYellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);\n\nenableScreens();\n\ntype RootDrawerParamList = {\n  Root: undefined;\n  Another: undefined;\n};\n\ntype RootStackParamList = {\n  Home: undefined;\n  NotFound: undefined;\n} & {\n  [P in keyof typeof SCREENS]: undefined;\n};\n\nconst SCREENS = {\n  SimpleStack: { title: 'Simple Stack', component: SimpleStack },\n  ModalPresentationStack: {\n    title: 'Modal Presentation Stack',\n    component: ModalPresentationStack,\n  },\n  StackTransparent: {\n    title: 'Transparent Stack',\n    component: StackTransparent,\n  },\n  StackHeaderCustomization: {\n    title: 'Header Customization in Stack',\n    component: StackHeaderCustomization,\n  },\n  MaterialBottomTabs: {\n    title: 'Material Bottom Tabs',\n    component: MaterialBottomTabs,\n  },\n  MasterDetail: {\n    title: 'Master Detail',\n    component: MasterDetail,\n  },\n  AuthFlow: {\n    title: 'Auth Flow',\n    component: AuthFlow,\n  },\n  LinkComponent: {\n    title: '<Link />',\n    component: LinkComponent,\n  },\n};\n\nconst Drawer = createDrawerNavigator<RootDrawerParamList>();\nconst Stack = createStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  const [theme, setTheme] = React.useState(DefaultTheme);\n\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState<\n    InitialState | undefined\n  >();\n\n  //detect auth status so we can redirect accordingly\n  const [user, setUser] = React.useState<firebase.User | null>(null);\n\n  function getHeaderTitle(route: RouteProp<RootStackParamList, \"Home\"> | string | undefined) {\n    // If the focused route is not found, we need to assume it's the initial screen\n    // This can happen during if there hasn't been any navigation inside the screen\n    // In our case, it's \"Feed\" as that's the first screen inside the navigator\n    let routeName = typeof route === 'string' ? route : route !== undefined && typeof route !== 'string' ? getFocusedRouteNameFromRoute(route) ?? 'Feed' : 'Feed';\n\n    switch (routeName) {\n      case 'Agenda' || 'Feed':\n        return 'Agenda';\n      case 'CalendarEntry' || 'Calendar':\n        return 'Calendar';\n      case 'PainLogEntry' || 'PainLog':\n        return 'Pain Log';\n      case 'Profile':\n        return 'My Profile';\n      case 'Contacts':\n        return 'Contacts';\n      case 'Account':\n        return 'My Account';\n    }\n  }\n\n  React.useEffect(() => {\n    return firebase.auth().onAuthStateChanged(userState => {\n        if (userState === null) {\n          // user is not authenticated, so navigate\n          navigationRef.current?.navigate('AuthFlow');\n        } else {\n          setUser(userState);\n        }\n      });\n  }, []);\n\n  let previousRouteName = 'Feed';\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' || initialUrl === null) {\n          const savedState = await AsyncStorage.getItem(\n            NAVIGATION_PERSISTENCE_KEY\n          );\n\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            previousRouteName = getHeaderTitle(state) as string;\n            setInitialState(state);\n          }\n        }\n      } finally {\n        try {\n          const themeName = await AsyncStorage.getItem(THEME_PERSISTENCE_KEY);\n\n          setTheme(themeName === 'dark' ? DarkTheme : DefaultTheme);\n        } catch (e) {\n          // Ignore\n        }\n\n        setIsReady(true);\n      }\n    };\n\n    restoreState();\n  }, []);\n\n  const paperTheme = React.useMemo(() => {\n    const t = theme.dark ? PaperDarkTheme : PaperLightTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...theme.colors,\n        surface: theme.colors.card,\n        accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)',\n      },\n    };\n  }, [theme.colors, theme.dark]);\n\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const navigationRef = React.useRef<NavigationContainerRef>(null);\n\n  useReduxDevToolsExtension(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  const isLargeScreen = dimensions.width >= 1024;\n\n  return (\n    //<ReduxProvider store={store}>\n      <PaperProvider theme={paperTheme}>\n        {Platform.OS === 'ios' && (\n          <StatusBar barStyle={theme.dark ? 'light-content' : 'dark-content'} />\n        )}\n        <AuthContext.Provider \n          value={{ \n              user: user, \n              signIn: () => new Promise((r) => r(navigationRef.current?.navigate('AuthFlow'))),\n              signOut: () => firebase.auth().signOut(),\n          }}\n        >\n          <NavigationContainer\n            ref={navigationRef}\n            initialState={initialState}\n            onStateChange={(state) => {\n              const currentRoute = navigationRef.current?.getCurrentRoute();\n              let currentRouteName = previousRouteName;\n              if (currentRoute !== undefined) {\n                currentRouteName = getHeaderTitle(currentRoute.name) as string;\n              }\n\n              AsyncStorage.setItem(\n                NAVIGATION_PERSISTENCE_KEY,\n                JSON.stringify(state)\n              )\n\n              if (previousRouteName !== currentRouteName) {\n                // The line below uses the expo-firebase-analytics tracker\n                // https://docs.expo.io/versions/latest/sdk/firebase-analytics/\n                // Change this line to use another Mobile analytics SDK\n                Analytics.setCurrentScreen(currentRouteName);\n              }\n\n              // Save the current route name for later comparision\n              if (currentRouteName) {\n                previousRouteName = currentRouteName;\n              }\n\n            }}\n            theme={theme}\n            linking={{\n              // To test deep linking on, run the following in the Terminal:\n              // Android: adb shell am start -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/simple-stack\"\n              // iOS: xcrun simctl openurl booted exp://127.0.0.1:19000/--/simple-stack\n              // Android (bare): adb shell am start -a android.intent.action.VIEW -d \"rne://127.0.0.1:19000/--/simple-stack\"\n              // iOS (bare): xcrun simctl openurl booted rne://127.0.0.1:19000/--/simple-stack\n              // The first segment of the link is the the scheme + host (returned by `Linking.makeUrl`)\n              prefixes: LinkingPrefixes,\n              config: {\n                screens: {\n                  Root: {\n                    path: '',\n                    initialRouteName: 'Home',\n                    screens: Object.keys(SCREENS).reduce<PathConfigMap>(\n                      (acc, name) => {\n                        // Convert screen names such as SimpleStack to kebab case (simple-stack)\n                        const path = name\n                          .replace(/([A-Z]+)/g, '-$1')\n                          .replace(/^-/, '')\n                          .toLowerCase();\n\n                        acc[name] = {\n                          path,\n                          screens: {\n                            Calendar: 'calendar/:id?',\n                            CalendarEntry: 'calendar/:id?',\n                            PainLog: 'pain-log/',\n                            PainLogEntry: 'pain-log/:id',\n                            Contacts: 'people',\n                            Agenda: 'agenda',\n                            Dialog: 'dialog',\n                          },\n                        };\n\n                        return acc;\n                      },\n                      {\n                        Home: '',\n                        NotFound: '*',\n                      }\n                    ),\n                  },\n                },\n              },\n            }}\n            fallback={<ActivityIndicator />}\n            documentTitle={{\n              formatter: (options, route) =>\n                `${options?.title ?? getHeaderTitle(route?.name)} - ineffectua`,\n            }}\n          >\n            <Drawer.Navigator drawerType={isLargeScreen ? 'permanent' : undefined} drawerContent={(props) => Profile(props, user, theme, setTheme)}>\n              <Drawer.Screen name=\"Root\">\n                {({ navigation }: DrawerScreenProps<RootDrawerParamList>) => (\n                  <Stack.Navigator\n                    screenOptions={{\n                      headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n                    }}\n                  >\n                    <Stack.Screen\n                      name=\"Home\"\n                      options={({ route }) => ({\n                        headerTitle: getHeaderTitle(route),\n                        headerLeft: isLargeScreen\n                          ? undefined\n                          : () => (\n                              <Appbar.Action\n                                color={theme.colors.text}\n                                icon=\"menu\"\n                                onPress={() => navigation.toggleDrawer()}\n                              />\n                            ),\n                      })}\n                      component={user !== null ? MaterialBottomTabs : AuthFlow}\n                    />\n                    <Stack.Screen\n                      name=\"NotFound\"\n                      component={NotFound}\n                      options={{ title: 'Oops!' }}\n                    />\n                    {(Object.keys(SCREENS) as (keyof typeof SCREENS)[]).map(\n                      (name) => (\n                        <Stack.Screen\n                          key={name}\n                          name={name}\n                          getComponent={() => SCREENS[name].component}\n                          options={{ title: SCREENS[name].title }}\n                        />\n                      )\n                    )}\n                  </Stack.Navigator>\n                )}\n              </Drawer.Screen>\n            </Drawer.Navigator>\n          </NavigationContainer>\n        </AuthContext.Provider>\n      </PaperProvider>\n    //</ReduxProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}