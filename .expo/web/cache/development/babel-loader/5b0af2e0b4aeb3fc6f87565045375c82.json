{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar firebase = _interopRequireWildcard(require(\"firebase\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _AuthReducer = require(\"../../reducers/AuthReducer\");\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx\";\n\nvar SignInScreen = function SignInScreen(signIn) {\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('Email'),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      email = _React$useState2[0],\n      onChangeEmail = _React$useState2[1];\n\n  var _React$useState3 = React.useState('Password'),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      password = _React$useState4[0],\n      onChangePassword = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      error = _React$useState6[0],\n      onChangeError = _React$useState6[1];\n\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.TextInput, {\n    placeholder: \"Email\",\n    autoCompleteType: \"email\",\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    onChangeText: onChangeEmail,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), React.createElement(_reactNative.TextInput, {\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    style: [styles.input, {\n      backgroundColor: colors.card,\n      color: colors.text\n    }],\n    onChangeText: onChangePassword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), error !== undefined ? React.createElement(_reactNative.Text, {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 31\n    }\n  }, error) : null, React.createElement(_reactNativePaper.Button, {\n    mode: \"contained\",\n    onPress: function onPress() {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (user) {\n        user.user && signIn(user.user);\n      }).catch(function (e) {\n        return onChangeError(e);\n      });\n    },\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"Sign in\"));\n};\n\nvar AuthenticationSuccessScreen = function AuthenticationSuccessScreen(signOut) {\n  firebase.auth().signOut().then(function () {\n    return signOut;\n  });\n  return React.createElement(_reactNative.View, {\n    style: styles.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNativePaper.Title, {\n    style: styles.text,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Signed in successfully \\uD83C\\uDF89\"), React.createElement(_reactNativePaper.Button, {\n    onPress: signOut,\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Sign out\"));\n};\n\nvar SimpleStack = (0, _stack.createStackNavigator)();\n\nvar SimpleStackScreen = function SimpleStackScreen(props) {\n  var navigation = props.navigation,\n      authenticated = props.authenticated,\n      isSignout = props.isSignout,\n      signIn = props.signIn,\n      signOut = props.signOut;\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerShown: false\n    });\n  }, [navigation]);\n\n  if (authenticated) {\n    navigation.popToTop();\n  }\n\n  return React.createElement(SimpleStack.Navigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, authenticated ? React.createElement(SimpleStack.Screen, {\n    name: \"SignIn\",\n    options: {\n      title: 'Sign in',\n      animationTypeForReplace: isSignout ? 'pop' : 'push',\n      headerShown: false\n    },\n    component: SignInScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }) : React.createElement(SimpleStack.Screen, {\n    name: \"Success\",\n    options: {\n      title: 'Authentication Success'\n    },\n    component: AuthenticationSuccessScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center'\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: _reactNative.StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)'\n  },\n  button: {\n    margin: 8\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authenticated: state.user !== undefined,\n    isSignout: true\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(user) {\n      return dispatch((0, _AuthReducer.SignInAction)(user));\n    },\n    signOut: function signOut() {\n      return dispatch((0, _AuthReducer.SignOutAction)());\n    }\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(SimpleStackScreen);\n\nexports.default = _default;","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx"],"names":["SignInScreen","signIn","colors","React","useState","email","onChangeEmail","password","onChangePassword","error","onChangeError","styles","content","input","backgroundColor","card","color","text","undefined","firebase","auth","signInWithEmailAndPassword","then","user","catch","e","button","AuthenticationSuccessScreen","signOut","SimpleStack","SimpleStackScreen","props","navigation","authenticated","isSignout","useLayoutEffect","setOptions","headerShown","popToTop","title","animationTypeForReplace","StyleSheet","create","flex","padding","justifyContent","margin","borderRadius","borderWidth","hairlineWidth","borderColor","textAlign","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, TextInput, StyleSheet, Text } from 'react-native';\nimport { Title, Button } from 'react-native-paper';\nimport { useTheme } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n} from '@react-navigation/stack';\nimport * as firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport { SignInAction, Action, State, SignOutAction } from '../../reducers/AuthReducer';\n\ntype AuthStackParams = {\n  SignIn: undefined;\n  Success: undefined;\n};\n\n/*const SplashScreen = () => {\n  return (\n    <View style={styles.content}>\n      <ActivityIndicator />\n    </View>\n  );\n};*/\n\nconst SignInScreen = (signIn: (user: firebase.User) => void) => {\n  const { colors } = useTheme();\n  const [email, onChangeEmail] = React.useState('Email');\n  const [password, onChangePassword] = React.useState('Password');\n  const [error, onChangeError] = React.useState('');\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        placeholder=\"Email\"\n        autoCompleteType=\"email\"\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n        onChangeText={onChangeEmail}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        secureTextEntry\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n        onChangeText={onChangePassword}\n      />\n      {error !== undefined ? (<Text style={{color: 'red'}}>{error}</Text>) : null}\n      <Button mode=\"contained\" onPress={() => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then((user) => {\n          user.user && signIn(user.user)\n        }).catch((e) => onChangeError(e))\n      }} style={styles.button}>\n        Sign in\n      </Button>\n    </View>\n  );\n};\n\nconst AuthenticationSuccessScreen = (signOut: () => void) => {\n  firebase.auth().signOut().then(() => signOut)\n  \n  return (\n    <View style={styles.content}>\n      <Title style={styles.text}>Signed in successfully 🎉</Title>\n      <Button onPress={signOut} style={styles.button}>\n        Sign out\n      </Button>\n    </View>\n  );\n};\n\nconst SimpleStack = createStackNavigator<AuthStackParams>();\n\nconst SimpleStackScreen = (props: any) => {\n  const {\n    navigation,\n    authenticated,\n    isSignout,\n    signIn,\n    signOut\n  } = props\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n    });\n  }, [navigation]);\n\n  if (authenticated) {\n    navigation.popToTop()\n  }\n\n  return (\n    <SimpleStack.Navigator>\n      {authenticated ? (\n        <SimpleStack.Screen\n          name=\"SignIn\"\n          options={{\n            title: 'Sign in',\n            animationTypeForReplace: isSignout ? 'pop' : 'push',\n            headerShown: false\n          }}\n          component={SignInScreen} // TODO pass into sub-component the signIn function\n        />\n      ) : (\n        <SimpleStack.Screen\n          name=\"Success\"\n          options={{ title: 'Authentication Success' }}\n          component={AuthenticationSuccessScreen} // TODO pass into sub-component the signOut function\n        />\n      )}\n    </SimpleStack.Navigator>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center',\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n  },\n  button: {\n    margin: 8,\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8,\n  },\n});\n\n// Map State To Props (Redux Store Passes State To Component)\nconst mapStateToProps = (state: State) => {\n  // Redux Store --> Component\n  return {\n    authenticated: state.user !== undefined,\n    isSignout: true // TODO: make this tependant on the URL\n  };\n};// Map Dispatch To Props (Dispatch Actions To Reducers. Reducers Then Modify The Data And Assign It To Your Props)\nconst mapDispatchToProps = (dispatch: (value: Action) => void) => {\n  // Action\n  return {\n    // Login\n    signIn: (user: firebase.User) => dispatch(SignInAction(user)),\n    signOut: () => dispatch(SignOutAction()),\n  };\n};// Exports\nexport default connect(mapStateToProps, mapDispatchToProps)(SimpleStackScreen)"]},"metadata":{},"sourceType":"script"}