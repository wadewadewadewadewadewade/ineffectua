{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerScreen;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativePaper = require(\"react-native-paper\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _drawer = require(\"@react-navigation/drawer\");\n\nvar _CalendarEntry = _interopRequireDefault(require(\"../shared/CalendarEntry\"));\n\nvar _PainLogEntry = _interopRequireDefault(require(\"../shared/PainLogEntry\"));\n\nvar _Agenda = _interopRequireDefault(require(\"../shared/Agenda\"));\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/MasterDetail.tsx\";\n\nvar useIsLargeScreen = function useIsLargeScreen() {\n  var _React$useState = React.useState(_reactNative.Dimensions.get('window')),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onDimensionsChange = function onDimensionsChange(_ref) {\n      var window = _ref.window;\n      setDimensions(window);\n    };\n\n    _reactNative.Dimensions.addEventListener('change', onDimensionsChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onDimensionsChange);\n    };\n  }, []);\n  return dimensions.width > 414;\n};\n\nvar Header = function Header(_ref2) {\n  var onGoBack = _ref2.onGoBack,\n      title = _ref2.title;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var isLargeScreen = useIsLargeScreen();\n  return React.createElement(_reactNativePaper.Appbar.Header, {\n    style: {\n      backgroundColor: colors.card,\n      elevation: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, isLargeScreen ? null : React.createElement(_reactNativePaper.Appbar.BackAction, {\n    onPress: onGoBack,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 31\n    }\n  }), React.createElement(_reactNativePaper.Appbar.Content, {\n    title: title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar CalendarEntryScreen = function CalendarEntryScreen(_ref3) {\n  var navigation = _ref3.navigation;\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    title: \"CalendarEntry\",\n    onGoBack: function onGoBack() {\n      return navigation.toggleDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), React.createElement(_CalendarEntry.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar AgendaScreen = function AgendaScreen(_ref4) {\n  var navigation = _ref4.navigation;\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    title: \"Agenda\",\n    onGoBack: function onGoBack() {\n      return navigation.toggleDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), React.createElement(_Agenda.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar PainLogEntryScreen = function PainLogEntryScreen(_ref5) {\n  var navigation = _ref5.navigation;\n  return React.createElement(React.Fragment, null, React.createElement(Header, {\n    title: \"PainLogEntry\",\n    onGoBack: function onGoBack() {\n      return navigation.toggleDrawer();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), React.createElement(_PainLogEntry.default, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar CustomDrawerContent = function CustomDrawerContent(props) {\n  var _useTheme2 = (0, _native.useTheme)(),\n      colors = _useTheme2.colors;\n\n  var navigation = (0, _native.useNavigation)();\n  return React.createElement(React.Fragment, null, React.createElement(_reactNativePaper.Appbar.Header, {\n    style: {\n      backgroundColor: colors.card,\n      elevation: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, React.createElement(_reactNativePaper.Appbar.Action, {\n    icon: \"close\",\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), React.createElement(_reactNativePaper.Appbar.Content, {\n    title: \"Pages\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })), React.createElement(_drawer.DrawerContent, (0, _extends2.default)({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar Drawer = (0, _drawer.createDrawerNavigator)();\n\nfunction DrawerScreen(_ref6) {\n  var _this2 = this;\n\n  var navigation = _ref6.navigation,\n      rest = (0, _objectWithoutProperties2.default)(_ref6, [\"navigation\"]);\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerShown: false,\n      gestureEnabled: false\n    });\n  }, [navigation]);\n  var isLargeScreen = useIsLargeScreen();\n  return React.createElement(Drawer.Navigator, (0, _extends2.default)({\n    openByDefault: true,\n    drawerType: isLargeScreen ? 'permanent' : 'back',\n    drawerStyle: isLargeScreen ? null : {\n      width: '100%'\n    },\n    overlayColor: \"transparent\",\n    drawerContent: function drawerContent(props) {\n      return React.createElement(CustomDrawerContent, (0, _extends2.default)({}, props, {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 33\n        }\n      }));\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"CalendarEntry\",\n    component: CalendarEntryScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Agenda\",\n    component: AgendaScreen,\n    options: {\n      title: 'Agenda'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"PainLogEntry\",\n    component: PainLogEntryScreen,\n    options: {\n      title: 'PainLogEntry'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/MasterDetail.tsx"],"names":["useIsLargeScreen","React","useState","Dimensions","get","dimensions","setDimensions","useEffect","onDimensionsChange","window","addEventListener","removeEventListener","width","Header","onGoBack","title","colors","isLargeScreen","backgroundColor","card","elevation","CalendarEntryScreen","navigation","toggleDrawer","AgendaScreen","PainLogEntryScreen","CustomDrawerContent","props","goBack","Drawer","DrawerScreen","rest","useLayoutEffect","setOptions","headerShown","gestureEnabled"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport { Appbar } from 'react-native-paper';\nimport {\n  useTheme,\n  useNavigation,\n  ParamListBase,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n  DrawerContent,\n  DrawerContentComponentProps,\n  DrawerContentOptions,\n} from '@react-navigation/drawer';\nimport type { StackScreenProps } from '@react-navigation/stack';\nimport CalendarEntry from '../shared/CalendarEntry';\nimport PainLogEntry from '../shared/PainLogEntry';\nimport Agenda from '../shared/Agenda';\n\ntype DrawerParams = {\n  CalendarEntry: undefined;\n  Agenda: undefined;\n  PainLogEntry: undefined;\n};\n\nconst useIsLargeScreen = () => {\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  return dimensions.width > 414;\n};\n\nconst Header = ({\n  onGoBack,\n  title,\n}: {\n  onGoBack: () => void;\n  title: string;\n}) => {\n  const { colors } = useTheme();\n  const isLargeScreen = useIsLargeScreen();\n\n  return (\n    <Appbar.Header style={{ backgroundColor: colors.card, elevation: 1 }}>\n      {isLargeScreen ? null : <Appbar.BackAction onPress={onGoBack} />}\n      <Appbar.Content title={title} />\n    </Appbar.Header>\n  );\n};\n\nconst CalendarEntryScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'CalendarEntry'>) => {\n  return (\n    <>\n      <Header title=\"CalendarEntry\" onGoBack={() => navigation.toggleDrawer()} />\n      <CalendarEntry />\n    </>\n  );\n};\n\nconst AgendaScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'Agenda'>) => {\n  return (\n    <>\n      <Header title=\"Agenda\" onGoBack={() => navigation.toggleDrawer()} />\n      <Agenda />\n    </>\n  );\n};\n\nconst PainLogEntryScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'PainLogEntry'>) => {\n  return (\n    <>\n      <Header title=\"PainLogEntry\" onGoBack={() => navigation.toggleDrawer()} />\n      <PainLogEntry />\n    </>\n  );\n};\n\nconst CustomDrawerContent = (\n  props: DrawerContentComponentProps<DrawerContentOptions>\n) => {\n  const { colors } = useTheme();\n  const navigation = useNavigation();\n\n  return (\n    <>\n      <Appbar.Header style={{ backgroundColor: colors.card, elevation: 1 }}>\n        <Appbar.Action icon=\"close\" onPress={() => navigation.goBack()} />\n        <Appbar.Content title=\"Pages\" />\n      </Appbar.Header>\n      <DrawerContent {...props} />\n    </>\n  );\n};\n\nconst Drawer = createDrawerNavigator<DrawerParams>();\n\ntype Props = Partial<React.ComponentProps<typeof Drawer.Navigator>> &\n  StackScreenProps<ParamListBase>;\n\nexport default function DrawerScreen({ navigation, ...rest }: Props) {\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n      gestureEnabled: false,\n    });\n  }, [navigation]);\n\n  const isLargeScreen = useIsLargeScreen();\n\n  return (\n    <Drawer.Navigator\n      openByDefault\n      drawerType={isLargeScreen ? 'permanent' : 'back'}\n      drawerStyle={isLargeScreen ? null : { width: '100%' }}\n      overlayColor=\"transparent\"\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n      {...rest}\n    >\n      <Drawer.Screen name=\"CalendarEntry\" component={CalendarEntryScreen} />\n      <Drawer.Screen\n        name=\"Agenda\"\n        component={AgendaScreen}\n        options={{ title: 'Agenda' }}\n      />\n      <Drawer.Screen\n        name=\"PainLogEntry\"\n        component={PainLogEntryScreen}\n        options={{ title: 'PainLogEntry' }}\n      />\n    </Drawer.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}