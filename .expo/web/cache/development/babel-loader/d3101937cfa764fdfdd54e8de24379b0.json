{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactNativeCalendars = require(\"react-native-calendars\");\n\nvar _this = this,\n    _jsxFileName = \"/home/wade/projects/ineffectua/src/components/screens/Calendar.tsx\";\n\nvar Calendar = function Calendar() {\n  return React.createElement(_reactNativeCalendars.Calendar, {\n    onDayPress: function onDayPress(day) {\n      console.log('selected day', day);\n    },\n    onDayLongPress: function onDayLongPress(day) {\n      console.log('selected day', day);\n    },\n    monthFormat: 'yyyy MM',\n    onMonthChange: function onMonthChange(month) {\n      console.log('month changed', month);\n    },\n    hideExtraDays: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  });\n};\n\nvar _default = Calendar;\nexports.default = _default;","map":{"version":3,"sources":["/home/wade/projects/ineffectua/src/components/screens/Calendar.tsx"],"names":["Calendar","day","console","log","month"],"mappings":";;;;;AACA;;;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErB,SACE,oBAAC,8BAAD;AAQI,IAAA,UAAU,EAAE,oBAACC,GAAD,EAAqB;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AAAiC,KARvE;AAUI,IAAA,cAAc,EAAE,wBAACA,GAAD,EAAqB;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AAAiC,KAV3E;AAYI,IAAA,WAAW,EAAE,SAZjB;AAcI,IAAA,aAAa,EAAE,uBAACG,KAAD,EAAuB;AAACF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AAAoC,KAd/E;AAoBI,IAAA,aAAa,EAAE,IApBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA6CD,CA/CD;;eAiDeJ,Q","sourcesContent":["import { firestore } from 'firebase';\nimport {Calendar as CalendarElement, CalendarList, Agenda, DateObject} from 'react-native-calendars';\n\nconst Calendar = () => {\n  \n  return (\n    <CalendarElement\n        // Initially visible month. Default = Date()\n        //current={'2012-03-01'}\n        // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n        //minDate={'2012-05-10'}\n        // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n        //maxDate={'2012-05-30'}\n        // Handler which gets executed on day press. Default = undefined\n        onDayPress={(day: DateObject) => {console.log('selected day', day)}}\n        // Handler which gets executed on day long press. Default = undefined\n        onDayLongPress={(day: DateObject) => {console.log('selected day', day)}}\n        // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n        monthFormat={'yyyy MM'}\n        // Handler which gets executed when visible month changes in calendar. Default = undefined\n        onMonthChange={(month: DateObject) => {console.log('month changed', month)}}\n        // Hide month navigation arrows. Default = false\n        //hideArrows={true}\n        // Replace default arrows with custom ones (direction can be 'left' or 'right')\n        //renderArrow={(direction: string) => (<Arrow/>)}\n        // Do not show days of other months in month page. Default = false\n        hideExtraDays={true}\n        // If hideArrows=false and hideExtraDays=false do not switch month when tapping on greyed out\n        // day from another month that is visible in calendar page. Default = false\n        //disableMonthChange={true}\n        // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\n        //firstDay={1}\n        // Hide day names. Default = false\n        //hideDayNames={true}\n        // Show week numbers to the left. Default = false\n        //showWeekNumbers={true}\n        // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n        //onPressArrowLeft={subtractMonth => subtractMonth()}\n        // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n        //onPressArrowRight={addMonth => addMonth()}\n        // Disable left arrow. Default = false\n        //disableArrowLeft={true}\n        // Disable right arrow. Default = false\n        //disableArrowRight={true}\n        // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n        //disableAllTouchEventsForDisabledDays={true}\n        /** Replace default month and year title with custom one. the function receive a date as parameter. */\n        //renderHeader={(date: Date) => {/*Return JSX*/}}\n      />\n  )\n}\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"script"}