{"file":"/home/wade/projects/ineffectua/src/components/shared/PainLogEntry.tsx","mappings":";AAAA,uCAAuC;;;;;;;;;;;;;;;;;;;;;AAEvC,6CAA+B;AAC/B,+CASsB;AACtB,qDAA0D;AAE1D,MAAM,MAAM,GAAG;IACb,EAAE,GAAG,EAAE,qDAAqD,EAAE;CAC/D,CAAC;AAEF,SAAwB,YAAY,CAAC,KAA+B;IAClE,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,yBAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAE7E,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,kBAAkB,GAAG,CAAC,EAAE,MAAM,EAA0B,EAAE,EAAE;YAChE,aAAa,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC,CAAC;QAEF,yBAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAE1D,OAAO,GAAG,EAAE,CAAC,yBAAU,CAAC,mBAAmB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAC5E,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAa,IAAI,CAAC,CAAC;IAE3C,uBAAc,CAAC,GAAG,CAAC,CAAC;IAEpB,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;IAEvE,OAAO,CACL,oBAAC,yBAAU,kBAAC,GAAG,EAAE,GAAG,EAAE,qBAAqB,EAAE,MAAM,CAAC,OAAO,IAAM,KAAK,GACnE,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CACzB,oBAAC,mBAAI;IACH,oDAAoD;;QAApD,oDAAoD;QACpD,GAAG,EAAE,CAAC,EACN,KAAK,EAAE;YACL,MAAM,CAAC,IAAI;YACX,uBAAQ,CAAC,EAAE,KAAK,KAAK,IAAI;gBACvB,MAAM,EAAE,QAAQ;gBAChB,KAAK,EAAE,QAAQ;aAChB;SACF;QAED,oBAAC,oBAAK,IAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,GAAI,CACzC,CACR,CAAC,CACS,CACd,CAAC;AACJ,CAAC;AAtCD,+BAsCC;AAED,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC/B,GAAG,uBAAQ,CAAC,MAAM,CAAC;QACjB,GAAG,EAAE;YACH,OAAO,EAAE;gBACP,OAAO,EAAE,MAAgB;gBACzB,mBAAmB,EAAE,uCAAuC;aAC7D;YACD,IAAI,EAAE;gBACJ,KAAK,EAAE,MAAM;aACd;SACF;QACD,OAAO,EAAE;YACP,OAAO,EAAE;gBACP,aAAa,EAAE,KAAK;gBACpB,QAAQ,EAAE,MAAM;aACjB;SACF;KACF,CAAC;IACF,KAAK,EAAE;QACL,IAAI,EAAE,CAAC;QACP,UAAU,EAAE,OAAO;QACnB,UAAU,EAAE,MAAM;KACnB;CACF,CAAC,CAAC","names":[],"sources":["/home/wade/projects/ineffectua/src/components/shared/PainLogEntry.tsx"],"sourcesContent":["/* eslint-disable import/no-commonjs */\n\nimport * as React from 'react';\nimport {\n  View,\n  Image,\n  ScrollView,\n  StyleSheet,\n  ScrollViewProps,\n  Dimensions,\n  Platform,\n  ScaledSize,\n} from 'react-native';\nimport { useScrollToTop } from '@react-navigation/native';\n\nconst COVERS = [\n  { uri: \"//static.invertase.io/assets/firebase/analytics.svg\" }\n];\n\nexport default function PainLogEntry(props: Partial<ScrollViewProps>) {\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const ref = React.useRef<ScrollView>(null);\n\n  useScrollToTop(ref);\n\n  const itemSize = dimensions.width / Math.floor(dimensions.width / 150);\n\n  return (\n    <ScrollView ref={ref} contentContainerStyle={styles.content} {...props}>\n      {COVERS.map((source, i) => (\n        <View\n          // eslint-disable-next-line react/no-array-index-key\n          key={i}\n          style={[\n            styles.item,\n            Platform.OS !== 'web' && {\n              height: itemSize,\n              width: itemSize,\n            },\n          ]}\n        >\n          <Image source={source} style={styles.photo} />\n        </View>\n      ))}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  ...Platform.select({\n    web: {\n      content: {\n        display: 'grid' as 'none',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))',\n      },\n      item: {\n        width: '100%',\n      },\n    },\n    default: {\n      content: {\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      },\n    },\n  }),\n  photo: {\n    flex: 1,\n    resizeMode: 'cover',\n    paddingTop: '100%',\n  },\n});\n"],"version":3}