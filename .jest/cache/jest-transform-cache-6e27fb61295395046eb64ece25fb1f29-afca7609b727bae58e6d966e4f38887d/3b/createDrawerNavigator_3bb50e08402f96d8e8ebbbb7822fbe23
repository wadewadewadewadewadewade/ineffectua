b559b4687adb56eddd82756ca8f3c081
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _DrawerRouter = _interopRequireDefault(require("../routers/DrawerRouter"));

var _DrawerView = _interopRequireDefault(require("../views/DrawerView"));

var _DrawerNavigatorItems = _interopRequireDefault(require("../views/DrawerNavigatorItems"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var defaultContentComponent = function defaultContentComponent(props) {return React.createElement(require("react-native").ScrollView, {
    alwaysBounceVertical: false },
  React.createElement(require("react-navigation").SafeAreaView, {
    forceInset: {
      top: 'always',
      horizontal: 'never' } },

  React.createElement(_DrawerNavigatorItems.default, props)));};

var DefaultDrawerConfig = {
  drawerWidth: function drawerWidth() {var _reactNative$Dimensio =








    require("react-native").Dimensions.get('window'),height = _reactNative$Dimensio.height,width = _reactNative$Dimensio.width;

    var smallerAxisSize = Math.min(height, width);
    var isLandscape = width > height;
    var isTablet = smallerAxisSize >= 600;
    var appBarHeight = require("react-native").Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
    var maxWidth = isTablet ? 320 : 280;
    return Math.min(smallerAxisSize - appBarHeight, maxWidth);
  },
  contentComponent: defaultContentComponent,
  drawerPosition: require("react-native").I18nManager.isRTL ? 'right' : 'left',
  keyboardDismissMode: 'on-drag',
  drawerBackgroundColor: {
    light: require("react-navigation").ThemeColors.light.bodyContent,
    dark: require("react-navigation").ThemeColors.dark.bodyContent },

  overlayColor: {
    light: 'rgba(0, 0, 0, 0.5)',
    dark: 'rgba(0, 0, 0, 0.5)' },

  drawerType: 'front',
  hideStatusBar: false,
  statusBarAnimation: 'slide' };


var DrawerNavigator = function DrawerNavigator(routeConfigs) {var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mergedConfig = _objectSpread({}, DefaultDrawerConfig, {}, config);

  var drawerRouter = (0, _DrawerRouter.default)(routeConfigs, mergedConfig);

  var navigator = (0, require("react-navigation").createNavigator)(_DrawerView.default, drawerRouter, mergedConfig);
  return navigator;
};

var _default = DrawerNavigator;
exports.default = _default;