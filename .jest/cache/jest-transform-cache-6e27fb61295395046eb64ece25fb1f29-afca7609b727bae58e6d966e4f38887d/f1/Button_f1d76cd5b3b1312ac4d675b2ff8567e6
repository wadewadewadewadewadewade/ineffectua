a57c97c2520b832ac76655047881b073
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));



var _color = _interopRequireDefault(require("color"));

var _ActivityIndicator = _interopRequireDefault(require("./ActivityIndicator"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));





function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}

function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var

































Button = function (_React$Component) {require("@babel/runtime/helpers/inherits")(Button, _React$Component);var _super = _createSuper(Button);
  function Button() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, Button);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "state", {
      elevation: new (require("react-native").Animated.Value)(_this.props.mode === 'contained' ? 2 : 0) });


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handlePressIn", function () {
      if (_this.props.mode === 'contained') {var

        scale =
        _this.props.theme.animation.scale;

        require("react-native").Animated.timing(_this.state.elevation, {
          toValue: 8,
          duration: 200 * scale,
          useNativeDriver: true }).
        start();
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handlePressOut", function () {
      if (_this.props.mode === 'contained') {var

        scale =
        _this.props.theme.animation.scale;

        require("react-native").Animated.timing(_this.state.elevation, {
          toValue: 2,
          duration: 150 * scale,
          useNativeDriver: true }).
        start();
      }
    });return _this;
  }require("@babel/runtime/helpers/createClass")(Button, [{ key: "render", value: function render()

    {
      var _this$props = this.props,

      disabled =















      _this$props.disabled,compact = _this$props.compact,mode = _this$props.mode,dark = _this$props.dark,loading = _this$props.loading,icon = _this$props.icon,buttonColor = _this$props.color,children = _this$props.children,uppercase = _this$props.uppercase,accessibilityLabel = _this$props.accessibilityLabel,onPress = _this$props.onPress,style = _this$props.style,theme = _this$props.theme,contentStyle = _this$props.contentStyle,labelStyle = _this$props.labelStyle,testID = _this$props.testID,
      rest = _objectWithoutProperties(_this$props, ["disabled", "compact", "mode", "dark", "loading", "icon", "color", "children", "uppercase", "accessibilityLabel", "onPress", "style", "theme", "contentStyle", "labelStyle", "testID"]);var


      colors =

      theme.colors,roundness = theme.roundness;
      var font = theme.fonts.medium;
      var backgroundColor, borderColor, textColor, borderWidth;

      if (mode === 'contained') {
        if (disabled) {
          backgroundColor = (0, _color.default)(theme.dark ? require("../styles/colors").white : require("../styles/colors").black).alpha(0.12).rgb().string();
        } else if (buttonColor) {
          backgroundColor = buttonColor;
        } else {
          backgroundColor = colors.primary;
        }
      } else {
        backgroundColor = 'transparent';
      }

      if (mode === 'outlined') {
        borderColor = (0, _color.default)(theme.dark ? require("../styles/colors").white : require("../styles/colors").black).alpha(0.29).rgb().string();
        borderWidth = require("react-native").StyleSheet.hairlineWidth;
      } else {
        borderColor = 'transparent';
        borderWidth = 0;
      }

      if (disabled) {
        textColor = (0, _color.default)(theme.dark ? require("../styles/colors").white : require("../styles/colors").black).alpha(0.32).rgb().string();
      } else if (mode === 'contained') {
        var isDark;

        if (typeof dark === 'boolean') {
          isDark = dark;
        } else {
          isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();
        }

        textColor = isDark ? require("../styles/colors").white : require("../styles/colors").black;
      } else if (buttonColor) {
        textColor = buttonColor;
      } else {
        textColor = colors.primary;
      }

      var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
      var buttonStyle = {
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderWidth: borderWidth,
        borderRadius: roundness };

      var touchableStyle = {
        borderRadius: style ? require("react-native").StyleSheet.flatten(style).borderRadius || roundness : roundness };var _ref =




      require("react-native").StyleSheet.flatten(labelStyle) || {},customLabelColor = _ref.color,customLabelSize = _ref.fontSize;

      var textStyle = _objectSpread({
        color: textColor },
      font);

      var elevation = disabled || mode !== 'contained' ? 0 : this.state.elevation;
      return React.createElement(_Surface.default, _extends({}, rest, {
        style: [styles.button, compact && styles.compact, {
          elevation: elevation },
        buttonStyle, style] }),
      React.createElement(_TouchableRipple.default, {
        borderless: true,
        delayPressIn: 0,
        onPress: onPress,
        onPressIn: this.handlePressIn,
        onPressOut: this.handlePressOut,
        accessibilityLabel: accessibilityLabel,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityState: {
          disabled: disabled },

        disabled: disabled,
        rippleColor: rippleColor,
        style: touchableStyle,
        testID: testID },
      React.createElement(require("react-native").View, {
        style: [styles.content, contentStyle] },
      icon && loading !== true ? React.createElement(require("react-native").View, {
        style: styles.icon },
      React.createElement(_Icon.default, {
        source: icon,
        size: customLabelSize || 16,
        color: customLabelColor || textColor })) :
      null, loading ? React.createElement(_ActivityIndicator.default, {
        size: customLabelSize || 16,
        color: customLabelColor || textColor,
        style: styles.icon }) :
      null, React.createElement(_Text.default, {
        numberOfLines: 1,
        style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle] },
      children))));
    } }]);return Button;}(React.Component);



_defineProperty(Button, "defaultProps", {
  mode: 'text',
  uppercase: true });


var styles = require("react-native").StyleSheet.create({
  button: {
    minWidth: 64,
    borderStyle: 'solid' },

  compact: {
    minWidth: 'auto' },

  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center' },

  icon: {
    marginLeft: 12,
    marginRight: -4 },

  label: {
    textAlign: 'center',
    letterSpacing: 1,
    marginVertical: 9,
    marginHorizontal: 16 },

  compactLabel: {
    marginHorizontal: 8 },

  uppercaseLabel: {
    textTransform: 'uppercase' } });



var _default = (0, require("../core/theming").withTheme)(Button);

exports.default = _default;