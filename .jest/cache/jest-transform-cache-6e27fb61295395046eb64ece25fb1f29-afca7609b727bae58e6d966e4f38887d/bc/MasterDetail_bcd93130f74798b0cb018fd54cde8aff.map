{"file":"/home/wade/projects/ineffectua/src/components/screens/MasterDetail.tsx","mappings":"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","names":[],"sources":["/home/wade/projects/ineffectua/src/components/screens/MasterDetail.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport { Appbar } from 'react-native-paper';\nimport {\n  useTheme,\n  useNavigation,\n  ParamListBase,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n  DrawerContent,\n  DrawerContentComponentProps,\n  DrawerContentOptions,\n} from '@react-navigation/drawer';\nimport type { StackScreenProps } from '@react-navigation/stack';\nimport CalendarEntry from '../shared/CalendarEntry';\nimport PainLogEntry from '../shared/PainLogEntry';\nimport Agenda from '../shared/Agenda';\n\ntype DrawerParams = {\n  CalendarEntry: undefined;\n  Agenda: undefined;\n  PainLogEntry: undefined;\n};\n\nconst useIsLargeScreen = () => {\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  return dimensions.width > 414;\n};\n\nconst Header = ({\n  onGoBack,\n  title,\n}: {\n  onGoBack: () => void;\n  title: string;\n}) => {\n  const { colors } = useTheme();\n  const isLargeScreen = useIsLargeScreen();\n\n  return (\n    <Appbar.Header style={{ backgroundColor: colors.card, elevation: 1 }}>\n      {isLargeScreen ? null : <Appbar.BackAction onPress={onGoBack} />}\n      <Appbar.Content title={title} />\n    </Appbar.Header>\n  );\n};\n\nconst CalendarEntryScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'CalendarEntry'>) => {\n  return (\n    <>\n      <Header title=\"CalendarEntry\" onGoBack={() => navigation.toggleDrawer()} />\n      <CalendarEntry />\n    </>\n  );\n};\n\nconst AgendaScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'Agenda'>) => {\n  return (\n    <>\n      <Header title=\"Agenda\" onGoBack={() => navigation.toggleDrawer()} />\n      <Agenda />\n    </>\n  );\n};\n\nconst PainLogEntryScreen = ({\n  navigation,\n}: DrawerScreenProps<DrawerParams, 'PainLogEntry'>) => {\n  return (\n    <>\n      <Header title=\"PainLogEntry\" onGoBack={() => navigation.toggleDrawer()} />\n      <PainLogEntry />\n    </>\n  );\n};\n\nconst CustomDrawerContent = (\n  props: DrawerContentComponentProps<DrawerContentOptions>\n) => {\n  const { colors } = useTheme();\n  const navigation = useNavigation();\n\n  return (\n    <>\n      <Appbar.Header style={{ backgroundColor: colors.card, elevation: 1 }}>\n        <Appbar.Action icon=\"close\" onPress={() => navigation.goBack()} />\n        <Appbar.Content title=\"Pages\" />\n      </Appbar.Header>\n      <DrawerContent {...props} />\n    </>\n  );\n};\n\nconst Drawer = createDrawerNavigator<DrawerParams>();\n\ntype Props = Partial<React.ComponentProps<typeof Drawer.Navigator>> &\n  StackScreenProps<ParamListBase>;\n\nexport default function DrawerScreen({ navigation, ...rest }: Props) {\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n      gestureEnabled: false,\n    });\n  }, [navigation]);\n\n  const isLargeScreen = useIsLargeScreen();\n\n  return (\n    <Drawer.Navigator\n      openByDefault\n      drawerType={isLargeScreen ? 'permanent' : 'back'}\n      drawerStyle={isLargeScreen ? null : { width: '100%' }}\n      overlayColor=\"transparent\"\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\n      {...rest}\n    >\n      <Drawer.Screen name=\"CalendarEntry\" component={CalendarEntryScreen} />\n      <Drawer.Screen\n        name=\"Agenda\"\n        component={AgendaScreen}\n        options={{ title: 'Agenda' }}\n      />\n      <Drawer.Screen\n        name=\"PainLogEntry\"\n        component={PainLogEntryScreen}\n        options={{ title: 'PainLogEntry' }}\n      />\n    </Drawer.Navigator>\n  );\n}\n"],"version":3}