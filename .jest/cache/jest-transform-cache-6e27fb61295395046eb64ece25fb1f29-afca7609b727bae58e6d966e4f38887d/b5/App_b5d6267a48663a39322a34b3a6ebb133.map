{"file":"/home/wade/projects/ineffectua/src/components/App.tsx","mappings":"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","names":[],"sources":["/home/wade/projects/ineffectua/src/components/App.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from '../reducers'\nimport middleware from '../middleware'\nimport {\n  ScrollView,\n  YellowBox,\n  Platform,\n  StatusBar,\n  I18nManager,\n  Dimensions,\n  ScaledSize,\n  Linking,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { enableScreens } from 'react-native-screens';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {\n  Provider as PaperProvider,\n  DefaultTheme as PaperLightTheme,\n  DarkTheme as PaperDarkTheme,\n  Appbar,\n  List,\n  Divider,\n  Text,\n} from 'react-native-paper';\nimport {\n  InitialState,\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n  PathConfigMap,\n  NavigationContainerRef,\n} from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerScreenProps,\n} from '@react-navigation/drawer';\nimport {\n  createStackNavigator,\n  StackScreenProps,\n  HeaderStyleInterpolators,\n} from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\n\nimport { restartApp } from './Restart';\nimport AsyncStorage from './AsyncStorage';\nimport LinkingPrefixes from './LinkingPrefixes';\nimport SettingsItem from './shared/SettingsItem';\nimport SimpleStack from './screens/SimpleStack';\nimport ModalPresentationStack from './screens/ModalPresentationStack';\nimport StackTransparent from './screens/StackTransparent';\nimport StackHeaderCustomization from './screens/StackHeaderCustomization';\nimport MaterialBottomTabs from './screens/MaterialBottomTabs';\nimport NotFound from './screens/NotFound';\nimport MasterDetail from './screens/MasterDetail';\nimport AuthFlow from './screens/AuthFlow';\nimport LinkComponent from './screens/LinkComponent';\n\nconst store = createStore(reducer, middleware);\n\nYellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);\n\nenableScreens();\n\ntype RootDrawerParamList = {\n  Root: undefined;\n  Another: undefined;\n};\n\ntype RootStackParamList = {\n  Home: undefined;\n  NotFound: undefined;\n} & {\n  [P in keyof typeof SCREENS]: undefined;\n};\n\nconst SCREENS = {\n  SimpleStack: { title: 'Simple Stack', component: SimpleStack },\n  ModalPresentationStack: {\n    title: 'Modal Presentation Stack',\n    component: ModalPresentationStack,\n  },\n  StackTransparent: {\n    title: 'Transparent Stack',\n    component: StackTransparent,\n  },\n  StackHeaderCustomization: {\n    title: 'Header Customization in Stack',\n    component: StackHeaderCustomization,\n  },\n  MaterialBottomTabs: {\n    title: 'Material Bottom Tabs',\n    component: MaterialBottomTabs,\n  },\n  MasterDetail: {\n    title: 'Master Detail',\n    component: MasterDetail,\n  },\n  AuthFlow: {\n    title: 'Auth Flow',\n    component: AuthFlow,\n  },\n  LinkComponent: {\n    title: '<Link />',\n    component: LinkComponent,\n  },\n};\n\nconst Drawer = createDrawerNavigator<RootDrawerParamList>();\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst NAVIGATION_PERSISTENCE_KEY = 'NAVIGATION_STATE';\nconst THEME_PERSISTENCE_KEY = 'THEME_TYPE';\n\nexport default function App() {\n  const [theme, setTheme] = React.useState(DefaultTheme);\n\n  const [isReady, setIsReady] = React.useState(Platform.OS === 'web');\n  const [initialState, setInitialState] = React.useState<\n    InitialState | undefined\n  >();\n\n  React.useEffect(() => {\n    const restoreState = async () => {\n      try {\n        const initialUrl = await Linking.getInitialURL();\n\n        if (Platform.OS !== 'web' || initialUrl === null) {\n          const savedState = await AsyncStorage.getItem(\n            NAVIGATION_PERSISTENCE_KEY\n          );\n\n          const state = savedState ? JSON.parse(savedState) : undefined;\n\n          if (state !== undefined) {\n            setInitialState(state);\n          }\n        }\n      } finally {\n        try {\n          const themeName = await AsyncStorage.getItem(THEME_PERSISTENCE_KEY);\n\n          setTheme(themeName === 'dark' ? DarkTheme : DefaultTheme);\n        } catch (e) {\n          // Ignore\n        }\n\n        setIsReady(true);\n      }\n    };\n\n    restoreState();\n  }, []);\n\n  const paperTheme = React.useMemo(() => {\n    const t = theme.dark ? PaperDarkTheme : PaperLightTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...theme.colors,\n        surface: theme.colors.card,\n        accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)',\n      },\n    };\n  }, [theme.colors, theme.dark]);\n\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n\n  React.useEffect(() => {\n    const onDimensionsChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', onDimensionsChange);\n\n    return () => Dimensions.removeEventListener('change', onDimensionsChange);\n  }, []);\n\n  const navigationRef = React.useRef<NavigationContainerRef>(null);\n\n  useReduxDevToolsExtension(navigationRef);\n\n  if (!isReady) {\n    return null;\n  }\n\n  const isLargeScreen = dimensions.width >= 1024;\n\n  return (\n    <ReduxProvider store={store}>\n      <PaperProvider theme={paperTheme}>\n        {Platform.OS === 'ios' && (\n          <StatusBar barStyle={theme.dark ? 'light-content' : 'dark-content'} />\n        )}\n        <NavigationContainer\n          ref={navigationRef}\n          initialState={initialState}\n          onStateChange={(state) =>\n            AsyncStorage.setItem(\n              NAVIGATION_PERSISTENCE_KEY,\n              JSON.stringify(state)\n            )\n          }\n          theme={theme}\n          linking={{\n            // To test deep linking on, run the following in the Terminal:\n            // Android: adb shell am start -a android.intent.action.VIEW -d \"exp://127.0.0.1:19000/--/simple-stack\"\n            // iOS: xcrun simctl openurl booted exp://127.0.0.1:19000/--/simple-stack\n            // Android (bare): adb shell am start -a android.intent.action.VIEW -d \"rne://127.0.0.1:19000/--/simple-stack\"\n            // iOS (bare): xcrun simctl openurl booted rne://127.0.0.1:19000/--/simple-stack\n            // The first segment of the link is the the scheme + host (returned by `Linking.makeUrl`)\n            prefixes: LinkingPrefixes,\n            config: {\n              screens: {\n                Root: {\n                  path: '',\n                  initialRouteName: 'Home',\n                  screens: Object.keys(SCREENS).reduce<PathConfigMap>(\n                    (acc, name) => {\n                      // Convert screen names such as SimpleStack to kebab case (simple-stack)\n                      const path = name\n                        .replace(/([A-Z]+)/g, '-$1')\n                        .replace(/^-/, '')\n                        .toLowerCase();\n\n                      acc[name] = {\n                        path,\n                        screens: {\n                          Article: {\n                            path: 'article/:author?',\n                            parse: {\n                              author: (author) =>\n                                author.charAt(0).toUpperCase() +\n                                author.slice(1).replace(/-/g, ' '),\n                            },\n                            stringify: {\n                              author: (author: string) =>\n                                author.toLowerCase().replace(/\\s/g, '-'),\n                            },\n                          },\n                          Albums: 'music',\n                          Chat: 'chat',\n                          Contacts: 'people',\n                          NewsFeed: 'feed',\n                          Dialog: 'dialog',\n                        },\n                      };\n\n                      return acc;\n                    },\n                    {\n                      Home: '',\n                      NotFound: '*',\n                    }\n                  ),\n                },\n              },\n            },\n          }}\n          fallback={<Text>Loading…</Text>}\n          documentTitle={{\n            formatter: (options, route) =>\n              `${options?.title ?? route?.name} - React Navigation Example`,\n          }}\n        >\n          <Drawer.Navigator drawerType={isLargeScreen ? 'permanent' : undefined}>\n            <Drawer.Screen\n              name=\"Root\"\n              options={{\n                title: 'Examples',\n                drawerIcon: ({ size, color }) => (\n                  <MaterialIcons size={size} color={color} name=\"folder\" />\n                ),\n              }}\n            >\n              {({ navigation }: DrawerScreenProps<RootDrawerParamList>) => (\n                <Stack.Navigator\n                  screenOptions={{\n                    headerStyleInterpolator: HeaderStyleInterpolators.forUIKit,\n                  }}\n                >\n                  <Stack.Screen\n                    name=\"Home\"\n                    options={{\n                      title: 'Examples',\n                      headerLeft: isLargeScreen\n                        ? undefined\n                        : () => (\n                            <Appbar.Action\n                              color={theme.colors.text}\n                              icon=\"menu\"\n                              onPress={() => navigation.toggleDrawer()}\n                            />\n                          ),\n                    }}\n                  >\n                    {({ navigation }: StackScreenProps<RootStackParamList>) => (\n                      <ScrollView\n                        style={{ backgroundColor: theme.colors.background }}\n                      >\n                        <SettingsItem\n                          label=\"Right to left\"\n                          value={I18nManager.isRTL}\n                          onValueChange={() => {\n                            I18nManager.forceRTL(!I18nManager.isRTL);\n                            restartApp();\n                          }}\n                        />\n                        <Divider />\n                        <SettingsItem\n                          label=\"Dark theme\"\n                          value={theme.dark}\n                          onValueChange={() => {\n                            AsyncStorage.setItem(\n                              THEME_PERSISTENCE_KEY,\n                              theme.dark ? 'light' : 'dark'\n                            );\n\n                            setTheme((t) => (t.dark ? DefaultTheme : DarkTheme));\n                          }}\n                        />\n                        <Divider />\n                        {(Object.keys(SCREENS) as (keyof typeof SCREENS)[]).map(\n                          (name) => (\n                            <List.Item\n                              key={name}\n                              testID={name}\n                              title={SCREENS[name].title}\n                              onPress={() => navigation.navigate(name)}\n                            />\n                          )\n                        )}\n                      </ScrollView>\n                    )}\n                  </Stack.Screen>\n                  <Stack.Screen\n                    name=\"NotFound\"\n                    component={NotFound}\n                    options={{ title: 'Oops!' }}\n                  />\n                  {(Object.keys(SCREENS) as (keyof typeof SCREENS)[]).map(\n                    (name) => (\n                      <Stack.Screen\n                        key={name}\n                        name={name}\n                        getComponent={() => SCREENS[name].component}\n                        options={{ title: SCREENS[name].title }}\n                      />\n                    )\n                  )}\n                </Stack.Navigator>\n              )}\n            </Drawer.Screen>\n          </Drawer.Navigator>\n        </NavigationContainer>\n      </PaperProvider>\n    </ReduxProvider>\n  );\n}\n"],"version":3}