f6e4e6da18a1a1922c76e27bde1d9609
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const native_1 = require("@react-navigation/native");
const stack_1 = require("@react-navigation/stack");
const CalendarEntry_1 = __importDefault(require("../shared/CalendarEntry"));
const PainLogEntry_1 = __importDefault(require("../shared/PainLogEntry"));
const scrollEnabled = react_native_1.Platform.select({ web: true, default: false });
const LinkButton = ({ to, ...rest }) => {
    const { onPress, ...props } = native_1.useLinkProps({ to });
    return (React.createElement(react_native_paper_1.Button, Object.assign({}, props, rest, react_native_1.Platform.select({
        web: { onClick: onPress },
        default: { onPress },
    }))));
};
const CalendarEntryScreen = ({ navigation, route, }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(native_1.Link, { to: "/link-component/music", style: [styles.button, { padding: 8 }] }, "Go to /link-component/music"),
            React.createElement(native_1.Link, { to: "/link-component/music", action: native_1.StackActions.replace('PainLogEntry'), style: [styles.button, { padding: 8 }] }, "Replace with /link-component/music"),
            React.createElement(LinkButton, { to: "/link-component/music", mode: "contained", style: styles.button }, "Go to /link-component/music"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(CalendarEntry_1.default, { author: { name: route.params.author }, scrollEnabled: scrollEnabled })));
};
const PainLogEntryScreen = ({ navigation }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(native_1.Link, { to: "/link-component/article/babel", style: [styles.button, { padding: 8 }] }, "Go to /link-component/article"),
            React.createElement(LinkButton, { to: "/link-component/article/babel", mode: "contained", style: styles.button }, "Go to /link-component/article"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(PainLogEntry_1.default, { scrollEnabled: scrollEnabled })));
};
const SimpleStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, ...rest }) {
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    return (React.createElement(SimpleStack.Navigator, Object.assign({}, rest),
        React.createElement(SimpleStack.Screen, { name: "CalendarEntry", component: CalendarEntryScreen, options: ({ route }) => ({
                title: `Article by ${route.params.author}`,
            }), initialParams: { author: 'Gandalf' } }),
        React.createElement(SimpleStack.Screen, { name: "PainLogEntry", component: PainLogEntryScreen, options: { title: 'Albums' } })));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    buttons: {
        padding: 8,
    },
    button: {
        margin: 8,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvd2FkZS9wcm9qZWN0cy9pbmVmZmVjdHVhL3NyYy9jb21wb25lbnRzL3NjcmVlbnMvTGlua0NvbXBvbmVudC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBQy9CLCtDQUFzRTtBQUN0RSwyREFBNEM7QUFDNUMscURBS2tDO0FBQ2xDLG1EQUdpQztBQUNqQyw0RUFBb0Q7QUFDcEQsMEVBQWtEO0FBT2xELE1BQU0sYUFBYSxHQUFHLHVCQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUVyRSxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQ2xCLEVBQUUsRUFDRixHQUFHLElBQUksRUFDOEMsRUFBRSxFQUFFO0lBQ3pELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRyxxQkFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVuRCxPQUFPLENBQ0wsb0JBQUMsMkJBQU0sb0JBQ0QsS0FBSyxFQUNMLElBQUksRUFDSix1QkFBUSxDQUFDLE1BQU0sQ0FBQztRQUNsQixHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFTO1FBQ2hDLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRTtLQUNyQixDQUFDLEVBQ0YsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQzNCLFVBQVUsRUFDVixLQUFLLEdBQ2dELEVBQUUsRUFBRTtJQUN6RCxPQUFPLENBQ0wsb0JBQUMseUJBQVU7UUFDVCxvQkFBQyxtQkFBSSxJQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTztZQUN6QixvQkFBQyxhQUFJLElBQ0gsRUFBRSxFQUFDLHVCQUF1QixFQUMxQixLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLGtDQUdqQztZ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LEVBQUUsQ0FBQztLQUNYO0lBQ0QsTUFBTSxFQUFFO1FBQ04sTUFBTSxFQUFFLENBQUM7S0FDVjtDQUNGLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS93YWRlL3Byb2plY3RzL2luZWZmZWN0dWEvc3JjL2NvbXBvbmVudHMvc2NyZWVucy9MaW5rQ29tcG9uZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBTY3JvbGxWaWV3LCBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuaW1wb3J0IHtcbiAgTGluayxcbiAgU3RhY2tBY3Rpb25zLFxuICBQYXJhbUxpc3RCYXNlLFxuICB1c2VMaW5rUHJvcHMsXG59IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XG5pbXBvcnQge1xuICBjcmVhdGVTdGFja05hdmlnYXRvcixcbiAgU3RhY2tTY3JlZW5Qcm9wcyxcbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vc3RhY2snO1xuaW1wb3J0IENhbGVuZGFyRW50cnkgZnJvbSAnLi4vc2hhcmVkL0NhbGVuZGFyRW50cnknO1xuaW1wb3J0IFBhaW5Mb2dFbnRyeSBmcm9tICcuLi9zaGFyZWQvUGFpbkxvZ0VudHJ5JztcblxudHlwZSBTaW1wbGVTdGFja1BhcmFtcyA9IHtcbiAgQ2FsZW5kYXJFbnRyeTogeyBhdXRob3I6IHN0cmluZyB9O1xuICBQYWluTG9nRW50cnk6IHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IHNjcm9sbEVuYWJsZWQgPSBQbGF0Zm9ybS5zZWxlY3QoeyB3ZWI6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0pO1xuXG5jb25zdCBMaW5rQnV0dG9uID0gKHtcbiAgdG8sXG4gIC4uLnJlc3Rcbn06IFJlYWN0LkNvbXBvbmVudFByb3BzPHR5cGVvZiBCdXR0b24+ICYgeyB0bzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgeyBvblByZXNzLCAuLi5wcm9wcyB9ID0gdXNlTGlua1Byb3BzKHsgdG8gfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICB7Li4ucHJvcHN9XG4gICAgICB7Li4ucmVzdH1cbiAgICAgIHsuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICB3ZWI6IHsgb25DbGljazogb25QcmVzcyB9IGFzIGFueSxcbiAgICAgICAgZGVmYXVsdDogeyBvblByZXNzIH0sXG4gICAgICB9KX1cbiAgICAvPlxuICApO1xufTtcblxuY29uc3QgQ2FsZW5kYXJFbnRyeVNjcmVlbiA9ICh7XG4gIG5hdmlnYXRpb24sXG4gIHJvdXRlLFxufTogU3RhY2tTY3JlZW5Qcm9wczxTaW1wbGVTdGFja1BhcmFtcywgJ0NhbGVuZGFyRW50cnknPikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTY3JvbGxWaWV3PlxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5idXR0b25zfT5cbiAgICAgICAgPExpbmtcbiAgICAgICAgICB0bz1cIi9saW5rLWNvbXBvbmVudC9tdXNpY1wiXG4gICAgICAgICAgc3R5bGU9e1tzdHlsZXMuYnV0dG9uLCB7IHBhZGRpbmc6IDggfV19XG4gICAgICAgID5cbiAgICAgICAgICBHbyB0byAvbGluay1jb21wb25lbnQvbXVzaWNcbiAgICAgICAgPC9MaW5rPlxuICAgICAgICA8TGlua1xuICAgICAgICAgIHRvPVwiL2xpbmstY29tcG9uZW50L211c2ljXCJcbiAgICAgICAgICBhY3Rpb249e1N0YWNrQWN0aW9ucy5yZXBsYWNlKCdQYWluTG9nRW50cnknKX1cbiAgICAgICAgICBzdHlsZT17W3N0eWxlcy5idXR0b24sIHsgcGFkZGluZzogOCB9XX1cbiAgICAgICAgPlxuICAgICAgICAgIFJlcGxhY2Ugd2l0aCAvbGluay1jb21wb25lbnQvbXVzaWNcbiAgICAgICAgPC9MaW5rPlxuICAgICAgICA8TGlua0J1dHRvblxuICAgICAgICAgIHRvPVwiL2xpbmstY29tcG9uZW50L211c2ljXCJcbiAgICAgICAgICBtb2RlPVwiY29udGFpbmVkXCJcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgPlxuICAgICAgICAgIEdvIHRvIC9saW5rLWNvbXBvbmVudC9tdXNpY1xuICAgICAgICA8L0xpbmtCdXR0b24+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBtb2RlPVwib3V0bGluZWRcIlxuICAgICAgICAgIG9uUHJlc3M9eygpID0+IG5hdmlnYXRpb24uZ29CYWNrKCl9XG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5idXR0b259XG4gICAgICAgID5cbiAgICAgICAgICBHbyBiYWNrXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9WaWV3PlxuICAgICAgPENhbGVuZGFyRW50cnlcbiAgICAgICAgYXV0aG9yPXt7IG5hbWU6IHJvdXRlLnBhcmFtcy5hdXRob3IgfX1cbiAgICAgICAgc2Nyb2xsRW5hYmxlZD17c2Nyb2xsRW5hYmxlZH1cbiAgICAgIC8+XG4gICAgPC9TY3JvbGxWaWV3PlxuICApO1xufTtcblxuY29uc3QgUGFpbkxvZ0VudHJ5U2NyZWVuID0gKHsgbmF2aWdhdGlvbiB9OiBTdGFja1NjcmVlblByb3BzPFNpbXBsZVN0YWNrUGFyYW1zPikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxTY3JvbGxWaWV3PlxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5idXR0b25zfT5cbiAgICAgICAgPExpbmtcbiAgICAgICAgICB0bz1cIi9saW5rLWNvbXBvbmVudC9hcnRpY2xlL2JhYmVsXCJcbiAgICAgICAgICBzdHlsZT17W3N0eWxlcy5idXR0b24sIHsgcGFkZGluZzogOCB9XX1cbiAgICAgICAgPlxuICAgICAgICAgIEdvIHRvIC9saW5rLWNvbXBvbmVudC9hcnRpY2xlXG4gICAgICAgIDwvTGluaz5cbiAgICAgICAgPExpbmtCdXR0b25cbiAgICAgICAgICB0bz1cIi9saW5rLWNvbXBvbmVudC9hcnRpY2xlL2JhYmVsXCJcbiAgICAgICAgICBtb2RlPVwiY29udGFpbmVkXCJcbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgPlxuICAgICAgICAgIEdvIHRvIC9saW5rLWNvbXBvbmVudC9hcnRpY2xlXG4gICAgICAgIDwvTGlua0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIG1vZGU9XCJvdXRsaW5lZFwiXG4gICAgICAgICAgb25QcmVzcz17KCkgPT4gbmF2aWdhdGlvbi5nb0JhY2soKX1cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAgICAgICAgPlxuICAgICAgICAgIEdvIGJhY2tcbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1ZpZXc+XG4gICAgICA8UGFpbkxvZ0VudHJ5IHNjcm9sbEVuYWJsZWQ9e3Njcm9sbEVuYWJsZWR9IC8+XG4gICAgPC9TY3JvbGxWaWV3PlxuICApO1xufTtcblxuY29uc3QgU2ltcGxlU3RhY2sgPSBjcmVhdGVTdGFja05hdmlnYXRvcjxTaW1wbGVTdGFja1BhcmFtcz4oKTtcblxudHlwZSBQcm9wcyA9IFBhcnRpYWw8UmVhY3QuQ29tcG9uZW50UHJvcHM8dHlwZW9mIFNpbXBsZVN0YWNrLk5hdmlnYXRvcj4+ICZcbiAgU3RhY2tTY3JlZW5Qcm9wczxQYXJhbUxpc3RCYXNlPjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2ltcGxlU3RhY2tTY3JlZW4oeyBuYXZpZ2F0aW9uLCAuLi5yZXN0IH06IFByb3BzKSB7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgbmF2aWdhdGlvbi5zZXRPcHRpb25zKHtcbiAgICAgIGhlYWRlclNob3duOiBmYWxzZSxcbiAgICB9KTtcbiAgfSwgW25hdmlnYXRpb25dKTtcblxuICByZXR1cm4gKFxuICAgIDxTaW1wbGVTdGFjay5OYXZpZ2F0b3Igey4uLnJlc3R9PlxuICAgICAgPFNpbXBsZVN0YWNrLlNjcmVlblxuICAgICAgICBuYW1lPVwiQ2FsZW5kYXJFbnRyeVwiXG4gICAgICAgIGNvbXBvbmVudD17Q2FsZW5kYXJFbnRyeVNjcmVlbn1cbiAgICAgICAgb3B0aW9ucz17KHsgcm91dGUgfSkgPT4gKHtcbiAgICAgICAgICB0aXRsZTogYEFydGljbGUgYnkgJHtyb3V0ZS5wYXJhbXMuYXV0aG9yfWAsXG4gICAgICAgIH0pfVxuICAgICAgICBpbml0aWFsUGFyYW1zPXt7IGF1dGhvcjogJ0dhbmRhbGYnIH19XG4gICAgICAvPlxuICAgICAgPFNpbXBsZVN0YWNrLlNjcmVlblxuICAgICAgICBuYW1lPVwiUGFpbkxvZ0VudHJ5XCJcbiAgICAgICAgY29tcG9uZW50PXtQYWluTG9nRW50cnlTY3JlZW59XG4gICAgICAgIG9wdGlvbnM9e3sgdGl0bGU6ICdBbGJ1bXMnIH19XG4gICAgICAvPlxuICAgIDwvU2ltcGxlU3RhY2suTmF2aWdhdG9yPlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJ1dHRvbnM6IHtcbiAgICBwYWRkaW5nOiA4LFxuICB9LFxuICBidXR0b246IHtcbiAgICBtYXJnaW46IDgsXG4gIH0sXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==