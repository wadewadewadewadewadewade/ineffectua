d94c8540b07b0c5b87626cae099950b0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const native_1 = require("@react-navigation/native");
const stack_1 = require("@react-navigation/stack");
const CalendarEntry_1 = __importDefault(require("../shared/CalendarEntry"));
const scrollEnabled = react_native_1.Platform.select({ web: true, default: false });
const CalendarEntryScreen = ({ navigation, route, }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.push('Dialog'), style: styles.button }, "Show Dialog"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(CalendarEntry_1.default, { author: { name: route.params.author }, scrollEnabled: scrollEnabled })));
};
const DialogScreen = ({ navigation }) => {
    const { colors } = native_1.useTheme();
    return (React.createElement(react_native_1.View, { style: styles.container },
        React.createElement(react_native_1.View, { style: [styles.dialog, { backgroundColor: colors.card }] },
            React.createElement(react_native_paper_1.Paragraph, null, "Mise en place is a French term that literally means \u201Cput in place.\u201D It also refers to a way cooks in professional kitchens and restaurants set up their work stations\u2014first by gathering all ingredients for a recipes, partially preparing them (like measuring out and chopping), and setting them all near each other. Setting up mise en place before cooking is another top tip for home cooks, as it seriously helps with organization. It\u2019ll pretty much guarantee you never forget to add an ingredient and save you time from running back and forth from the pantry ten times."),
            React.createElement(react_native_paper_1.Button, { style: styles.close, compact: true, onPress: navigation.goBack }, "Okay"))));
};
const SimpleStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, ...rest }) {
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    return (React.createElement(SimpleStack.Navigator, Object.assign({ mode: "modal" }, rest),
        React.createElement(SimpleStack.Screen, { name: "CalendarEntry", component: CalendarEntryScreen, initialParams: { author: 'Gandalf' } }),
        React.createElement(SimpleStack.Screen, { name: "Dialog", component: DialogScreen, options: {
                headerShown: false,
                cardStyle: { backgroundColor: 'transparent' },
                cardOverlayEnabled: true,
                cardStyleInterpolator: ({ current: { progress } }) => ({
                    cardStyle: {
                        opacity: progress.interpolate({
                            inputRange: [0, 0.5, 0.9, 1],
                            outputRange: [0, 0.25, 0.7, 1],
                        }),
                        transform: [
                            {
                                scale: progress.interpolate({
                                    inputRange: [0, 1],
                                    outputRange: [0.9, 1],
                                    extrapolate: 'clamp',
                                }),
                            },
                        ],
                    },
                    overlayStyle: {
                        opacity: progress.interpolate({
                            inputRange: [0, 1],
                            outputRange: [0, 0.5],
                            extrapolate: 'clamp',
                        }),
                    },
                }),
            } })));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    buttons: {
        flexDirection: 'row',
        padding: 8,
    },
    button: {
        margin: 8,
    },
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    dialog: {
        padding: 16,
        width: '90%',
        maxWidth: 400,
        borderRadius: 3,
    },
    close: {
        alignSelf: 'flex-end',
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,