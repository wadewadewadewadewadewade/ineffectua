f60928bc5d1a67c6294ee302b28d49cd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = useEventEmitter;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}




function useEventEmitter(listen) {
  var listenRef = React.useRef(listen);
  React.useEffect(function () {
    listenRef.current = listen;
  });
  var listeners = React.useRef({});
  var create = React.useCallback(function (target) {
    var removeListener = function removeListener(type, callback) {
      var callbacks = listeners.current[type] ? listeners.current[type][target] : undefined;

      if (!callbacks) {
        return;
      }

      var index = callbacks.indexOf(callback);
      callbacks.splice(index, 1);
    };

    var addListener = function addListener(type, callback) {
      listeners.current[type] = listeners.current[type] || {};
      listeners.current[type][target] = listeners.current[type][target] || [];
      listeners.current[type][target].push(callback);
      return function () {return removeListener(type, callback);};
    };

    return {
      addListener: addListener,
      removeListener: removeListener };

  }, []);
  var emit = React.useCallback(function (_ref)




  {var _ref2;var type = _ref.type,data = _ref.data,target = _ref.target,canPreventDefault = _ref.canPreventDefault;
    var _listenRef$current;

    var items = listeners.current[type] || {};

    var callbacks = target !== undefined ? items[target] && items[target].slice() : (_ref2 = []).concat.apply(_ref2, require("@babel/runtime/helpers/toConsumableArray")(Object.keys(items).map(function (t) {return items[t];}))).filter(function (cb, i, self) {return self.lastIndexOf(cb) === i;});
    var event = {
      get type() {
        return type;
      } };



    if (target !== undefined) {
      Object.defineProperty(event, 'target', {
        enumerable: true,

        get: function get() {
          return target;
        } });


    }

    if (data !== undefined) {
      Object.defineProperty(event, 'data', {
        enumerable: true,

        get: function get() {
          return data;
        } });


    }

    if (canPreventDefault) {
      var defaultPrevented = false;
      Object.defineProperties(event, {
        defaultPrevented: {
          enumerable: true,

          get: function get() {
            return defaultPrevented;
          } },


        preventDefault: {
          enumerable: true,

          value: function value() {
            defaultPrevented = true;
          } } });



    }

    (_listenRef$current = listenRef.current) === null || _listenRef$current === void 0 ? void 0 : _listenRef$current.call(listenRef, event);
    callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach(function (cb) {return cb(event);});
    return event;
  }, []);
  return React.useMemo(function () {return {
      create: create,
      emit: emit };},
  [create, emit]);
}