fe4a90b8d26a06274f7dd5d0c670ba6a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = useNavigationHelpers;

var React = _interopRequireWildcard(require("react"));



var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

var _UnhandledActionContext = _interopRequireDefault(require("./UnhandledActionContext"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



require("./types").PrivateValueStore;





function useNavigationHelpers(_ref)




{var onAction = _ref.onAction,getState = _ref.getState,emitter = _ref.emitter,router = _ref.router;
  var onUnhandledAction = React.useContext(_UnhandledActionContext.default);
  var parentNavigationHelpers = React.useContext(_NavigationContext.default);
  return React.useMemo(function () {
    var dispatch = function dispatch(op) {
      var action = typeof op === 'function' ? op(getState()) : op;
      var handled = onAction(action);

      if (!handled) {
        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);
      }
    };

    var actions = _objectSpread(_objectSpread({}, router.actionCreators), require("@react-navigation/routers").CommonActions);

    var helpers = Object.keys(actions).reduce(function (acc, name) {

      acc[name] = function () {return dispatch(actions[name].apply(actions, arguments));};

      return acc;
    }, {});
    return _objectSpread(_objectSpread(_objectSpread({}, parentNavigationHelpers), helpers), {}, {
      dispatch: dispatch,
      emit: emitter.emit,
      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {return true;},
      canGoBack: function canGoBack() {
        var state = getState();
        return router.getStateForAction(state, require("@react-navigation/routers").CommonActions.goBack(), {
          routeNames: state.routeNames,
          routeParamList: {} }) !==
        null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;
      },
      dangerouslyGetParent: function dangerouslyGetParent() {return parentNavigationHelpers;},
      dangerouslyGetState: getState });

  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);
}