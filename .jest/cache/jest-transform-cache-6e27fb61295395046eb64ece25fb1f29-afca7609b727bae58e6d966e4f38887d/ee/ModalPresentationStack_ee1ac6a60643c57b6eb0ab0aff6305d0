49ce55dae0a4cae1c95420970790d77a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const stack_1 = require("@react-navigation/stack");
const CalendarEntry_1 = __importDefault(require("../shared/CalendarEntry"));
const PainLogEntry_1 = __importDefault(require("../shared/PainLogEntry"));
const scrollEnabled = react_native_1.Platform.select({ web: true, default: false });
const CalendarEntryScreen = ({ navigation, route, }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.push('PainLogEntry'), style: styles.button }, "Push album"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(CalendarEntry_1.default, { author: { name: route.params.author }, scrollEnabled: scrollEnabled })));
};
const PainLogEntryScreen = ({ navigation }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.push('CalendarEntry', { author: 'Babel fish' }), style: styles.button }, "Push article"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(PainLogEntry_1.default, { scrollEnabled: scrollEnabled })));
};
const ModalPresentationStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, options }) {
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    return (React.createElement(ModalPresentationStack.Navigator, Object.assign({ mode: "modal", screenOptions: ({ route, navigation }) => ({
            ...stack_1.TransitionPresets.ModalPresentationIOS,
            cardOverlayEnabled: true,
            gestureEnabled: true,
            headerStatusBarHeight: navigation.dangerouslyGetState().routes.indexOf(route) > 0
                ? 0
                : undefined,
        }) }, options),
        React.createElement(ModalPresentationStack.Screen, { name: "CalendarEntry", component: CalendarEntryScreen, options: ({ route }) => ({
                title: `Article by ${route.params.author}`,
            }), initialParams: { author: 'Gandalf' } }),
        React.createElement(ModalPresentationStack.Screen, { name: "PainLogEntry", component: PainLogEntryScreen, options: { title: 'PainLogEntry' } })));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    buttons: {
        flexDirection: 'row',
        padding: 8,
    },
    button: {
        margin: 8,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,