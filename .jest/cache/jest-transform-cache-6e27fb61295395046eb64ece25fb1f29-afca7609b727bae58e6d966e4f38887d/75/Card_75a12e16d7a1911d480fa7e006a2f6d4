354767d2a348aaf97e0cb4094778463a
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));



var _color = _interopRequireDefault(require("color"));

var _CardSheet = _interopRequireDefault(require("./CardSheet"));



var _CardAnimationContext = _interopRequireDefault(require("../../utils/CardAnimationContext"));

var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));

var _getInvertedMultiplier = _interopRequireDefault(require("../../utils/getInvertedMultiplier"));

var _memoize = _interopRequireDefault(require("../../utils/memoize"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}

function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var GESTURE_VELOCITY_IMPACT = 0.3;
var TRUE = 1;
var FALSE = 0;




var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;
var useNativeDriver = require("react-native").Platform.OS !== 'web';var

Card = function (_React$Component) {require("@babel/runtime/helpers/inherits")(Card, _React$Component);var _super = _createSuper(Card);
  function Card() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, Card);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "isCurrentlyMounted", false);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "isClosing", new (require("react-native").Animated.Value)(FALSE));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "inverted", new (require("react-native").Animated.Value)((0, _getInvertedMultiplier.default)(_this.props.gestureDirection)));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "layout", {
      width: new (require("react-native").Animated.Value)(_this.props.layout.width),
      height: new (require("react-native").Animated.Value)(_this.props.layout.height) });


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "isSwiping", new (require("react-native").Animated.Value)(FALSE));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "interactionHandle", void 0);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "pendingGestureCallback", void 0);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "lastToValue", void 0);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "animate", function (_ref)


    {var closing = _ref.closing,velocity = _ref.velocity;var _this$props2 =






      _this.props,gesture = _this$props2.gesture,transitionSpec = _this$props2.transitionSpec,onOpen = _this$props2.onOpen,onClose = _this$props2.onClose,onTransitionStart = _this$props2.onTransitionStart;
      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {
        closing: closing }));

      _this.lastToValue = toValue;
      var spec = closing ? transitionSpec.close : transitionSpec.open;
      var animation = spec.animation === 'spring' ? require("react-native").Animated.spring : require("react-native").Animated.timing;
      _this.setPointerEventsEnabled(!closing);
      _this.handleStartInteraction();
      clearTimeout(_this.pendingGestureCallback);
      onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({
        closing: closing });

      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {
        velocity: velocity,
        toValue: toValue,
        useNativeDriver: useNativeDriver,
        isInteraction: false })).
      start(function (_ref2)

      {var finished = _ref2.finished;
        _this.handleEndInteraction();
        clearTimeout(_this.pendingGestureCallback);

        if (finished) {
          if (closing) {
            onClose();
          } else {
            onOpen();
          }

          if (_this.isCurrentlyMounted) {

            _this.forceUpdate();
          }
        }
      });
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "getAnimateToValue", function (_ref3)



    {var closing = _ref3.closing,layout = _ref3.layout,gestureDirection = _ref3.gestureDirection;
      if (!closing) {
        return 0;
      }

      return (0, _getDistanceForDirection.default)(layout, gestureDirection);
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "setPointerEventsEnabled", function (enabled) {
      var _this$contentRef$curr;

      var pointerEvents = enabled ? 'box-none' : 'none';
      (_this$contentRef$curr = _this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({
        pointerEvents: pointerEvents });

    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleStartInteraction", function () {
      if (_this.interactionHandle === undefined) {
        _this.interactionHandle = require("react-native").InteractionManager.createInteractionHandle();
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleEndInteraction", function () {
      if (_this.interactionHandle !== undefined) {
        require("react-native").InteractionManager.clearInteractionHandle(_this.interactionHandle);

        _this.interactionHandle = undefined;
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleGestureStateChange", function (_ref4)

    {var nativeEvent = _ref4.nativeEvent;var _this$props3 =








      _this.props,layout = _this$props3.layout,onClose = _this$props3.onClose,onGestureBegin = _this$props3.onGestureBegin,onGestureCanceled = _this$props3.onGestureCanceled,onGestureEnd = _this$props3.onGestureEnd,gestureDirection = _this$props3.gestureDirection,gestureVelocityImpact = _this$props3.gestureVelocityImpact;

      switch (nativeEvent.state) {
        case require("../GestureHandler").GestureState.BEGAN:
          _this.isSwiping.setValue(TRUE);
          _this.handleStartInteraction();
          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();
          break;

        case require("../GestureHandler").GestureState.CANCELLED:
          {
            _this.isSwiping.setValue(FALSE);
            _this.handleEndInteraction();
            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;
            _this.animate({
              closing: _this.props.closing,
              velocity: velocity });

            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();
            break;
          }

        case require("../GestureHandler").GestureState.END:
          {
            _this.isSwiping.setValue(FALSE);
            var distance;
            var translation;
            var _velocity;

            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {
              distance = layout.height;
              translation = nativeEvent.translationY;
              _velocity = nativeEvent.velocityY;
            } else {
              distance = layout.width;
              translation = nativeEvent.translationX;
              _velocity = nativeEvent.velocityX;
            }

            var closing = (translation + _velocity * gestureVelocityImpact) * (0, _getInvertedMultiplier.default)(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;
            _this.animate({
              closing: closing,
              velocity: _velocity });


            if (closing) {


              _this.pendingGestureCallback = setTimeout(function () {
                onClose();


                _this.forceUpdate();
              }, 32);
            }

            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();
            break;
          }}

    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "getInterpolatedStyle", (0, _memoize.default)(function (styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {return styleInterpolator({
        index: index,
        current: {
          progress: current },

        next: next && {
          progress: next },

        closing: _this.isClosing,
        swiping: _this.isSwiping,
        inverted: _this.inverted,
        layouts: {
          screen: layout },

        insets: {
          top: insetTop,
          right: insetRight,
          bottom: insetBottom,
          left: insetLeft } });}));



    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "getCardAnimationContext", (0, _memoize.default)(function (index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {return {
        index: index,
        current: {
          progress: current },

        next: next && {
          progress: next },

        closing: _this.isClosing,
        swiping: _this.isSwiping,
        inverted: _this.inverted,
        layouts: {
          screen: layout },

        insets: {
          top: insetTop,
          right: insetRight,
          bottom: insetBottom,
          left: insetLeft } };}));



    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "contentRef", React.createRef());return _this;
  }require("@babel/runtime/helpers/createClass")(Card, [{ key: "componentDidMount", value: function componentDidMount()

    {
      this.animate({
        closing: this.props.closing });

      this.isCurrentlyMounted = true;
    } }, { key: "componentDidUpdate", value: function componentDidUpdate(

    prevProps) {var _this$props4 =




      this.props,layout = _this$props4.layout,gestureDirection = _this$props4.gestureDirection,closing = _this$props4.closing;var

      width =

      layout.width,height = layout.height;

      if (width !== prevProps.layout.width) {
        this.layout.width.setValue(width);
      }

      if (height !== prevProps.layout.height) {
        this.layout.height.setValue(height);
      }

      if (gestureDirection !== prevProps.gestureDirection) {
        this.inverted.setValue((0, _getInvertedMultiplier.default)(gestureDirection));
      }

      var toValue = this.getAnimateToValue(this.props);

      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {





        this.animate({
          closing: closing });

      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      this.isCurrentlyMounted = false;
      this.handleEndInteraction();
    } }, { key: "gestureActivationCriteria", value: function gestureActivationCriteria()

    {var _this$props5 =




      this.props,layout = _this$props5.layout,gestureDirection = _this$props5.gestureDirection,gestureResponseDistance = _this$props5.gestureResponseDistance;
      var distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

      if (gestureDirection === 'vertical') {
        return {
          maxDeltaX: 15,
          minOffsetY: 5,
          hitSlop: {
            bottom: -layout.height + distance } };


      } else if (gestureDirection === 'vertical-inverted') {
        return {
          maxDeltaX: 15,
          minOffsetY: -5,
          hitSlop: {
            top: -layout.height + distance } };


      } else {
        var hitSlop = -layout.width + distance;
        var invertedMultiplier = (0, _getInvertedMultiplier.default)(gestureDirection);

        if (invertedMultiplier === 1) {
          return {
            minOffsetX: 5,
            maxDeltaY: 20,
            hitSlop: {
              right: hitSlop } };


        } else {
          return {
            minOffsetX: -5,
            maxDeltaY: 20,
            hitSlop: {
              left: hitSlop } };


        }
      }
    } }, { key: "render", value: function render()

    {
      var _this$props = this.props,

      styleInterpolator =















      _this$props.styleInterpolator,index = _this$props.index,current = _this$props.current,gesture = _this$props.gesture,next = _this$props.next,layout = _this$props.layout,insets = _this$props.insets,overlay = _this$props.overlay,overlayEnabled = _this$props.overlayEnabled,shadowEnabled = _this$props.shadowEnabled,gestureEnabled = _this$props.gestureEnabled,gestureDirection = _this$props.gestureDirection,pageOverflowEnabled = _this$props.pageOverflowEnabled,children = _this$props.children,customContainerStyle = _this$props.containerStyle,contentStyle = _this$props.contentStyle,
      rest = _objectWithoutProperties(_this$props, ["styleInterpolator", "index", "current", "gesture", "next", "layout", "insets", "overlay", "overlayEnabled", "shadowEnabled", "gestureEnabled", "gestureDirection", "pageOverflowEnabled", "children", "containerStyle", "contentStyle"]);

      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);
      var animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);var

      containerStyle =



      interpolatedStyle.containerStyle,cardStyle = interpolatedStyle.cardStyle,overlayStyle = interpolatedStyle.overlayStyle,shadowStyle = interpolatedStyle.shadowStyle;
      var handleGestureEvent = gestureEnabled ? require("react-native").Animated.event([{
        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {
          translationY: gesture } :
        {
          translationX: gesture } }],

      {
        useNativeDriver: useNativeDriver }) :
      undefined;var _reactNative$StyleShe =



      require("react-native").StyleSheet.flatten(contentStyle || {}),backgroundColor = _reactNative$StyleShe.backgroundColor;

      var isTransparent = backgroundColor ? (0, _color.default)(backgroundColor).alpha() === 0 : false;
      return React.createElement(_CardAnimationContext.default.Provider, {
        value: animationContext },
      React.createElement(require("react-native").Animated.View, {
        style: {




          opacity: current },


        collapsable: false }),
      React.createElement(require("react-native").View, _extends({
        pointerEvents: "box-none" },
      rest), overlayEnabled ? React.createElement(require("react-native").View, {
        pointerEvents: "box-none",
        style: require("react-native").StyleSheet.absoluteFill },
      overlay({
        style: overlayStyle })) :
      null, React.createElement(require("react-native").Animated.View, {
        style: [styles.container, containerStyle, customContainerStyle],
        pointerEvents: "box-none" },
      React.createElement(require("../GestureHandler").PanGestureHandler, _extends({
        enabled: layout.width !== 0 && gestureEnabled,
        onGestureEvent: handleGestureEvent,
        onHandlerStateChange: this.handleGestureStateChange },
      this.gestureActivationCriteria()), React.createElement(require("react-native").Animated.View, {
        style: [styles.container, cardStyle] },
      shadowEnabled && shadowStyle && !isTransparent ? React.createElement(require("react-native").Animated.View, {
        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {
          backgroundColor: backgroundColor },
        shadowStyle],
        pointerEvents: "none" }) :
      null, React.createElement(_CardSheet.default, {
        ref: this.contentRef,
        enabled: pageOverflowEnabled,
        layout: layout,
        style: contentStyle },
      children))))));
    } }]);return Card;}(React.Component);



exports.default = Card;

_defineProperty(Card, "defaultProps", {
  overlayEnabled: require("react-native").Platform.OS !== 'ios',
  shadowEnabled: true,
  gestureEnabled: true,
  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,
  overlay: function overlay(_ref5) {var
    style = _ref5.style;return (
      style ? React.createElement(require("react-native").Animated.View, {
        pointerEvents: "none",
        style: [styles.overlay, style] }) :
      null);} });


var styles = require("react-native").StyleSheet.create({
  container: {
    flex: 1 },

  overlay: {
    flex: 1,
    backgroundColor: '#000' },

  shadow: {
    position: 'absolute',
    shadowRadius: 5,
    shadowColor: '#000',
    shadowOpacity: 0.3 },

  shadowHorizontal: {
    top: 0,
    bottom: 0,
    width: 3,
    shadowOffset: {
      width: -1,
      height: 1 } },


  shadowLeft: {
    left: 0 },

  shadowRight: {
    right: 0 },

  shadowVertical: {
    left: 0,
    right: 0,
    height: 3,
    shadowOffset: {
      width: 1,
      height: -1 } },


  shadowTop: {
    top: 0 },

  shadowBottom: {
    bottom: 0 } });