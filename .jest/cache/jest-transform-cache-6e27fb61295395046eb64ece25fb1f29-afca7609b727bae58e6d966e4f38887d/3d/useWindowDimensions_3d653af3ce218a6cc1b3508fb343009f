1a8ed1d69413557d8493bff5bc47dd12
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = useWindowDimensions;

var React = _interopRequireWildcard(require("react"));



function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}



function useWindowDimensions() {var _React$useState =
  React.useState(function () {var _reactNative$Dimensio =




    require("react-native").Dimensions.get('window'),_reactNative$Dimensio2 = _reactNative$Dimensio.height,height = _reactNative$Dimensio2 === void 0 ? 0 : _reactNative$Dimensio2,_reactNative$Dimensio3 = _reactNative$Dimensio.width,width = _reactNative$Dimensio3 === void 0 ? 0 : _reactNative$Dimensio3;

    return {
      height: height,
      width: width };

  }),_React$useState2 = require("@babel/runtime/helpers/slicedToArray")(_React$useState, 2),dimensions = _React$useState2[0],setDimensions = _React$useState2[1];
  React.useEffect(function () {
    var onChange = function onChange(_ref)

    {var window = _ref.window;var

      width =

      window.width,height = window.height;
      setDimensions(function (d) {
        if (width === d.width && height === d.height) {
          return d;
        }

        return {
          width: width,
          height: height };

      });
    };



    onChange({
      window: require("react-native").Dimensions.get('window') });


    require("react-native").Dimensions.addEventListener('change', onChange);

    return function () {return require("react-native").Dimensions.addEventListener('change', onChange);};
  }, []);
  return dimensions;
}