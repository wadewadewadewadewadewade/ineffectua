3b18b8995238ee330db5e0be701022c1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const stack_1 = require("@react-navigation/stack");
const CalendarEntry_1 = __importDefault(require("../shared/CalendarEntry"));
const PainLogEntry_1 = __importDefault(require("../shared/PainLogEntry"));
const Agenda_1 = __importDefault(require("../shared/Agenda"));
const scrollEnabled = react_native_1.Platform.select({ web: true, default: false });
const CalendarEntryScreen = ({ navigation, route, }) => {
    var _a, _b;
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.replace('Agenda'), style: styles.button }, "Replace with feed"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.pop(), style: styles.button }, "Pop screen")),
        React.createElement(CalendarEntry_1.default, { author: { name: (_b = (_a = route.params) === null || _a === void 0 ? void 0 : _a.author) !== null && _b !== void 0 ? _b : 'Unknown' }, scrollEnabled: scrollEnabled })));
};
const AgendaScreen = ({ route, navigation, }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.navigate('PainLogEntry', { date: Date.now() }), style: styles.button }, "Navigate to album"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.goBack(), style: styles.button }, "Go back")),
        React.createElement(Agenda_1.default, { scrollEnabled: scrollEnabled, date: Date.now() })));
};
const PainLogEntryScreen = ({ navigation, }) => {
    return (React.createElement(react_native_1.ScrollView, null,
        React.createElement(react_native_1.View, { style: styles.buttons },
            React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => navigation.push('CalendarEntry', { author: 'Babel fish' }), style: styles.button }, "Push article"),
            React.createElement(react_native_paper_1.Button, { mode: "outlined", onPress: () => navigation.pop(2), style: styles.button }, "Pop by 2")),
        React.createElement(PainLogEntry_1.default, { scrollEnabled: scrollEnabled })));
};
const SimpleStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, }) {
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    return (React.createElement(SimpleStack.Navigator, null,
        React.createElement(SimpleStack.Screen, { name: "CalendarEntry", component: CalendarEntryScreen, options: ({ route }) => {
                var _a, _b;
                return ({
                    title: `Article by ${(_b = (_a = route.params) === null || _a === void 0 ? void 0 : _a.author) !== null && _b !== void 0 ? _b : 'Unknown'}`,
                });
            }, initialParams: { author: 'Gandalf' } }),
        React.createElement(SimpleStack.Screen, { name: "Agenda", component: Agenda_1.default, options: { title: 'Feed' } }),
        React.createElement(SimpleStack.Screen, { name: "PainLogEntry", component: PainLogEntryScreen, options: { title: 'Albums' } })));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    buttons: {
        flexDirection: 'row',
        padding: 8,
    },
    button: {
        margin: 8,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,