f1c0d5e9fec24f71b8abb0050f7f7001
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _TouchableItem = _interopRequireDefault(require("./TouchableItem"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var




DrawerNavigatorItems = function (_React$Component) {require("@babel/runtime/helpers/inherits")(DrawerNavigatorItems, _React$Component);var _super = _createSuper(DrawerNavigatorItems);
  function DrawerNavigatorItems() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, DrawerNavigatorItems);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "context", void 0);return _this;
  }require("@babel/runtime/helpers/createClass")(DrawerNavigatorItems, [{ key: "getActiveTintColor", value: function getActiveTintColor()

    {var

      activeTintColor =
      this.props.activeTintColor;

      if (!activeTintColor) {
        return;
      } else if (typeof activeTintColor === 'string') {
        return activeTintColor;
      }

      return activeTintColor[this.context];
    } }, { key: "getInactiveTintColor", value: function getInactiveTintColor()

    {var

      inactiveTintColor =
      this.props.inactiveTintColor;

      if (!inactiveTintColor) {
        return;
      } else if (typeof inactiveTintColor === 'string') {
        return inactiveTintColor;
      }

      return inactiveTintColor[this.context];
    } }, { key: "getActiveBackgroundColor", value: function getActiveBackgroundColor()

    {var

      activeBackgroundColor =
      this.props.activeBackgroundColor;

      if (!activeBackgroundColor) {
        return;
      } else if (typeof activeBackgroundColor === 'string') {
        return activeBackgroundColor;
      }

      return activeBackgroundColor[this.context];
    } }, { key: "getInactiveBackgroundColor", value: function getInactiveBackgroundColor()

    {var

      inactiveBackgroundColor =
      this.props.inactiveBackgroundColor;

      if (!inactiveBackgroundColor) {
        return;
      } else if (typeof inactiveBackgroundColor === 'string') {
        return inactiveBackgroundColor;
      }

      return inactiveBackgroundColor[this.context];
    } }, { key: "render", value: function render()

    {var _this$props =













      this.props,items = _this$props.items,activeItemKey = _this$props.activeItemKey,getLabel = _this$props.getLabel,renderIcon = _this$props.renderIcon,onItemPress = _this$props.onItemPress,itemsContainerStyle = _this$props.itemsContainerStyle,itemStyle = _this$props.itemStyle,labelStyle = _this$props.labelStyle,activeLabelStyle = _this$props.activeLabelStyle,inactiveLabelStyle = _this$props.inactiveLabelStyle,iconContainerStyle = _this$props.iconContainerStyle,drawerPosition = _this$props.drawerPosition;
      var activeTintColor = this.getActiveTintColor();
      var activeBackgroundColor = this.getActiveBackgroundColor();
      var inactiveTintColor = this.getInactiveTintColor();
      var inactiveBackgroundColor = this.getInactiveBackgroundColor();
      return React.createElement(require("react-native").View, {
        style: [styles.container, itemsContainerStyle] },
      items.map(function (route, index) {var _forceInset;
        var focused = activeItemKey === route.key;
        var color = focused ? activeTintColor : inactiveTintColor;
        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var scene = {
          route: route,
          index: index,
          focused: focused,
          tintColor: color };

        var icon = renderIcon(scene);
        var label = getLabel(scene);
        var accessibilityLabel = typeof label === 'string' ? label : undefined;
        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;
        return React.createElement(_TouchableItem.default, {
          key: route.key,
          accessible: true,
          accessibilityLabel: accessibilityLabel,
          onPress: function onPress() {
            onItemPress({
              route: route,
              focused: focused });

          },
          delayPressIn: 0 },
        React.createElement(require("react-navigation").SafeAreaView, {
          style: [{
            backgroundColor: backgroundColor },
          styles.item, itemStyle],
          forceInset: (_forceInset = {}, require("@babel/runtime/helpers/defineProperty")(_forceInset,
          drawerPosition, 'always'), require("@babel/runtime/helpers/defineProperty")(_forceInset,
          drawerPosition === 'left' ? 'right' : 'left', 'never'), require("@babel/runtime/helpers/defineProperty")(_forceInset, "vertical",
          'never'), _forceInset) },

        icon ? React.createElement(require("react-native").View, {
          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle] },
        icon) : null, typeof label === 'string' ? React.createElement(require("react-native").Text, {
          style: [styles.label, {
            color: color },
          labelStyle, extraLabelStyle] },
        label) : label));
      }));
    } }]);return DrawerNavigatorItems;}(React.Component);



exports.default = DrawerNavigatorItems;

_defineProperty(DrawerNavigatorItems, "defaultProps", {
  activeTintColor: {
    light: '#2196f3',
    dark: '#fff' },

  activeBackgroundColor: {
    light: 'rgba(0, 0, 0, .04)',
    dark: 'rgba(255, 255, 255, .04)' },

  inactiveTintColor: {
    light: 'rgba(0, 0, 0, .87)',
    dark: 'rgba(255, 255, 255, .87)' },

  inactiveBackgroundColor: {
    light: 'transparent',
    dark: 'transparent' } });



_defineProperty(DrawerNavigatorItems, "contextType", require("react-navigation").ThemeContext);

var styles = require("react-native").StyleSheet.create({
  container: {
    paddingVertical: 4 },

  item: {
    flexDirection: 'row',
    alignItems: 'center' },

  icon: {
    marginHorizontal: 16,
    width: 24,
    alignItems: 'center' },

  inactiveIcon: {




    opacity: 0.62 },

  label: {
    margin: 16,
    fontWeight: 'bold' } });