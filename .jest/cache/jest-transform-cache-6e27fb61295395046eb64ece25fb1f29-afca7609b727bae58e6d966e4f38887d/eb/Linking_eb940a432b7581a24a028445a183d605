4ecb2b1821c977d1e5d80873ece41022
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { makeUrl: true, parse: true, addEventListener: true, removeEventListener: true, parseInitialURLAsync: true, sendIntent: true, openSettings: true, getInitialURL: true, openURL: true, canOpenURL: true, useUrl: true };exports.makeUrl = makeUrl;exports.parse = parse;exports.addEventListener = addEventListener;exports.removeEventListener = removeEventListener;exports.parseInitialURLAsync = parseInitialURLAsync;exports.sendIntent = sendIntent;exports.openSettings = openSettings;exports.getInitialURL = getInitialURL;exports.openURL = openURL;exports.canOpenURL = canOpenURL;exports.useUrl = useUrl;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _core = require("@unimodules/core");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));
var _qs = _interopRequireDefault(require("qs"));
var _react = require("react");
var _reactNative = require("react-native");
var _urlParse = _interopRequireDefault(require("url-parse"));
var _ExpoLinking = _interopRequireDefault(require("./ExpoLinking"));



























































































































































































































































































var _Linking = require("./Linking.types");Object.keys(_Linking).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _Linking[key];} });});function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}var manifest = _expoConstants.default.manifest;function validateURL(url) {(0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);(0, _invariant.default)(url, 'Invalid URL: cannot be empty');}function usesCustomScheme() {return _expoConstants.default.appOwnership === 'standalone' && manifest.scheme;}function getHostUri() {if (!manifest.hostUri && !usesCustomScheme()) {return removeScheme(_expoConstants.default.linkingUri).replace(/\/--($|\/.*$)/, '');}return manifest.hostUri;}function isExpoHosted() {var hostUri = getHostUri();return !!(hostUri && (/^(.*\.)?(expo\.io|exp\.host|exp\.direct|expo\.test)(:.*)?(\/.*)?$/.test(hostUri) || manifest.developer));}function removeScheme(url) {return url.replace(/^[a-zA-Z0-9+.-]+:\/\//, '');}function removePort(url) {return url.replace(/(?=([a-zA-Z0-9+.-]+:\/\/)?[^/]):\d+/, '');}function removeLeadingSlash(url) {return url.replace(/^\//, '');}function removeTrailingSlashAndQueryString(url) {return url.replace(/\/?\?.*$/, '');}function ensureLeadingSlash(input, shouldAppend) {var hasSlash = input.endsWith('/');if (hasSlash && !shouldAppend) {return input.substring(0, input.length - 1);} else if (!hasSlash && shouldAppend) {return input + "/";}return input;}function ensureTrailingSlash(input, shouldAppend) {var hasSlash = input.startsWith('/');if (hasSlash && !shouldAppend) {return input.substring(1);} else if (!hasSlash && shouldAppend) {return "/" + input;}return input;}function makeUrl() {var _manifest$scheme, _manifest$detach;var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};if (_reactNative.Platform.OS === 'web') {if (!_ExecutionEnvironment.canUseDOM) return '';var origin = ensureLeadingSlash(window.location.origin, false);var _queryString = _qs.default.stringify(queryParams);if (_queryString) {_queryString = "?" + _queryString;}var outputPath = path;if (outputPath) outputPath = ensureTrailingSlash(path, true);return encodeURI("" + origin + outputPath + _queryString);}if (!_expoConstants.default.manifest) {console.warn('Linking.makeUrl is not supported in bare workflow. Switch to using your scheme string directly.');return '';}var scheme = 'exp';var manifestScheme = (_manifest$scheme = manifest.scheme) != null ? _manifest$scheme : manifest == null ? void 0 : (_manifest$detach = manifest.detach) == null ? void 0 : _manifest$detach.scheme;if (_expoConstants.default.appOwnership === 'standalone' && manifestScheme) {scheme = manifestScheme;} else if (_expoConstants.default.appOwnership === 'standalone' && !manifestScheme) {throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');} else if (_expoConstants.default.appOwnership === 'expo' && !manifestScheme) {console.warn('Linking requires that you provide a `scheme` in app.json for standalone apps - if it is left blank, your app may crash. The scheme does not apply to development in the Expo client but you should add it as soon as you start working with Linking to avoid creating a broken build. Add a `scheme` to silence this warning. Learn more about Linking at https://docs.expo.io/versions/latest/workflow/linking/');}var hostUri = getHostUri() || '';if (usesCustomScheme() && isExpoHosted()) {hostUri = '';}if (path) {if (isExpoHosted() && hostUri) {path = "/--/" + removeLeadingSlash(path);}if (!path.startsWith('/')) {path = "/" + path;}} else {path = '';}var queryString = '';var queryStringMatchResult = hostUri.match(/(.*)\?(.+)/);if (queryStringMatchResult) {hostUri = queryStringMatchResult[1];queryString = queryStringMatchResult[2];var paramsFromHostUri = {};try {var parsedParams = _qs.default.parse(queryString);if (typeof parsedParams === 'object') {paramsFromHostUri = parsedParams;}} catch (e) {}queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);}queryString = _qs.default.stringify(queryParams);if (queryString) {queryString = "?" + queryString;}hostUri = ensureTrailingSlash(hostUri, false);return encodeURI(scheme + "://" + hostUri + path + queryString);}function parse(url) {validateURL(url);var parsed = (0, _urlParse.default)(url, true);for (var param in parsed.query) {parsed.query[param] = decodeURIComponent(parsed.query[param]);}var queryParams = parsed.query;var hostUri = getHostUri() || '';var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));var path = parsed.pathname || null;var hostname = parsed.hostname || null;var scheme = parsed.protocol || null;if (scheme) {scheme = scheme.substring(0, scheme.length - 1);}if (path) {path = removeLeadingSlash(path);var expoPrefix = null;if (hostUriStripped) {var parts = hostUriStripped.split('/');expoPrefix = parts.slice(1).concat(['--/']).join('/');}if (isExpoHosted() && !usesCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {path = path.substring(expoPrefix.length);hostname = null;} else if (path.indexOf('+') > -1) {path = path.substring(path.indexOf('+') + 1);}}return { hostname: hostname, path: path, queryParams: queryParams, scheme: scheme };}function addEventListener(type, handler) {_ExpoLinking.default.addEventListener(type, handler);}function removeEventListener(type, handler) {_ExpoLinking.default.removeEventListener(type, handler);}function parseInitialURLAsync() {var initialUrl;return _regenerator.default.async(function parseInitialURLAsync$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return _regenerator.default.awrap(_ExpoLinking.default.getInitialURL());case 2:initialUrl = _context.sent;if (initialUrl) {_context.next = 5;break;}return _context.abrupt("return", { scheme: null, hostname: null, path: null, queryParams: null });case 5:return _context.abrupt("return", parse(initialUrl));case 6:case "end":return _context.stop();}}}, null, null, null, Promise);}function sendIntent(action, extras) {return _regenerator.default.async(function sendIntent$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (!(_reactNative.Platform.OS === 'android')) {_context2.next = 4;break;}_context2.next = 3;return _regenerator.default.awrap(_ExpoLinking.default.sendIntent(action, extras));case 3:return _context2.abrupt("return", _context2.sent);case 4:throw new _core.UnavailabilityError('Linking', 'sendIntent');case 5:case "end":return _context2.stop();}}}, null, null, null, Promise);}function openSettings() {return _regenerator.default.async(function openSettings$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:if (!(_reactNative.Platform.OS === 'web')) {_context3.next = 2;break;}throw new _core.UnavailabilityError('Linking', 'openSettings');case 2:if (!_ExpoLinking.default.openSettings) {_context3.next = 6;break;}_context3.next = 5;return _regenerator.default.awrap(_ExpoLinking.default.openSettings());case 5:return _context3.abrupt("return", _context3.sent);case 6:_context3.next = 8;return _regenerator.default.awrap(openURL('app-settings:'));case 8:case "end":return _context3.stop();}}}, null, null, null, Promise);}function getInitialURL() {var _await$NativeLinking$;return _regenerator.default.async(function getInitialURL$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.next = 2;return _regenerator.default.awrap(_ExpoLinking.default.getInitialURL());case 2:_context4.t0 = _await$NativeLinking$ = _context4.sent;if (!(_context4.t0 != null)) {_context4.next = 7;break;}_context4.t1 = _await$NativeLinking$;_context4.next = 8;break;case 7:_context4.t1 = null;case 8:return _context4.abrupt("return", _context4.t1);case 9:case "end":return _context4.stop();}}}, null, null, null, Promise);}function openURL(url) {return _regenerator.default.async(function openURL$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:validateURL(url);_context5.next = 3;return _regenerator.default.awrap(_ExpoLinking.default.openURL(url));case 3:return _context5.abrupt("return", _context5.sent);case 4:case "end":return _context5.stop();}}}, null, null, null, Promise);}function canOpenURL(url) {return _regenerator.default.async(function canOpenURL$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:validateURL(url);_context6.next = 3;return _regenerator.default.awrap(_ExpoLinking.default.canOpenURL(url));case 3:return _context6.abrupt("return", _context6.sent);case 4:case "end":return _context6.stop();}}}, null, null, null, Promise);}function useUrl() {var _useState = (0, _react.useState)(null),_useState2 = (0, _slicedToArray2.default)(_useState, 2),url = _useState2[0],setLink = _useState2[1];function onChange(event) {setLink(event.url);}(0, _react.useEffect)(function () {getInitialURL().then(function (url) {return setLink(url);});addEventListener('url', onChange);return function () {return removeEventListener('url', onChange);};}, []);return url;}