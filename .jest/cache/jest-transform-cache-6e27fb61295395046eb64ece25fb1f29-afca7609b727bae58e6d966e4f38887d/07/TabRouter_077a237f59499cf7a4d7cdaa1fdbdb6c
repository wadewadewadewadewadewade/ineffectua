db1d570b289b7351a7a64ec5e6bd00b5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = TabRouter;
exports.TabActions = void 0;



var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var TYPE_ROUTE = 'route';
var TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params } };


  } };


exports.TabActions = TabActions;

var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key }];

  var initialRouteIndex;

  switch (backBehavior) {
    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key });

      }

      break;

    case 'initialRoute':
      initialRouteIndex = routes.findIndex(function (route) {return route.name === initialRouteName;});
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;

      if (initialRouteIndex !== index) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[initialRouteIndex].key });

      }

      break;

    case 'history':

      break;}


  return history;
};

var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {
  var history;

  if (backBehavior === 'history') {
    var currentKey = state.routes[index].key;
    history = state.history.filter(function (it) {return it.type === 'route' ? it.key !== currentKey : false;}).concat({
      type: TYPE_ROUTE,
      key: currentKey });

  } else {
    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }

  return _objectSpread(_objectSpread({}, state), {}, {
    index: index,
    history: history });

};

function TabRouter(_ref)


{var initialRouteName = _ref.initialRouteName,_ref$backBehavior = _ref.backBehavior,backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;
  var router = _objectSpread(_objectSpread({}, _BaseRouter.default), {}, {
    type: 'tab',

    getInitialState: function getInitialState(_ref2)


    {var routeNames = _ref2.routeNames,routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {return {
          name: name,
          key: "".concat(name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          params: routeParamList[name] };});

      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: 'tab',
        key: "tab-".concat((0, require("nanoid/non-secure").nanoid)()),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes };

    },

    getRehydratedState: function getRehydratedState(partialState, _ref3)


    {var routeNames = _ref3.routeNames,routeParamList = _ref3.routeParamList;
      var _state$routes, _state$index, _state$history$filter, _state$history;

      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {return r.name === name;});
        return _objectSpread(_objectSpread({}, route), {}, {
          name: name,
          key: route && route.name === name && route.key ? route.key : "".concat(name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined });

      });
      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);
      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {return routes.find(function (r) {return r.key === it.key;});})) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];
      return changeIndex({
        stale: false,
        type: 'tab',
        key: "tab-".concat((0, require("nanoid/non-secure").nanoid)()),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes },
      index, backBehavior, initialRouteName);
    },

    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4)


    {var routeNames = _ref4.routeNames,routeParamList = _ref4.routeParamList;
      var routes = routeNames.map(function (name) {return state.routes.find(function (r) {return r.name === name;}) || {
          name: name,
          key: "".concat(name, "-").concat((0, require("nanoid/non-secure").nanoid)()),
          params: routeParamList[name] };});

      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(
      function (it) {return it.type !== 'route' || routes.find(function (r) {return r.key === it.key;});});

      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      }

      return _objectSpread(_objectSpread({}, state), {}, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index });

    },

    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {return r.key === key;});

      if (index === -1 || index === state.index) {
        return state;
      }

      return changeIndex(state, index, backBehavior, initialRouteName);
    },

    getStateForAction: function getStateForAction(state, action) {
      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
          {
            var index = -1;

            if (action.type === 'NAVIGATE' && action.payload.key) {
              index = state.routes.findIndex(function (route) {return route.key === action.payload.key;});
            } else {
              index = state.routes.findIndex(function (route) {return route.name === action.payload.name;});
            }

            if (index === -1) {
              return null;
            }

            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {
              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {return i === index ? _objectSpread(_objectSpread({}, route), {}, {
                  params: _objectSpread(_objectSpread({}, route.params), action.payload.params) }) :
                route;}) : state.routes }),
            index, backBehavior, initialRouteName);
          }

        case 'GO_BACK':
          {
            if (state.history.length === 1) {
              return null;
            }

            var previousKey = state.history[state.history.length - 2].key;
            var _index = state.routes.findIndex(function (route) {return route.key === previousKey;});

            if (_index === -1) {
              return null;
            }

            return _objectSpread(_objectSpread({}, state), {}, {
              history: state.history.slice(0, -1),
              index: _index });

          }

        default:
          return _BaseRouter.default.getStateForAction(state, action);}

    },

    shouldActionChangeFocus: function shouldActionChangeFocus(action) {
      return action.type === 'NAVIGATE';
    },

    actionCreators: TabActions });


  return router;
}