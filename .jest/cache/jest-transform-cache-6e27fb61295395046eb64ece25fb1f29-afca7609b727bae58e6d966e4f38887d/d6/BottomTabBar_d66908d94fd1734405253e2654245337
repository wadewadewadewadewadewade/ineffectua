2b1d83a2e482e851a7062c0de29e6ff7
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var _react = _interopRequireDefault(require("react"));



var _reactNativeSafeAreaView = _interopRequireDefault(require("react-native-safe-area-view"));



var _CrossFadeIcon = _interopRequireDefault(require("./CrossFadeIcon"));

var _withDimensions = _interopRequireDefault(require("../utils/withDimensions"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}

function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

var majorVersion = parseInt(require("react-native").Platform.Version, 10);
var isIos = require("react-native").Platform.OS === 'ios';
var isIOS11 = majorVersion >= 11 && isIos;
var DEFAULT_MAX_TAB_ITEM_WIDTH = 125;
var DEFAULT_KEYBOARD_ANIMATION_CONFIG = {
  show: {
    animation: 'timing',
    config: {
      useNativeDriver: true,
      duration: 150 } },


  hide: {
    animation: 'timing',
    config: {
      useNativeDriver: true,
      duration: 100 } } };var




TouchableWithoutFeedbackWrapper = function (_react$default$Compon) {require("@babel/runtime/helpers/inherits")(TouchableWithoutFeedbackWrapper, _react$default$Compon);var _super = _createSuper(TouchableWithoutFeedbackWrapper);function TouchableWithoutFeedbackWrapper() {require("@babel/runtime/helpers/classCallCheck")(this, TouchableWithoutFeedbackWrapper);return _super.apply(this, arguments);}require("@babel/runtime/helpers/createClass")(TouchableWithoutFeedbackWrapper, [{ key: "render", value: function render()
    {
      var _this$props = this.props,


      route =








      _this$props.route,focused = _this$props.focused,onPress = _this$props.onPress,onLongPress = _this$props.onLongPress,testID = _this$props.testID,accessibilityLabel = _this$props.accessibilityLabel,accessibilityRole = _this$props.accessibilityRole,accessibilityStates = _this$props.accessibilityStates,
      rest = _objectWithoutProperties(_this$props, ["route", "focused", "onPress", "onLongPress", "testID", "accessibilityLabel", "accessibilityRole", "accessibilityStates"]);

      return _react.default.createElement(require("react-native").TouchableWithoutFeedback, {
        onPress: onPress,
        onLongPress: onLongPress,
        testID: testID,
        hitSlop: {
          left: 15,
          right: 15,
          top: 0,
          bottom: 5 },

        accessibilityLabel: accessibilityLabel,
        accessibilityRole: accessibilityRole,
        accessibilityStates: accessibilityStates },
      _react.default.createElement(require("react-native").View, rest));
    } }]);return TouchableWithoutFeedbackWrapper;}(_react.default.Component);var



TabBarBottom = function (_react$default$Compon2) {require("@babel/runtime/helpers/inherits")(TabBarBottom, _react$default$Compon2);var _super2 = _createSuper(TabBarBottom);
  function TabBarBottom() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, TabBarBottom);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super2.call.apply(_super2, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "state", {
      layout: {
        height: 0,
        width: 0 },

      keyboard: false,
      visible: new (require("react-native").Animated.Value)(1) });


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "context", void 0);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getKeyboardAnimationConfigByType", function (type) {var

      keyboardHidesTabBarAnimationConfig =
      _this.props.keyboardHidesTabBarAnimationConfig;
      var defaultKeyboardAnimationConfig = DEFAULT_KEYBOARD_ANIMATION_CONFIG[type];
      var keyboardAnimationConfig = (keyboardHidesTabBarAnimationConfig === null || keyboardHidesTabBarAnimationConfig === void 0 ? void 0 : keyboardHidesTabBarAnimationConfig[type]) || defaultKeyboardAnimationConfig;

      if (keyboardAnimationConfig && keyboardAnimationConfig.animation === 'timing') {
        return _objectSpread({}, defaultKeyboardAnimationConfig, {}, keyboardAnimationConfig, {
          config: _objectSpread({}, defaultKeyboardAnimationConfig.config, {}, keyboardAnimationConfig.config) });

      }

      return keyboardAnimationConfig;
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleKeyboardShow", function () {
      _this.setState({
        keyboard: true },
      function () {var _this$_getKeyboardAni =



        _this._getKeyboardAnimationConfigByType('show'),animation = _this$_getKeyboardAni.animation,config = _this$_getKeyboardAni.config;

        require("react-native").Animated[animation](_this.state.visible, _objectSpread({
          toValue: 0 },
        config)).start();
      });
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleKeyboardHide", function () {var _this$_getKeyboardAni2 =



      _this._getKeyboardAnimationConfigByType('hide'),animation = _this$_getKeyboardAni2.animation,config = _this$_getKeyboardAni2.config;

      require("react-native").Animated[animation](_this.state.visible, _objectSpread({
        toValue: 1 },
      config)).start(function () {
        _this.setState({
          keyboard: false });

      });
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleLayout", function (e) {var

      layout =
      _this.state.layout;var _e$nativeEvent$layout =



      e.nativeEvent.layout,height = _e$nativeEvent$layout.height,width = _e$nativeEvent$layout.width;

      if (height === layout.height && width === layout.width) {
        return;
      }

      _this.setState({
        layout: {
          height: height,
          width: width } });


    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getActiveTintColor", function () {var

      activeTintColor =
      _this.props.activeTintColor;

      if (!activeTintColor) {
        return;
      } else if (typeof activeTintColor === 'string') {
        return activeTintColor;
      }

      return activeTintColor[_this.context];
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getInactiveTintColor", function () {var

      inactiveTintColor =
      _this.props.inactiveTintColor;

      if (!inactiveTintColor) {
        return;
      } else if (typeof inactiveTintColor === 'string') {
        return inactiveTintColor;
      }

      return inactiveTintColor[_this.context];
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getActiveBackgroundColor", function () {var

      activeBackgroundColor =
      _this.props.activeBackgroundColor;

      if (!activeBackgroundColor) {
        return;
      } else if (typeof activeBackgroundColor === 'string') {
        return activeBackgroundColor;
      }

      return activeBackgroundColor[_this.context];
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getInactiveBackgroundColor", function () {var

      inactiveBackgroundColor =
      _this.props.inactiveBackgroundColor;

      if (!inactiveBackgroundColor) {
        return;
      } else if (typeof inactiveBackgroundColor === 'string') {
        return inactiveBackgroundColor;
      }

      return inactiveBackgroundColor[_this.context];
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_renderLabel", function (_ref)


    {var route = _ref.route,focused = _ref.focused;var _this$props2 =





      _this.props,labelStyle = _this$props2.labelStyle,showLabel = _this$props2.showLabel,showIcon = _this$props2.showIcon,allowFontScaling = _this$props2.allowFontScaling;

      if (showLabel === false) {
        return null;
      }

      var activeTintColor = _this._getActiveTintColor();

      var inactiveTintColor = _this._getInactiveTintColor();

      var label = _this.props.getLabelText({
        route: route });

      var tintColor = focused ? activeTintColor : inactiveTintColor;

      var horizontal = _this._shouldUseHorizontalLabels();

      if (typeof label === 'string') {
        return _react.default.createElement(require("react-native").Animated.Text, {
          numberOfLines: 1,
          style: [styles.label, {
            color: tintColor },
          showIcon && horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],
          allowFontScaling: allowFontScaling },
        label);
      }

      if (typeof label === 'function') {
        return label({
          focused: focused,
          tintColor: tintColor,
          orientation: horizontal ? 'horizontal' : 'vertical' });

      }

      return label;
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_renderIcon", function (_ref2)


    {var route = _ref2.route,focused = _ref2.focused;var _this$props3 =




      _this.props,renderIcon = _this$props3.renderIcon,showIcon = _this$props3.showIcon,showLabel = _this$props3.showLabel;

      if (showIcon === false) {
        return null;
      }

      var horizontal = _this._shouldUseHorizontalLabels();

      var activeTintColor = _this._getActiveTintColor();

      var inactiveTintColor = _this._getInactiveTintColor();

      var activeOpacity = focused ? 1 : 0;
      var inactiveOpacity = focused ? 0 : 1;
      return _react.default.createElement(_CrossFadeIcon.default, {
        route: route,
        horizontal: horizontal,
        activeOpacity: activeOpacity,
        inactiveOpacity: inactiveOpacity,
        activeTintColor: activeTintColor,
        inactiveTintColor: inactiveTintColor,
        renderIcon: renderIcon,
        style: [styles.iconWithExplicitHeight, showLabel === false && !horizontal && styles.iconWithoutLabel, showLabel !== false && !horizontal && styles.iconWithLabel] });

    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_shouldUseHorizontalLabels", function () {var

      routes =
      _this.props.navigation.state.routes;var _this$props4 =






      _this.props,isLandscape = _this$props4.isLandscape,dimensions = _this$props4.dimensions,adaptive = _this$props4.adaptive,tabStyle = _this$props4.tabStyle,labelPosition = _this$props4.labelPosition;

      if (labelPosition) {
        var position;

        if (typeof labelPosition === 'string') {
          position = labelPosition;
        } else {
          position = labelPosition({
            deviceOrientation: isLandscape ? 'horizontal' : 'vertical' });

        }

        if (position) {
          return position === 'beside-icon';
        }
      }

      if (!adaptive) {
        return false;
      }


      if (require("react-native").Platform.isPad) {
        var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;

        var flattenedStyle = require("react-native").StyleSheet.flatten(tabStyle);

        if (flattenedStyle) {
          if (typeof flattenedStyle.width === 'number') {
            maxTabItemWidth = flattenedStyle.width;
          } else if (typeof flattenedStyle.maxWidth === 'number') {
            maxTabItemWidth = flattenedStyle.maxWidth;
          }
        }

        return routes.length * maxTabItemWidth <= dimensions.width;
      } else {
        return isLandscape;
      }
    });return _this;
  }require("@babel/runtime/helpers/createClass")(TabBarBottom, [{ key: "componentDidMount", value: function componentDidMount()

    {
      if (require("react-native").Platform.OS === 'ios') {
        require("react-native").Keyboard.addListener('keyboardWillShow', this._handleKeyboardShow);

        require("react-native").Keyboard.addListener('keyboardWillHide', this._handleKeyboardHide);
      } else {
        require("react-native").Keyboard.addListener('keyboardDidShow', this._handleKeyboardShow);

        require("react-native").Keyboard.addListener('keyboardDidHide', this._handleKeyboardHide);
      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      if (require("react-native").Platform.OS === 'ios') {
        require("react-native").Keyboard.removeListener('keyboardWillShow', this._handleKeyboardShow);

        require("react-native").Keyboard.removeListener('keyboardWillHide', this._handleKeyboardHide);
      } else {
        require("react-native").Keyboard.removeListener('keyboardDidShow', this._handleKeyboardShow);

        require("react-native").Keyboard.removeListener('keyboardDidHide', this._handleKeyboardHide);
      }
    } }, { key: "render", value: function render()


    {var _this2 = this;var _this$props5 =








      this.props,navigation = _this$props5.navigation,keyboardHidesTabBar = _this$props5.keyboardHidesTabBar,onTabPress = _this$props5.onTabPress,onTabLongPress = _this$props5.onTabLongPress,safeAreaInset = _this$props5.safeAreaInset,style = _this$props5.style,tabStyle = _this$props5.tabStyle;var

      routes =
      navigation.state.routes;
      var isDark = this.context === 'dark';

      var activeBackgroundColor = this._getActiveBackgroundColor();

      var inactiveBackgroundColor = this._getInactiveBackgroundColor();

      var _StyleSheet$flatten = require("react-native").StyleSheet.flatten(style || {}),

      position =











      _StyleSheet$flatten.position,top = _StyleSheet$flatten.top,_StyleSheet$flatten$l = _StyleSheet$flatten.left,left = _StyleSheet$flatten$l === void 0 ? 0 : _StyleSheet$flatten$l,_StyleSheet$flatten$b = _StyleSheet$flatten.bottom,bottom = _StyleSheet$flatten$b === void 0 ? 0 : _StyleSheet$flatten$b,_StyleSheet$flatten$r = _StyleSheet$flatten.right,right = _StyleSheet$flatten$r === void 0 ? 0 : _StyleSheet$flatten$r,margin = _StyleSheet$flatten.margin,marginTop = _StyleSheet$flatten.marginTop,marginLeft = _StyleSheet$flatten.marginLeft,marginBottom = _StyleSheet$flatten.marginBottom,marginRight = _StyleSheet$flatten.marginRight,marginHorizontal = _StyleSheet$flatten.marginHorizontal,marginVertical = _StyleSheet$flatten.marginVertical,
      innerStyle = _objectWithoutProperties(_StyleSheet$flatten, ["position", "top", "left", "bottom", "right", "margin", "marginTop", "marginLeft", "marginBottom", "marginRight", "marginHorizontal", "marginVertical"]);

      var containerStyle = {
        position: position,
        top: top,
        left: left,
        bottom: bottom,
        right: right,
        margin: margin,
        marginTop: marginTop,
        marginLeft: marginLeft,
        marginBottom: marginBottom,
        marginRight: marginRight,
        marginHorizontal: marginHorizontal,
        marginVertical: marginVertical };

      var tabBarStyle = [styles.tabBar, isDark ? styles.tabBarDark : styles.tabBarLight,
      this._shouldUseHorizontalLabels() && !require("react-native").Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, innerStyle];
      return _react.default.createElement(require("react-native").Animated.View, {
        style: [styles.container, containerStyle, keyboardHidesTabBar ? {

          transform: [{
            translateY: this.state.visible.interpolate({
              inputRange: [0, 1],
              outputRange: [this.state.layout.height, 0] }) }],




          position: this.state.keyboard ? 'absolute' : position } :
        null],
        pointerEvents: keyboardHidesTabBar && this.state.keyboard ? 'none' : 'auto',
        onLayout: this._handleLayout },
      _react.default.createElement(_reactNativeSafeAreaView.default, {
        style: tabBarStyle,
        forceInset: safeAreaInset },
      routes.map(function (route, index) {
        var focused = index === navigation.state.index;
        var scene = {
          route: route,
          focused: focused };

        var accessibilityLabel = _this2.props.getAccessibilityLabel({
          route: route });

        var accessibilityRole = _this2.props.getAccessibilityRole({
          route: route });

        var accessibilityStates = _this2.props.getAccessibilityStates(scene);
        var testID = _this2.props.getTestID({
          route: route });

        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
        var ButtonComponent = _this2.props.getButtonComponent({
          route: route }) ||
        TouchableWithoutFeedbackWrapper;
        return _react.default.createElement(ButtonComponent, {
          key: route.key,
          route: route,
          focused: focused,
          onPress: function onPress() {return onTabPress({
              route: route });},

          onLongPress: function onLongPress() {return onTabLongPress({
              route: route });},

          testID: testID,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: accessibilityRole,
          accessibilityStates: accessibilityStates,
          style: [styles.tab, {
            backgroundColor: backgroundColor },
          _this2._shouldUseHorizontalLabels() ? styles.tabLandscape : styles.tabPortrait, tabStyle] },
        _this2._renderIcon(scene), _this2._renderLabel(scene));
      })));
    } }]);return TabBarBottom;}(_react.default.Component);



_defineProperty(TabBarBottom, "defaultProps", {
  keyboardHidesTabBar: true,
  keyboardHidesTabBarAnimationConfig: DEFAULT_KEYBOARD_ANIMATION_CONFIG,
  activeTintColor: {
    light: '#007AFF',
    dark: '#fff' },

  inactiveTintColor: {
    light: '#8e8e93',
    dark: '#7f7f7f' },

  activeBackgroundColor: 'transparent',
  inactiveBackgroundColor: 'transparent',
  showLabel: true,
  showIcon: true,
  allowFontScaling: true,
  adaptive: isIOS11,
  safeAreaInset: {
    bottom: 'always',
    top: 'never' } });



_defineProperty(TabBarBottom, "contextType", require("react-navigation").ThemeContext);

var DEFAULT_HEIGHT = 49;
var COMPACT_HEIGHT = 29;

var styles = require("react-native").StyleSheet.create({
  tabBar: {
    borderTopWidth: require("react-native").StyleSheet.hairlineWidth,
    flexDirection: 'row' },

  tabBarLight: {
    backgroundColor: require("react-navigation").ThemeColors.light.header,
    borderTopColor: require("react-navigation").ThemeColors.light.headerBorder },

  tabBarDark: {
    backgroundColor: require("react-navigation").ThemeColors.dark.header,
    borderTopColor: require("react-navigation").ThemeColors.dark.headerBorder },

  container: {
    elevation: 8 },

  tabBarCompact: {
    height: COMPACT_HEIGHT },

  tabBarRegular: {
    height: DEFAULT_HEIGHT },

  tab: {
    flex: 1,
    alignItems: isIos ? 'center' : 'stretch' },

  tabPortrait: {
    justifyContent: 'flex-end',
    flexDirection: 'column' },

  tabLandscape: {
    justifyContent: 'center',
    flexDirection: 'row' },

  iconWithoutLabel: {
    flex: 1 },

  iconWithLabel: {
    flex: 1 },

  iconWithExplicitHeight: {

    height: require("react-native").Platform.isPad ? DEFAULT_HEIGHT : COMPACT_HEIGHT },

  label: {
    textAlign: 'center',
    backgroundColor: 'transparent' },

  labelBeneath: {
    fontSize: 11,
    marginBottom: 1.5 },

  labelBeside: {
    fontSize: 12,
    marginLeft: 20 } });



var _default = (0, _withDimensions.default)(TabBarBottom);

exports.default = _default;