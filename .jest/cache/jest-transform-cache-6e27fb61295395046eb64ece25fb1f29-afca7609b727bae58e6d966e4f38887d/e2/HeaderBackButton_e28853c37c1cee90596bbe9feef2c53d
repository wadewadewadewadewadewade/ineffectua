3d49772d138ae25795c627d5a4b9299d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = HeaderBackButton;

var React = _interopRequireWildcard(require("react"));





var _MaskedView = _interopRequireDefault(require("../MaskedView"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}

function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

function HeaderBackButton(_ref)















{var disabled = _ref.disabled,allowFontScaling = _ref.allowFontScaling,backImage = _ref.backImage,label = _ref.label,labelStyle = _ref.labelStyle,_ref$labelVisible = _ref.labelVisible,labelVisible = _ref$labelVisible === void 0 ? require("react-native").Platform.OS === 'ios' : _ref$labelVisible,onLabelLayout = _ref.onLabelLayout,onPress = _ref.onPress,customPressColorAndroid = _ref.pressColorAndroid,screenLayout = _ref.screenLayout,customTintColor = _ref.tintColor,titleLayout = _ref.titleLayout,_ref$truncatedLabel = _ref.truncatedLabel,truncatedLabel = _ref$truncatedLabel === void 0 ? 'Back' : _ref$truncatedLabel,_ref$accessibilityLab = _ref.accessibilityLabel,accessibilityLabel = _ref$accessibilityLab === void 0 ? label && label !== 'Back' ? "".concat(label, ", back") : 'Go back' : _ref$accessibilityLab,style = _ref.style;var _ref2 =



  (0, require("@react-navigation/native").useTheme)(),dark = _ref2.dark,colors = _ref2.colors;var _React$useState =
  React.useState(undefined),_React$useState2 = require("@babel/runtime/helpers/slicedToArray")(_React$useState, 2),initialLabelWidth = _React$useState2[0],setInitialLabelWidth = _React$useState2[1];
  var tintColor = customTintColor !== undefined ? customTintColor : require("react-native").Platform.select({
    ios: colors.primary,
    default: colors.text });

  var pressColorAndroid = customPressColorAndroid !== undefined ? customPressColorAndroid : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';

  var handleLabelLayout = function handleLabelLayout(e) {
    onLabelLayout === null || onLabelLayout === void 0 ? void 0 : onLabelLayout(e);
    setInitialLabelWidth(e.nativeEvent.layout.x + e.nativeEvent.layout.width);
  };

  var shouldTruncateLabel = function shouldTruncateLabel() {
    return !label || initialLabelWidth && titleLayout && screenLayout && (screenLayout.width - titleLayout.width) / 2 < initialLabelWidth + 26;
  };

  var renderBackImage = function renderBackImage() {
    if (backImage) {
      return backImage({
        tintColor: tintColor });

    } else {
      return React.createElement(require("react-native").Image, {
        style: [styles.icon, Boolean(labelVisible) && styles.iconWithLabel, Boolean(tintColor) && {
          tintColor: tintColor }],

        source: require('../assets/back-icon.png'),
        fadeDuration: 0 });

    }
  };

  var renderLabel = function renderLabel() {
    var leftLabelText = shouldTruncateLabel() ? truncatedLabel : label;

    if (!labelVisible || leftLabelText === undefined) {
      return null;
    }

    var labelElement = React.createElement(require("react-native").View, {
      style: screenLayout ?

      [styles.labelWrapper, {
        minWidth: screenLayout.width / 2 - 27 }] :
      null },
    React.createElement(require("react-native").Animated.Text, {
      accessible: false,
      onLayout:

      leftLabelText === label ? handleLabelLayout : undefined,
      style: [styles.label, tintColor ? {
        color: tintColor } :
      null, labelStyle],
      numberOfLines: 1,
      allowFontScaling: !!allowFontScaling },
    leftLabelText));

    if (backImage || require("react-native").Platform.OS !== 'ios') {


      return labelElement;
    }

    return React.createElement(_MaskedView.default, {
      maskElement: React.createElement(require("react-native").View, {
        style: styles.iconMaskContainer },
      React.createElement(require("react-native").Image, {
        source: require('../assets/back-icon-mask.png'),
        style: styles.iconMask }),
      React.createElement(require("react-native").View, {
        style: styles.iconMaskFillerRect })) },

    labelElement);
  };

  var handlePress = function handlePress() {return onPress && requestAnimationFrame(onPress);};

  return React.createElement(require("../TouchableItem").TouchableItem, {
    disabled: disabled,
    accessible: true,
    accessibilityRole: "button",
    accessibilityComponentType: "button",
    accessibilityLabel: accessibilityLabel,
    accessibilityTraits: "button",
    testID: "header-back",
    delayPressIn: 0,
    onPress: disabled ? undefined : handlePress,
    pressColor: pressColorAndroid,
    style: [styles.container, disabled && styles.disabled, style],
    hitSlop: require("react-native").Platform.select({
      ios: undefined,
      default: {
        top: 16,
        right: 16,
        bottom: 16,
        left: 16 } }),


    borderless: true },
  React.createElement(React.Fragment, null, renderBackImage(), renderLabel()));
}

var styles = require("react-native").StyleSheet.create({
  container: _objectSpread({
    alignItems: 'center',
    flexDirection: 'row' },
  require("react-native").Platform.select({
    ios: null,
    default: {
      marginVertical: 3,
      marginHorizontal: 11 } })),


  disabled: {
    opacity: 0.5 },

  label: {
    fontSize: 17,


    letterSpacing: 0.35 },

  labelWrapper: {


    flexDirection: 'row',
    alignItems: 'flex-start' },

  icon: require("react-native").Platform.select({
    ios: {
      height: 21,
      width: 13,
      marginLeft: 8,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: require("react-native").I18nManager.isRTL ? -1 : 1 }] },


    default: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      transform: [{
        scaleX: require("react-native").I18nManager.isRTL ? -1 : 1 }] } }),



  iconWithLabel: require("react-native").Platform.OS === 'ios' ? {
    marginRight: 6 } :
  {},
  iconMaskContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center' },

  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: '#000' },

  iconMask: {
    height: 21,
    width: 13,
    marginLeft: -14.5,
    marginVertical: 12,
    alignSelf: 'center',
    resizeMode: 'contain',
    transform: [{
      scaleX: require("react-native").I18nManager.isRTL ? -1 : 1 }] } });