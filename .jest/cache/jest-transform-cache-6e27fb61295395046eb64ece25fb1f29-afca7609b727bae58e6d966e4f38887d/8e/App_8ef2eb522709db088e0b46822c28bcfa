cbcf90cebb1921046e8f873762ddc9ec
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_redux_1 = require("react-redux");
const redux_1 = require("redux");
const reducers_1 = __importDefault(require("../reducers"));
const middleware_1 = __importDefault(require("../middleware"));
const react_native_1 = require("react-native");
// eslint-disable-next-line import/no-unresolved
const react_native_screens_1 = require("react-native-screens");
const MaterialIcons_1 = __importDefault(require("react-native-vector-icons/MaterialIcons"));
const react_native_paper_1 = require("react-native-paper");
const native_1 = require("@react-navigation/native");
const drawer_1 = require("@react-navigation/drawer");
const stack_1 = require("@react-navigation/stack");
const devtools_1 = require("@react-navigation/devtools");
const Restart_1 = require("./Restart");
const AsyncStorage_1 = __importDefault(require("./AsyncStorage"));
const LinkingPrefixes_1 = __importDefault(require("./LinkingPrefixes"));
const SettingsItem_1 = __importDefault(require("./shared/SettingsItem"));
const SimpleStack_1 = __importDefault(require("./screens/SimpleStack"));
const ModalPresentationStack_1 = __importDefault(require("./screens/ModalPresentationStack"));
const StackTransparent_1 = __importDefault(require("./screens/StackTransparent"));
const StackHeaderCustomization_1 = __importDefault(require("./screens/StackHeaderCustomization"));
const MaterialBottomTabs_1 = __importDefault(require("./screens/MaterialBottomTabs"));
const NotFound_1 = __importDefault(require("./screens/NotFound"));
const MasterDetail_1 = __importDefault(require("./screens/MasterDetail"));
const AuthFlow_1 = __importDefault(require("./screens/AuthFlow"));
const LinkComponent_1 = __importDefault(require("./screens/LinkComponent"));
const store = redux_1.createStore(reducers_1.default, middleware_1.default);
react_native_1.YellowBox.ignoreWarnings(['Require cycle:', 'Warning: Async Storage']);
react_native_screens_1.enableScreens();
const SCREENS = {
    SimpleStack: { title: 'Simple Stack', component: SimpleStack_1.default },
    ModalPresentationStack: {
        title: 'Modal Presentation Stack',
        component: ModalPresentationStack_1.default,
    },
    StackTransparent: {
        title: 'Transparent Stack',
        component: StackTransparent_1.default,
    },
    StackHeaderCustomization: {
        title: 'Header Customization in Stack',
        component: StackHeaderCustomization_1.default,
    },
    MaterialBottomTabs: {
        title: 'Material Bottom Tabs',
        component: MaterialBottomTabs_1.default,
    },
    MasterDetail: {
        title: 'Master Detail',
        component: MasterDetail_1.default,
    },
    AuthFlow: {
        title: 'Auth Flow',
        component: AuthFlow_1.default,
    },
    LinkComponent: {
        title: '<Link />',
        component: LinkComponent_1.default,
    },
};
const Drawer = drawer_1.createDrawerNavigator();
const Stack = stack_1.createStackNavigator();
const NAVIGATION_PERSISTENCE_KEY = 'NAVIGATION_STATE';
const THEME_PERSISTENCE_KEY = 'THEME_TYPE';
function App() {
    const [theme, setTheme] = React.useState(native_1.DefaultTheme);
    const [isReady, setIsReady] = React.useState(react_native_1.Platform.OS === 'web');
    const [initialState, setInitialState] = React.useState();
    React.useEffect(() => {
        const restoreState = async () => {
            try {
                const initialUrl = await react_native_1.Linking.getInitialURL();
                if (react_native_1.Platform.OS !== 'web' || initialUrl === null) {
                    const savedState = await AsyncStorage_1.default.getItem(NAVIGATION_PERSISTENCE_KEY);
                    const state = savedState ? JSON.parse(savedState) : undefined;
                    if (state !== undefined) {
                        setInitialState(state);
                    }
                }
            }
            finally {
                try {
                    const themeName = await AsyncStorage_1.default.getItem(THEME_PERSISTENCE_KEY);
                    setTheme(themeName === 'dark' ? native_1.DarkTheme : native_1.DefaultTheme);
                }
                catch (e) {
                    // Ignore
                }
                setIsReady(true);
            }
        };
        restoreState();
    }, []);
    const paperTheme = React.useMemo(() => {
        const t = theme.dark ? react_native_paper_1.DarkTheme : react_native_paper_1.DefaultTheme;
        return {
            ...t,
            colors: {
                ...t.colors,
                ...theme.colors,
                surface: theme.colors.card,
                accent: theme.dark ? 'rgb(255, 55, 95)' : 'rgb(255, 45, 85)',
            },
        };
    }, [theme.colors, theme.dark]);
    const [dimensions, setDimensions] = React.useState(react_native_1.Dimensions.get('window'));
    React.useEffect(() => {
        const onDimensionsChange = ({ window }) => {
            setDimensions(window);
        };
        react_native_1.Dimensions.addEventListener('change', onDimensionsChange);
        return () => react_native_1.Dimensions.removeEventListener('change', onDimensionsChange);
    }, []);
    const navigationRef = React.useRef(null);
    devtools_1.useReduxDevToolsExtension(navigationRef);
    if (!isReady) {
        return null;
    }
    const isLargeScreen = dimensions.width >= 1024;
    return (React.createElement(react_redux_1.Provider, { store: store },
        React.createElement(react_native_paper_1.Provider, { theme: paperTheme },
            react_native_1.Platform.OS === 'ios' && (React.createElement(react_native_1.StatusBar, { barStyle: theme.dark ? 'light-content' : 'dark-content' })),
            React.createElement(native_1.NavigationContainer, { ref: navigationRef, initialState: initialState, onStateChange: (state) => AsyncStorage_1.default.setItem(NAVIGATION_PERSISTENCE_KEY, JSON.stringify(state)), theme: theme, linking: {
                    // To test deep linking on, run the following in the Terminal:
                    // Android: adb shell am start -a android.intent.action.VIEW -d "exp://127.0.0.1:19000/--/simple-stack"
                    // iOS: xcrun simctl openurl booted exp://127.0.0.1:19000/--/simple-stack
                    // Android (bare): adb shell am start -a android.intent.action.VIEW -d "rne://127.0.0.1:19000/--/simple-stack"
                    // iOS (bare): xcrun simctl openurl booted rne://127.0.0.1:19000/--/simple-stack
                    // The first segment of the link is the the scheme + host (returned by `Linking.makeUrl`)
                    prefixes: LinkingPrefixes_1.default,
                    config: {
                        screens: {
                            Root: {
                                path: '',
                                initialRouteName: 'Home',
                                screens: Object.keys(SCREENS).reduce((acc, name) => {
                                    // Convert screen names such as SimpleStack to kebab case (simple-stack)
                                    const path = name
                                        .replace(/([A-Z]+)/g, '-$1')
                                        .replace(/^-/, '')
                                        .toLowerCase();
                                    acc[name] = {
                                        path,
                                        screens: {
                                            Article: {
                                                path: 'article/:author?',
                                                parse: {
                                                    author: (author) => author.charAt(0).toUpperCase() +
                                                        author.slice(1).replace(/-/g, ' '),
                                                },
                                                stringify: {
                                                    author: (author) => author.toLowerCase().replace(/\s/g, '-'),
                                                },
                                            },
                                            Albums: 'music',
                                            Chat: 'chat',
                                            Contacts: 'people',
                                            NewsFeed: 'feed',
                                            Dialog: 'dialog',
                                        },
                                    };
                                    return acc;
                                }, {
                                    Home: '',
                                    NotFound: '*',
                                }),
                            },
                        },
                    },
                }, fallback: React.createElement(react_native_paper_1.Text, null, "Loading\u2026"), documentTitle: {
                    formatter: (options, route) => { var _a; return `${(_a = options === null || options === void 0 ? void 0 : options.title) !== null && _a !== void 0 ? _a : route === null || route === void 0 ? void 0 : route.name} - React Navigation Example`; },
                } },
                React.createElement(Drawer.Navigator, { drawerType: isLargeScreen ? 'permanent' : undefined },
                    React.createElement(Drawer.Screen, { name: "Root", options: {
                            title: 'Examples',
                            drawerIcon: ({ size, color }) => (React.createElement(MaterialIcons_1.default, { size: size, color: color, name: "folder" })),
                        } }, ({ navigation }) => (React.createElement(Stack.Navigator, { screenOptions: {
                            headerStyleInterpolator: stack_1.HeaderStyleInterpolators.forUIKit,
                        } },
                        React.createElement(Stack.Screen, { name: "Home", options: {
                                title: 'Examples',
                                headerLeft: isLargeScreen
                                    ? undefined
                                    : () => (React.createElement(react_native_paper_1.Appbar.Action, { color: theme.colors.text, icon: "menu", onPress: () => navigation.toggleDrawer() })),
                            } }, ({ navigation }) => (React.createElement(react_native_1.ScrollView, { style: { backgroundColor: theme.colors.background } },
                            React.createElement(SettingsItem_1.default, { label: "Right to left", value: react_native_1.I18nManager.isRTL, onValueChange: () => {
                                    react_native_1.I18nManager.forceRTL(!react_native_1.I18nManager.isRTL);
                                    Restart_1.restartApp();
                                } }),
                            React.createElement(react_native_paper_1.Divider, null),
                            React.createElement(SettingsItem_1.default, { label: "Dark theme", value: theme.dark, onValueChange: () => {
                                    AsyncStorage_1.default.setItem(THEME_PERSISTENCE_KEY, theme.dark ? 'light' : 'dark');
                                    setTheme((t) => (t.dark ? native_1.DefaultTheme : native_1.DarkTheme));
                                } }),
                            React.createElement(react_native_paper_1.Divider, null),
                            Object.keys(SCREENS).map((name) => (React.createElement(react_native_paper_1.List.Item, { key: name, testID: name, title: SCREENS[name].title, onPress: () => navigation.navigate(name) })))))),
                        React.createElement(Stack.Screen, { name: "NotFound", component: NotFound_1.default, options: { title: 'Oops!' } }),
                        Object.keys(SCREENS).map((name) => (React.createElement(Stack.Screen, { key: name, name: name, getComponent: () => SCREENS[name].component, options: { title: SCREENS[name].title } })))))))))));
}
exports.default = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,