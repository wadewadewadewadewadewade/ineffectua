8b631466a536d993f790141d8f2809e4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const native_1 = require("@react-navigation/native");
const stack_1 = require("@react-navigation/stack");
const AUTH_CONTEXT_ERROR = 'Authentication context not found. Have your wrapped your components with AuthContext.Consumer?';
const AuthContext = React.createContext({
    signIn: () => {
        throw new Error(AUTH_CONTEXT_ERROR);
    },
    signOut: () => {
        throw new Error(AUTH_CONTEXT_ERROR);
    },
});
const SplashScreen = () => {
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_1.ActivityIndicator, null)));
};
const SignInScreen = () => {
    const { signIn } = React.useContext(AuthContext);
    const { colors } = native_1.useTheme();
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_1.TextInput, { placeholder: "Username", style: [
                styles.input,
                { backgroundColor: colors.card, color: colors.text },
            ] }),
        React.createElement(react_native_1.TextInput, { placeholder: "Password", secureTextEntry: true, style: [
                styles.input,
                { backgroundColor: colors.card, color: colors.text },
            ] }),
        React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: signIn, style: styles.button }, "Sign in")));
};
const HomeScreen = () => {
    const { signOut } = React.useContext(AuthContext);
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_paper_1.Title, { style: styles.text }, "Signed in successfully \uD83C\uDF89"),
        React.createElement(react_native_paper_1.Button, { onPress: signOut, style: styles.button }, "Sign out")));
};
const SimpleStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, }) {
    const [state, dispatch] = React.useReducer((prevState, action) => {
        switch (action.type) {
            case 'RESTORE_TOKEN':
                return {
                    ...prevState,
                    userToken: action.token,
                    isLoading: false,
                };
            case 'SIGN_IN':
                return {
                    ...prevState,
                    isSignout: false,
                    userToken: action.token,
                };
            case 'SIGN_OUT':
                return {
                    ...prevState,
                    isSignout: true,
                    userToken: undefined,
                };
        }
    }, {
        isLoading: true,
        isSignout: false,
        userToken: undefined,
    });
    React.useEffect(() => {
        const timer = setTimeout(() => {
            dispatch({ type: 'RESTORE_TOKEN', token: undefined });
        }, 1000);
        return () => clearTimeout(timer);
    }, []);
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    const authContext = React.useMemo(() => ({
        signIn: () => dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' }),
        signOut: () => dispatch({ type: 'SIGN_OUT' }),
    }), []);
    if (state.isLoading) {
        return React.createElement(SplashScreen, null);
    }
    return (React.createElement(AuthContext.Provider, { value: authContext },
        React.createElement(SimpleStack.Navigator, { screenOptions: {
                headerLeft: () => (React.createElement(stack_1.HeaderBackButton, { onPress: () => navigation.goBack() })),
            } }, state.userToken === undefined ? (React.createElement(SimpleStack.Screen, { name: "SignIn", options: {
                title: 'Sign in',
                animationTypeForReplace: state.isSignout ? 'pop' : 'push',
            }, component: SignInScreen })) : (React.createElement(SimpleStack.Screen, { name: "Home", options: { title: 'Home' }, component: HomeScreen })))));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    content: {
        flex: 1,
        padding: 16,
        justifyContent: 'center',
    },
    input: {
        margin: 8,
        padding: 10,
        borderRadius: 3,
        borderWidth: react_native_1.StyleSheet.hairlineWidth,
        borderColor: 'rgba(0, 0, 0, 0.08)',
    },
    button: {
        margin: 8,
    },
    text: {
        textAlign: 'center',
        margin: 8,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,