{"file":"/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx","mappings":"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","names":[],"sources":["/home/wade/projects/ineffectua/src/components/screens/AuthFlow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, TextInput, ActivityIndicator, StyleSheet } from 'react-native';\nimport { Title, Button } from 'react-native-paper';\nimport { useTheme, ParamListBase } from '@react-navigation/native';\nimport {\n  createStackNavigator,\n  HeaderBackButton,\n  StackScreenProps,\n} from '@react-navigation/stack';\n\ntype AuthStackParams = {\n  Splash: undefined;\n  Home: undefined;\n  SignIn: undefined;\n  PostSignOut: undefined;\n};\n\nconst AUTH_CONTEXT_ERROR =\n  'Authentication context not found. Have your wrapped your components with AuthContext.Consumer?';\n\nconst AuthContext = React.createContext<{\n  signIn: () => void;\n  signOut: () => void;\n}>({\n  signIn: () => {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  },\n  signOut: () => {\n    throw new Error(AUTH_CONTEXT_ERROR);\n  },\n});\n\nconst SplashScreen = () => {\n  return (\n    <View style={styles.content}>\n      <ActivityIndicator />\n    </View>\n  );\n};\n\nconst SignInScreen = () => {\n  const { signIn } = React.useContext(AuthContext);\n  const { colors } = useTheme();\n\n  return (\n    <View style={styles.content}>\n      <TextInput\n        placeholder=\"Username\"\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        secureTextEntry\n        style={[\n          styles.input,\n          { backgroundColor: colors.card, color: colors.text },\n        ]}\n      />\n      <Button mode=\"contained\" onPress={signIn} style={styles.button}>\n        Sign in\n      </Button>\n    </View>\n  );\n};\n\nconst HomeScreen = () => {\n  const { signOut } = React.useContext(AuthContext);\n\n  return (\n    <View style={styles.content}>\n      <Title style={styles.text}>Signed in successfully ðŸŽ‰</Title>\n      <Button onPress={signOut} style={styles.button}>\n        Sign out\n      </Button>\n    </View>\n  );\n};\n\nconst SimpleStack = createStackNavigator<AuthStackParams>();\n\ntype State = {\n  isLoading: boolean;\n  isSignout: boolean;\n  userToken: undefined | string;\n};\n\ntype Action =\n  | { type: 'RESTORE_TOKEN'; token: undefined | string }\n  | { type: 'SIGN_IN'; token: string }\n  | { type: 'SIGN_OUT' };\n\nexport default function SimpleStackScreen({\n  navigation,\n}: StackScreenProps<ParamListBase>) {\n  const [state, dispatch] = React.useReducer<React.Reducer<State, Action>>(\n    (prevState, action) => {\n      switch (action.type) {\n        case 'RESTORE_TOKEN':\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case 'SIGN_IN':\n          return {\n            ...prevState,\n            isSignout: false,\n            userToken: action.token,\n          };\n        case 'SIGN_OUT':\n          return {\n            ...prevState,\n            isSignout: true,\n            userToken: undefined,\n          };\n      }\n    },\n    {\n      isLoading: true,\n      isSignout: false,\n      userToken: undefined,\n    }\n  );\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch({ type: 'RESTORE_TOKEN', token: undefined });\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: false,\n    });\n  }, [navigation]);\n\n  const authContext = React.useMemo(\n    () => ({\n      signIn: () => dispatch({ type: 'SIGN_IN', token: 'dummy-auth-token' }),\n      signOut: () => dispatch({ type: 'SIGN_OUT' }),\n    }),\n    []\n  );\n\n  if (state.isLoading) {\n    return <SplashScreen />;\n  }\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <SimpleStack.Navigator\n        screenOptions={{\n          headerLeft: () => (\n            <HeaderBackButton onPress={() => navigation.goBack()} />\n          ),\n        }}\n      >\n        {state.userToken === undefined ? (\n          <SimpleStack.Screen\n            name=\"SignIn\"\n            options={{\n              title: 'Sign in',\n              animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n            }}\n            component={SignInScreen}\n          />\n        ) : (\n          <SimpleStack.Screen\n            name=\"Home\"\n            options={{ title: 'Home' }}\n            component={HomeScreen}\n          />\n        )}\n      </SimpleStack.Navigator>\n    </AuthContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    padding: 16,\n    justifyContent: 'center',\n  },\n  input: {\n    margin: 8,\n    padding: 10,\n    borderRadius: 3,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n  },\n  button: {\n    margin: 8,\n  },\n  text: {\n    textAlign: 'center',\n    margin: 8,\n  },\n});\n"],"version":3}