35c5958a289c00669fb338c6a1577731
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.PanGestureHandler = PanGestureHandler;
Object.defineProperty(exports, "GestureHandlerRootView", {
  enumerable: true,
  get: function get() {
    return require("react-native-gesture-handler").GestureHandlerRootView;
  } });

Object.defineProperty(exports, "TapGestureHandler", {
  enumerable: true,
  get: function get() {
    return require("react-native-gesture-handler").TapGestureHandler;
  } });

Object.defineProperty(exports, "GestureState", {
  enumerable: true,
  get: function get() {
    return require("react-native-gesture-handler").State;
  } });

Object.defineProperty(exports, "PanGestureHandlerGestureEvent", {
  enumerable: true,
  get: function get() {
    return require("react-native-gesture-handler").PanGestureHandlerGestureEvent;
  } });


var React = _interopRequireWildcard(require("react"));



var _DrawerGestureContext = _interopRequireDefault(require("../utils/DrawerGestureContext"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function PanGestureHandler(props) {
  var gestureRef = React.useRef(null);
  return React.createElement(_DrawerGestureContext.default.Provider, {
    value: gestureRef },
  React.createElement(require("react-native-gesture-handler").PanGestureHandler, props));
}