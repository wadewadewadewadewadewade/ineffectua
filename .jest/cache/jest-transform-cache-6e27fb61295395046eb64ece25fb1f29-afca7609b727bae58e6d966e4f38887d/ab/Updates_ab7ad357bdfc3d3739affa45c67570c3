b3f831dbf416676c2b6b74c2b8f1c3e4
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { updateId: true, releaseChannel: true, localAssets: true, isEmergencyLaunch: true, isUsingEmbeddedAssets: true, manifest: true, reloadAsync: true, checkForUpdateAsync: true, fetchUpdateAsync: true, clearUpdateCacheExperimentalAsync: true, addListener: true };exports.reloadAsync = reloadAsync;exports.checkForUpdateAsync = checkForUpdateAsync;exports.fetchUpdateAsync = fetchUpdateAsync;exports.clearUpdateCacheExperimentalAsync = clearUpdateCacheExperimentalAsync;exports.addListener = addListener;exports.manifest = exports.isUsingEmbeddedAssets = exports.isEmergencyLaunch = exports.localAssets = exports.releaseChannel = exports.updateId = void 0;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _core = require("@unimodules/core");
var _fbemitter = require("fbemitter");
var _ExpoUpdates = _interopRequireDefault(require("./ExpoUpdates"));
var _Updates = require("./Updates.types");Object.keys(_Updates).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function get() {return _Updates[key];} });});var _ExpoUpdates$releaseC, _ExpoUpdates$localAss, _manifest2;
var updateId = _ExpoUpdates.default.updateId && typeof _ExpoUpdates.default.updateId === 'string' ?
_ExpoUpdates.default.updateId.toLowerCase() :
null;exports.updateId = updateId;
var releaseChannel = (_ExpoUpdates$releaseC = _ExpoUpdates.default.releaseChannel) != null ? _ExpoUpdates$releaseC : 'default';exports.releaseChannel = releaseChannel;
var localAssets = (_ExpoUpdates$localAss = _ExpoUpdates.default.localAssets) != null ? _ExpoUpdates$localAss : {};exports.localAssets = localAssets;
var isEmergencyLaunch = _ExpoUpdates.default.isEmergencyLaunch || false;exports.isEmergencyLaunch = isEmergencyLaunch;
var isUsingEmbeddedAssets = _ExpoUpdates.default.isUsingEmbeddedAssets || false;exports.isUsingEmbeddedAssets = isUsingEmbeddedAssets;
var _manifest = _ExpoUpdates.default.manifest;
if (_ExpoUpdates.default.manifestString) {
  _manifest = JSON.parse(_ExpoUpdates.default.manifestString);
}
var manifest = (_manifest2 = _manifest) != null ? _manifest2 : {};exports.manifest = manifest;
function reloadAsync() {return _regenerator.default.async(function reloadAsync$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (
          _ExpoUpdates.default.reload) {_context.next = 2;break;}throw (
            new _core.UnavailabilityError('Updates', 'reloadAsync'));case 2:if (!

          __DEV__) {_context.next = 4;break;}throw (
            new _core.CodedError('ERR_UPDATES_DISABLED', 'You cannot use the Updates module in development mode. To test manual updates, make a ' +
            'release build with `npm run ios --configuration Release` or ' +
            '`npm run android --variant Release`.'));case 4:_context.next = 6;return _regenerator.default.awrap(

          _ExpoUpdates.default.reload());case 6:case "end":return _context.stop();}}}, null, null, null, Promise);}

function checkForUpdateAsync() {var result;return _regenerator.default.async(function checkForUpdateAsync$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (
          _ExpoUpdates.default.checkForUpdateAsync) {_context2.next = 2;break;}throw (
            new _core.UnavailabilityError('Updates', 'checkForUpdateAsync'));case 2:if (!

          __DEV__) {_context2.next = 4;break;}throw (
            new _core.CodedError('ERR_UPDATES_DISABLED', 'You cannot check for updates in development mode. To test manual updates, make a ' +
            'release build with `npm run ios --configuration Release` or ' +
            '`npm run android --variant Release`.'));case 4:_context2.next = 6;return _regenerator.default.awrap(

          _ExpoUpdates.default.checkForUpdateAsync());case 6:result = _context2.sent;
          if (result.manifestString) {
            result.manifest = JSON.parse(result.manifestString);
            delete result.manifestString;
          }return _context2.abrupt("return",
          result);case 9:case "end":return _context2.stop();}}}, null, null, null, Promise);}

function fetchUpdateAsync() {var result;return _regenerator.default.async(function fetchUpdateAsync$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:if (
          _ExpoUpdates.default.fetchUpdateAsync) {_context3.next = 2;break;}throw (
            new _core.UnavailabilityError('Updates', 'fetchUpdateAsync'));case 2:if (!

          __DEV__) {_context3.next = 4;break;}throw (
            new _core.CodedError('ERR_UPDATES_DISABLED', 'You cannot fetch updates in development mode. To test manual updates, make a ' +
            'release build with `npm run ios --configuration Release` or ' +
            '`npm run android --variant Release`.'));case 4:_context3.next = 6;return _regenerator.default.awrap(

          _ExpoUpdates.default.fetchUpdateAsync());case 6:result = _context3.sent;
          if (result.manifestString) {
            result.manifest = JSON.parse(result.manifestString);
            delete result.manifestString;
          }return _context3.abrupt("return",
          result);case 9:case "end":return _context3.stop();}}}, null, null, null, Promise);}

function clearUpdateCacheExperimentalAsync(_sdkVersion) {
  console.warn("This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!");
}
var _emitter;
function _getEmitter() {
  if (!_emitter) {
    _emitter = new _fbemitter.EventEmitter();
    _core.RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);
  }
  return _emitter;
}
function _emitEvent(params) {
  var newParams = params;
  if (typeof params === 'string') {
    newParams = JSON.parse(params);
  }
  if (newParams.manifestString) {
    newParams.manifest = JSON.parse(newParams.manifestString);
    delete newParams.manifestString;
  }
  if (!_emitter) {
    throw new Error("EventEmitter must be initialized to use from its listener");
  }
  _emitter.emit('Expo.updatesEvent', newParams);
}
function addListener(listener) {
  var emitter = _getEmitter();
  return emitter.addListener('Expo.updatesEvent', listener);
}