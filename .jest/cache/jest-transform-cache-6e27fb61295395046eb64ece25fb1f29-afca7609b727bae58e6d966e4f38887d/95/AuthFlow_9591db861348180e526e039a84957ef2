adf5b03028db63f9f137c1d3ec7c5f17
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const native_1 = require("@react-navigation/native");
const stack_1 = require("@react-navigation/stack");
const AuthContext_1 = __importDefault(require("../shared/AuthContext"));
const firebase = __importStar(require("firebase"));
const SplashScreen = () => {
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_1.ActivityIndicator, null)));
};
const SignInScreen = () => {
    const { signIn } = React.useContext(AuthContext_1.default);
    const { colors } = native_1.useTheme();
    const [email, onChangeEmail] = React.useState('Email');
    const [password, onChangePassword] = React.useState('Password');
    const [error, onChangeError] = React.useState('');
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_1.TextInput, { placeholder: "Email", autoCompleteType: "email", style: [
                styles.input,
                { backgroundColor: colors.card, color: colors.text },
            ], onChangeText: onChangeEmail }),
        React.createElement(react_native_1.TextInput, { placeholder: "Password", secureTextEntry: true, style: [
                styles.input,
                { backgroundColor: colors.card, color: colors.text },
            ], onChangeText: onChangePassword }),
        error !== undefined ? (React.createElement(react_native_1.Text, { style: { color: 'red' } }, error)) : null,
        React.createElement(react_native_paper_1.Button, { mode: "contained", onPress: () => {
                signIn(email, password).then((errorMessage) => {
                    if (errorMessage && errorMessage.length > 0) {
                        onChangeError(errorMessage);
                    }
                });
            }, style: styles.button }, "Sign in")));
};
const AuthenticationSuccessScreen = () => {
    const { signOut } = React.useContext(AuthContext_1.default);
    return (React.createElement(react_native_1.View, { style: styles.content },
        React.createElement(react_native_paper_1.Title, { style: styles.text }, "Signed in successfully \uD83C\uDF89"),
        React.createElement(react_native_paper_1.Button, { onPress: signOut, style: styles.button }, "Sign out")));
};
const SimpleStack = stack_1.createStackNavigator();
function SimpleStackScreen({ navigation, }) {
    const [state, dispatch] = React.useReducer((prevState, action) => {
        switch (action.type) {
            case 'RESTORE_TOKEN':
                return {
                    ...prevState,
                    userToken: action.token,
                    isLoading: false,
                };
            case 'SIGN_IN':
                return {
                    ...prevState,
                    isSignout: false,
                    userToken: action.token,
                };
            case 'SIGN_OUT':
                return {
                    ...prevState,
                    isSignout: true,
                    userToken: null,
                };
        }
    }, {
        isLoading: true,
        isSignout: false,
        userToken: null,
    });
    React.useEffect(() => {
        dispatch({ type: 'RESTORE_TOKEN', token: state.userToken });
    }, []);
    React.useLayoutEffect(() => {
        navigation.setOptions({
            headerShown: false,
        });
    }, [navigation]);
    const authContext = React.useMemo(() => ({
        user: firebase.auth().currentUser,
        signIn: (email, password) => new Promise((success, error) => {
            const provider = new firebase.auth.FacebookAuthProvider();
            try {
                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
                    .then(() => firebase.auth().signInWithEmailAndPassword(email, password).then(user => {
                    if (user !== null) {
                        dispatch({ type: 'SIGN_IN', token: user.user });
                        success();
                    }
                }).catch(err => error(err))).catch(err => error(err));
            }
            catch (e) {
                error(e.message);
            }
        }),
        signOut: () => new Promise((s) => dispatch({ type: 'SIGN_OUT' })),
    }), []);
    if (state.userToken !== null) {
        navigation.popToTop();
    }
    if (state.isLoading) {
        return React.createElement(SplashScreen, null);
    }
    return (React.createElement(AuthContext_1.default.Provider, { value: authContext },
        React.createElement(SimpleStack.Navigator
        // take out the back button so as to disable the users ability to bail out of authentication
        /*screenOptions={{
          headerLeft: () => (
            <HeaderBackButton onPress={() => navigation.goBack()} />
          ),
        }}*/
        , null, state.userToken === null ? (React.createElement(SimpleStack.Screen, { name: "SignIn", options: {
                title: 'Sign in',
                animationTypeForReplace: state.isSignout ? 'pop' : 'push',
            }, component: SignInScreen })) : (React.createElement(SimpleStack.Screen, { name: "Home", options: { title: 'Authentication Success' }, component: AuthenticationSuccessScreen })))));
}
exports.default = SimpleStackScreen;
const styles = react_native_1.StyleSheet.create({
    content: {
        flex: 1,
        padding: 16,
        justifyContent: 'center',
    },
    input: {
        margin: 8,
        padding: 10,
        borderRadius: 3,
        borderWidth: react_native_1.StyleSheet.hairlineWidth,
        borderColor: 'rgba(0, 0, 0, 0.08)',
    },
    button: {
        margin: 8,
    },
    text: {
        textAlign: 'center',
        margin: 8,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,