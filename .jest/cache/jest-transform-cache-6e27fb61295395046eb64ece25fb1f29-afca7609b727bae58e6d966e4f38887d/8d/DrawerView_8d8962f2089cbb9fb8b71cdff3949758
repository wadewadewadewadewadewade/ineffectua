27ea0563ea3f211afaeb3214333e1333
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));







var DrawerActions = _interopRequireWildcard(require("../routers/DrawerActions"));

var _DrawerSidebar = _interopRequireDefault(require("./DrawerSidebar"));

var _DrawerGestureContext = _interopRequireDefault(require("../utils/DrawerGestureContext"));

var _ResourceSavingScene = _interopRequireDefault(require("./ResourceSavingScene"));

var _Drawer = _interopRequireDefault(require("./Drawer"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var




DrawerView = function (_React$PureComponent) {require("@babel/runtime/helpers/inherits")(DrawerView, _React$PureComponent);var _super = _createSuper(DrawerView);
  function DrawerView() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, DrawerView);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "state", {
      loaded: [_this.props.navigation.state.index],
      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth });


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "context", void 0);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "drawerGestureRef", React.createRef());

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "getLockMode", function (_ref)


    {var navigation = _ref.navigation,descriptors = _ref.descriptors;
      var activeKey = navigation.state.routes[navigation.state.index].key;var

      drawerLockMode =
      descriptors[activeKey].options.drawerLockMode;
      return drawerLockMode;
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleDrawerOpen", function () {var

      navigation =
      _this.props.navigation;
      navigation.dispatch(DrawerActions.openDrawer({
        key: navigation.state.key }));

    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleDrawerClose", function () {var

      navigation =
      _this.props.navigation;
      navigation.dispatch(DrawerActions.closeDrawer({
        key: navigation.state.key }));

    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "updateWidth", function () {
      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;

      if (_this.state.drawerWidth !== drawerWidth) {
        _this.setState({
          drawerWidth: drawerWidth });

      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "renderNavigationView", function (_ref2)

    {var progress = _ref2.progress;
      return React.createElement(_DrawerSidebar.default, _extends({
        screenProps: _this.props.screenProps,
        drawerOpenProgress: progress,
        navigation: _this.props.navigation,
        descriptors: _this.props.descriptors },
      _this.props.navigationConfig));
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "renderContent", function () {var _this$props =



      _this.props,lazy = _this$props.lazy,navigation = _this$props.navigation;var

      loaded =
      _this.state.loaded;var

      routes =
      navigation.state.routes;

      if (_this.props.navigationConfig.unmountInactiveRoutes) {
        var activeKey = navigation.state.routes[navigation.state.index].key;
        var descriptor = _this.props.descriptors[activeKey];
        return React.createElement(require("react-navigation").SceneView, {
          navigation: descriptor.navigation,
          screenProps: _this.props.screenProps,
          component: descriptor.getComponent() });

      } else {
        return React.createElement(require("react-native-screens").ScreenContainer, {
          style: styles.content },
        routes.map(function (route, index) {
          if (lazy && !loaded.includes(index)) {

            return null;
          }

          var isFocused = navigation.state.index === index;
          var descriptor = _this.props.descriptors[route.key];
          return React.createElement(_ResourceSavingScene.default, {
            key: route.key,
            style: [require("react-native").StyleSheet.absoluteFill, {
              opacity: isFocused ? 1 : 0 }],

            isVisible: isFocused },
          React.createElement(require("react-navigation").SceneView, {
            navigation: descriptor.navigation,
            screenProps: _this.props.screenProps,
            component: descriptor.getComponent() }));

        }));
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "setDrawerGestureRef", function (ref) {

      _this.drawerGestureRef.current = ref;
    });return _this;
  }require("@babel/runtime/helpers/createClass")(DrawerView, [{ key: "componentDidMount", value: function componentDidMount()











    {

      if (this.getLockMode(this.props) === 'locked-open') {
        this.handleDrawerOpen();
      }

      require("react-native").Dimensions.addEventListener('change', this.updateWidth);
    } }, { key: "componentDidUpdate", value: function componentDidUpdate(

    prevProps) {
      var prevLockMode = this.getLockMode(prevProps);
      var nextLockMode = this.getLockMode(this.props);

      if (prevLockMode !== nextLockMode) {
        if (nextLockMode === 'locked-open') {
          this.handleDrawerOpen();
        } else {
          this.handleDrawerClose();
        }
      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      require("react-native").Dimensions.removeEventListener('change', this.updateWidth);
    } }, { key: "getDrawerBackgroundColor", value: function getDrawerBackgroundColor()

    {var

      drawerBackgroundColor =
      this.props.navigationConfig.drawerBackgroundColor;

      if (drawerBackgroundColor) {
        return typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];
      } else {
        return require("react-navigation").ThemeColors[this.context].bodyContent;
      }
    } }, { key: "getOverlayColor", value: function getOverlayColor()

    {var

      overlayColor =
      this.props.navigationConfig.overlayColor;

      if (overlayColor) {
        return typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];
      } else {
        return 'rgba(0,0,0,0.5)';
      }
    } }, { key: "render", value: function render()

    {var _this$props2 =



      this.props,navigation = _this$props2.navigation,navigationConfig = _this$props2.navigationConfig;var

      drawerType =






      navigationConfig.drawerType,sceneContainerStyle = navigationConfig.sceneContainerStyle,edgeWidth = navigationConfig.edgeWidth,minSwipeDistance = navigationConfig.minSwipeDistance,hideStatusBar = navigationConfig.hideStatusBar,statusBarAnimation = navigationConfig.statusBarAnimation,gestureHandlerProps = navigationConfig.gestureHandlerProps;
      var drawerLockMode = this.getLockMode(this.props);
      var drawerBackgroundColor = this.getDrawerBackgroundColor();
      var overlayColor = this.getOverlayColor();
      return React.createElement(_DrawerGestureContext.default.Provider, {
        value: this.drawerGestureRef },
      React.createElement(_Drawer.default, {
        open: navigation.state.isDrawerOpen,
        gestureEnabled: drawerLockMode !== 'locked-open' && drawerLockMode !== 'locked-closed',
        onOpen: this.handleDrawerOpen,
        onClose: this.handleDrawerClose,
        onGestureRef: this.setDrawerGestureRef,
        gestureHandlerProps: gestureHandlerProps,
        drawerType: drawerType,
        drawerPosition: this.props.navigationConfig.drawerPosition,
        sceneContainerStyle: sceneContainerStyle,
        drawerStyle: {
          backgroundColor: drawerBackgroundColor,
          width: this.state.drawerWidth },

        overlayStyle: {
          backgroundColor: overlayColor },

        swipeEdgeWidth: edgeWidth,
        swipeDistanceThreshold: minSwipeDistance,
        hideStatusBar: hideStatusBar,
        statusBarAnimation: statusBarAnimation,
        renderDrawerContent: this.renderNavigationView,
        renderSceneContent: this.renderContent }));

    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {var index = nextProps.navigation.state.index;return { loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(require("@babel/runtime/helpers/toConsumableArray")(prevState.loaded), [index]) };} }]);return DrawerView;}(React.PureComponent);



exports.default = DrawerView;

_defineProperty(DrawerView, "contextType", require("react-navigation").ThemeContext);

_defineProperty(DrawerView, "defaultProps", {
  lazy: true });


var styles = require("react-native").StyleSheet.create({
  content: {
    flex: 1 } });