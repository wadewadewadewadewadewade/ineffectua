9552587ac5d72126e42e03c73fb14a11
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _react = _interopRequireWildcard(require("react"));
var _GenericTouchable = _interopRequireWildcard(require("./GenericTouchable"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));var _jsxFileName = "/home/wade/projects/ineffectua/node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}var




TouchableHighlight = function (_Component) {(0, _inherits2.default)(TouchableHighlight, _Component);var _super = _createSuper(TouchableHighlight);
















  function TouchableHighlight(props) {var _this;(0, _classCallCheck2.default)(this, TouchableHighlight);
    _this = _super.call(this, props);_this.







    showUnderlay = function () {
      if (!_this.hasPressHandler()) {
        return;
      }
      _this.setState({
        extraChildStyle: {
          opacity: _this.props.activeOpacity },

        extraUnderlayStyle: {
          backgroundColor: _this.props.underlayColor } });


      _this.props.onShowUnderlay && _this.props.onShowUnderlay();
    };_this.

    hasPressHandler = function () {return (
        _this.props.onPress ||
        _this.props.onPressIn ||
        _this.props.onPressOut ||
        _this.props.onLongPress);};_this.

    hideUnderlay = function () {
      _this.setState({
        extraChildStyle: null,
        extraUnderlayStyle: null });

      _this.props.onHideUnderlay && _this.props.onHideUnderlay();
    };_this.















    onStateChange = function (from, to) {
      if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
        _this.showUnderlay();
      } else if (
      to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED ||
      to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE)
      {
        _this.hideUnderlay();
      }
    };_this.state = { extraChildStyle: null, extraUnderlayStyle: null };return _this;}(0, _createClass2.default)(TouchableHighlight, [{ key: "renderChildren", value: function renderChildren() {if (!this.props.children) {return _react.default.createElement(_reactNative.View, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 66, columnNumber: 14 } });}var child = _react.default.Children.only(this.props.children);return _react.default.cloneElement(child, { style: _reactNative.StyleSheet.compose(child.props.style, this.state.extraChildStyle) });} }, { key: "render", value: function render()

    {var _this$props =
      this.props,_this$props$style = _this$props.style,style = _this$props$style === void 0 ? {} : _this$props$style,rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);var
      extraUnderlayStyle = this.state.extraUnderlayStyle;
      return (
        _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({},
        rest, {
          style: [style, extraUnderlayStyle],
          onStateChange: this.onStateChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 93, columnNumber: 7 } }),
        this.renderChildren()));


    } }]);return TouchableHighlight;}(_react.Component);exports.default = TouchableHighlight;TouchableHighlight.defaultProps = _objectSpread(_objectSpread({}, _GenericTouchable.default.defaultProps), {}, { activeOpacity: 0.85, delayPressOut: 100, underlayColor: 'black' });TouchableHighlight.propTypes = _objectSpread(_objectSpread({}, _GenericTouchable.default.publicPropTypes), {}, { activeOpacity: _propTypes.default.number, underlayColor: _propTypes.default.string, style: _propTypes.default.any, onShowUnderlay: _propTypes.default.func, onHideUnderlay: _propTypes.default.func });