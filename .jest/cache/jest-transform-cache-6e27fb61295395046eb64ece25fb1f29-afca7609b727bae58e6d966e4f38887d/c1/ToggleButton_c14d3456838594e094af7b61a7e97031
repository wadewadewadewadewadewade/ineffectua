36b8e7b908b25c97256a3d1e6d8cc583
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ToggleButtonGroup = _interopRequireWildcard(require("./ToggleButtonGroup"));

var _ToggleButtonRow = _interopRequireDefault(require("./ToggleButtonRow"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}

function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var



































ToggleButton = function (_React$Component) {require("@babel/runtime/helpers/inherits")(ToggleButton, _React$Component);var _super = _createSuper(ToggleButton);function ToggleButton() {require("@babel/runtime/helpers/classCallCheck")(this, ToggleButton);return _super.apply(this, arguments);}require("@babel/runtime/helpers/createClass")(ToggleButton, [{ key: "render", value: function render()


    {
      var _this$props = this.props,

      icon =








      _this$props.icon,size = _this$props.size,theme = _this$props.theme,accessibilityLabel = _this$props.accessibilityLabel,disabled = _this$props.disabled,style = _this$props.style,value = _this$props.value,status = _this$props.status,_onPress = _this$props.onPress,
      rest = _objectWithoutProperties(_this$props, ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress"]);

      var borderRadius = theme.roundness;
      return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {
        var backgroundColor;
        var checked = context && context.value === value || status === 'checked';

        if (checked) {
          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';
        } else {
          backgroundColor = 'transparent';
        }

        return React.createElement(_IconButton.default, _extends({
          borderless: false,
          icon: icon,
          onPress: function onPress(e) {
            if (_onPress) {
              _onPress(e);
            }

            if (context) {
              context.onValueChange(!checked ? value : null);
            }
          },
          size: size,
          accessibilityLabel: accessibilityLabel,
          disabled: disabled,
          style: [styles.content, {
            backgroundColor: backgroundColor,
            borderRadius: borderRadius,
            borderColor: (0, _color.default)(theme.dark ? require("../../styles/colors").white : require("../../styles/colors").black).alpha(0.29).rgb().string() },
          style] },
        rest));
      });
    } }]);return ToggleButton;}(React.Component);



_defineProperty(ToggleButton, "Group", _ToggleButtonGroup.default);

_defineProperty(ToggleButton, "Row", _ToggleButtonRow.default);

var styles = require("react-native").StyleSheet.create({
  content: {
    width: 42,
    height: 42,
    margin: 0 } });



var _default = (0, require("../../core/theming").withTheme)(ToggleButton);

exports.default = _default;