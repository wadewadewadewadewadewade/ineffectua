b724cd267e705d1526f7ce3944be5d95
"use strict";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = createTabNavigator;

var React = _interopRequireWildcard(require("react"));



function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

function createTabNavigator(TabView) {var
  NavigationView = function (_React$Component) {require("@babel/runtime/helpers/inherits")(NavigationView, _React$Component);var _super = _createSuper(NavigationView);
    function NavigationView() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, NavigationView);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_renderScene", function (_ref)

      {var route = _ref.route;var _this$props =



        _this.props,screenProps = _this$props.screenProps,descriptors = _this$props.descriptors;
        var descriptor = descriptors[route.key];
        var TabComponent = descriptor.getComponent();
        return React.createElement(require("react-navigation").SceneView, {
          screenProps: screenProps,
          navigation: descriptor.navigation,
          component: TabComponent });

      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_renderIcon", function (_ref2)




      {var route = _ref2.route,focused = _ref2.focused,tintColor = _ref2.tintColor,_ref2$horizontal = _ref2.horizontal,horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal;var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            focused: focused,
            tintColor: tintColor,
            horizontal: horizontal }) :
          options.tabBarIcon;
        }

        return null;
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getLabelText", function (_ref3)

      {var route = _ref3.route;var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarLabel) {
          return options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getAccessibilityLabel", function (_ref4)

      {var route = _ref4.route;var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {
          return options.tabBarAccessibilityLabel;
        }

        var label = _this._getLabelText({
          route: route });


        if (typeof label === 'string') {var

          routes =
          _this.props.navigation.state.routes;
          return "".concat(label, ", tab, ").concat(routes.indexOf(route) + 1, " of ").concat(routes.length);
        }

        return undefined;
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_getTestID", function (_ref5)

      {var route = _ref5.route;var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        return options.tabBarTestID;
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_makeDefaultHandler", function (_ref6) {var
        route = _ref6.route,
        navigation = _ref6.navigation;return (
          function () {
            if (navigation.isFocused()) {
              if (route.hasOwnProperty('index') && route.index > 0) {

                navigation.dispatch(require("react-navigation").StackActions.popToTop({
                  key: route.key }));

              } else {
                navigation.emit('refocus');
              }
            } else {
              _this._jumpTo(route.routeName);
            }
          });});

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleTabPress", function (_ref7)

      {var route = _ref7.route;
        _this._isTabPress = true;


        Promise.resolve().then(function () {return _this._isTabPress = false;});var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];var

        navigation =

        descriptor.navigation,options = descriptor.options;

        var defaultHandler = _this._makeDefaultHandler({
          route: route,
          navigation: navigation });


        if (options.tabBarOnPress) {
          options.tabBarOnPress({
            navigation: navigation,
            defaultHandler: defaultHandler });

        } else {
          defaultHandler();
        }
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleTabLongPress", function (_ref8)

      {var route = _ref8.route;var

        descriptors =
        _this.props.descriptors;
        var descriptor = descriptors[route.key];var

        navigation =

        descriptor.navigation,options = descriptor.options;

        var defaultHandler = _this._makeDefaultHandler({
          route: route,
          navigation: navigation });


        if (options.tabBarOnLongPress) {
          options.tabBarOnLongPress({
            navigation: navigation,
            defaultHandler: defaultHandler });

        } else {
          defaultHandler();
        }
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_handleIndexChange", function (index) {
        if (_this._isTabPress) {
          _this._isTabPress = false;
          return;
        }

        _this._jumpTo(_this.props.navigation.state.routes[index].routeName);
      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_jumpTo", function (routeName) {var

        navigation =
        _this.props.navigation;
        navigation.dispatch(require("react-navigation").SwitchActions.jumpTo({
          routeName: routeName,
          key: navigation.state.key }));

      });

      _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "_isTabPress", false);return _this;
    }require("@babel/runtime/helpers/createClass")(NavigationView, [{ key: "render", value: function render()

      {var _this$props2 =





        this.props,descriptors = _this$props2.descriptors,navigation = _this$props2.navigation,screenProps = _this$props2.screenProps,navigationConfig = _this$props2.navigationConfig;var

        state =
        navigation.state;
        var route = state.routes[state.index];
        var descriptor = descriptors[route.key];
        return (



          React.createElement(TabView, _extends({}, navigationConfig, descriptor.options, {
            getLabelText: this._getLabelText,
            getAccessibilityLabel: this._getAccessibilityLabel,
            getTestID: this._getTestID,
            renderIcon: this._renderIcon,
            renderScene: this._renderScene,
            onIndexChange: this._handleIndexChange,
            onTabPress: this._handleTabPress,
            onTabLongPress: this._handleTabLongPress,
            navigation: navigation,
            descriptors: descriptors,
            screenProps: screenProps })));


      } }]);return NavigationView;}(React.Component);



  return function (routes) {var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var router = (0, require("react-navigation").TabRouter)(routes, config);
    return (0, require("react-navigation").createNavigator)(NavigationView, router, config);
  };
}